import type { Net } from '@pc/database/clients/core';
import Link from 'next/link';
import { useEffect, useState } from 'react';

import * as Accordion from '@/components/lib/Accordion';
import { Badge } from '@/components/lib/Badge';
import { CodeBlock } from '@/components/lib/CodeBlock';
import { Flex } from '@/components/lib/Flex';
import { H4 } from '@/components/lib/Heading';
import { List, ListItem } from '@/components/lib/List';
import { Text } from '@/components/lib/Text';
import { TextLink } from '@/components/lib/TextLink';
import { useSelectedProject } from '@/hooks/selected-project';
import config from '@/utils/config';
import { StableId } from '@/utils/stable-ids';

const NAJ_STARTER_TEMPLATE = `const { connect, keyStores } = require("near-api-js");

// Can be an empty object if not signing transactions

const keyStore = new keyStores.BrowserLocalStorageKeyStore();

const RPC_API_ENDPOINT = '<RPC service url>';
const JWT = '<YOUR-JWT>';

const ACCOUNT_ID = 'account.near';

const config = {
    networkId: 'testnet',
    keyStore,
    nodeUrl: RPC_API_ENDPOINT,
    headers: { 'Authorization': \`Bearer \${JWT}\` },
};

// Example: Fetching account status

async function getState(accountId) {
    const near = await connect(config);
    const account = await near.account(accountId);
    const state = await account.state();
    console.log(state);
}

getState(ACCOUNT_ID);`;

const TEST_JWT_KEYS = `curl -X POST -H 'Authorization:Bearer <YOUR-JWT>' -H 'Content-Type: application/json' -d '{"jsonrpc": "2.0", "id":"dontcare","method":"status","params":[] }' ${config.url.rpc.recommended.TESTNET}`;

export default function StarterGuide() {
  const [starterCode, setStarterCode] = useState<{ naj: string }>({
    naj: NAJ_STARTER_TEMPLATE,
  });

  const { environment } = useSelectedProject();

  // TODO (P2+) determine net by other means than subId
  useEffect(() => {
    const net: Net = environment?.subId === 2 ? 'MAINNET' : 'TESTNET';

    if (!environment?.subId) {
      return;
    }

    setStarterCode({
      naj: NAJ_STARTER_TEMPLATE.replace(/<RPC service url>/, config.url.rpc.recommended[net]),
    });
  }, [environment]);

  return (
    <Flex stack gap="l">
      <Flex stack>
        <H4>Using Your Own JWTs</H4>

        <Text>
          Use your JWTs issued by your IDP to access Pagoda API (in Beta) to use RPC and Enhanced APIs. Using JWTs on
          the client-side instead of API keys will help prevent users from abusing your access. If you require backend
          access, we recommend using{' '}
          <Link href="/apis?tab=keys" passHref>
            <TextLink stableId={StableId.JWT_STARTER_GUIDE_KEYS_LINK}>API keys</TextLink>
          </Link>
          . Please note that only JWTs generated by the RS256 algorithm are supported.
        </Text>
        <Text>
          Unlock insights from the Statistics Page into your RPC usage and performance (e.g. latency, success%),
          subscribe to updates from Status page to get notified and react when incidents happened, and upgrade your data
          query experiences with instant access to balances and more with Enhanced APIs.
        </Text>
        <Text weight="semibold">Quick Endpoint Setup</Text>
        <List as="ul">
          <ListItem>
            RPC API Access
            <List as="ul">
              <ListItem>
                <Badge size="s">POST</Badge> for all RPC methods
              </ListItem>
              <ListItem>
                <Badge size="s">JSON RPC 2.0</Badge>
              </ListItem>
              <ListItem>
                <Badge size="s">id: &quot;dontcare&quot;</Badge>
              </ListItem>
              <ListItem>
                Endpoint URL varies by network
                <List as="ul">
                  <ListItem>
                    <Badge size="s">{config.url.rpc.recommended.TESTNET}</Badge>
                  </ListItem>
                  <ListItem>
                    <Badge size="s">{config.url.rpc.recommended.MAINNET}</Badge>
                  </ListItem>
                </List>
              </ListItem>
              <ListItem>We are working on supporting Archival RPC as the next phase</ListItem>
            </List>
          </ListItem>
          <ListItem>
            Enhanced API Access
            <List as="ul">
              <ListItem>Follows RESTful API design</ListItem>
              <ListItem>
                Default Content Type: <Badge size="s">application/json</Badge>
              </ListItem>
              <ListItem>
                The JWT should be set as the <Badge size="s">Bearer</Badge> token in an{' '}
                <Badge size="s">Authorization</Badge> HTTP Header for each Enhanced API call
              </ListItem>
              <ListItem>
                Endpoint URL varies by network
                <List as="ul">
                  <ListItem>
                    <Badge size="s">{config.url.eapi.TESTNET}</Badge>
                  </ListItem>
                  <ListItem>
                    <Badge size="s">{config.url.eapi.MAINNET}</Badge>
                  </ListItem>
                </List>
              </ListItem>
            </List>
          </ListItem>
        </List>
        <Text>Pagoda RPC service follows NEAR RPC standards.</Text>
        <Text>
          Refer to the{' '}
          <TextLink
            stableId={StableId.STARTER_GUIDE_NEAR_API_DOCS_LINK}
            href="https://docs.near.org/api/rpc/introduction"
            external
          >
            NEAR API Documentation
          </TextLink>{' '}
          for the list of JSON RPC methods to interact with the NEAR blockchain and instructions below in the dropdown
          to get started.
        </Text>
        <Text>Refer to the Enhanced API tab for instructions and documentation to use Enhanced APIs.</Text>
        <Text weight="semibold">Instructions to get started with making requests to the Pagoda RPC service.</Text>
      </Flex>

      <Accordion.Root type="multiple" inline>
        <Accordion.Item value="test">
          <Accordion.Trigger stableId={StableId.STARTER_GUIDE_ACCORDION_TEST_KEYS_TRIGGER}>
            Quickly Test your JWTs
          </Accordion.Trigger>
          <Accordion.Content>
            <CodeBlock language="bash">{TEST_JWT_KEYS}</CodeBlock>
          </Accordion.Content>
        </Accordion.Item>

        <Accordion.Item value="js">
          <Accordion.Trigger stableId={StableId.STARTER_GUIDE_ACCORDION_JS_TRIGGER}>
            Javascript (near-api-js)
          </Accordion.Trigger>
          <Accordion.Content>
            <List as="ol" gap="l">
              <ListItem>
                If you don&#39;t yet have near-api-js installed in your project, follow the instructions from the{' '}
                <TextLink
                  stableId={StableId.STARTER_GUIDE_NEAR_API_JS_DOCS_LINK}
                  href="https://docs.near.org/docs/api/naj-quick-reference#install"
                  external
                >
                  near-api-js quick reference guide
                </TextLink>
                .
              </ListItem>
              <ListItem>
                <Flex stack>
                  Add the following code to get started:
                  <CodeBlock language="javascript">{starterCode.naj}</CodeBlock>
                </Flex>
              </ListItem>
            </List>
          </Accordion.Content>
        </Accordion.Item>
      </Accordion.Root>
    </Flex>
  );
}
