// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DEPLOYS_DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = env("GENERATE_PATH")
  binaryTargets = ["linux-musl", "native"]
}

// a github repo set up for automated deploys
model Repository {
  slug                  String                 @unique
  projectSlug           String
  environmentSubId      Int
  githubRepoFullName    String                 @unique
  contractDeployConfigs ContractDeployConfig[]
  repoDeployments       RepoDeployment[]
  enabled               Boolean                @default(true)
  frontendDeployConfigs FrontendDeployConfig[]
  nearSocialComponentDeployConfigs NearSocialComponentDeployConfig[]
  authTokenHash         Bytes
  authTokenSalt         Bytes
}

// deployment configuration for a given contract in a Repository
// (many templates will only have one)
model ContractDeployConfig {
  slug                String               @unique
  repository          Repository           @relation(fields: [repositorySlug], references: [slug])
  repositorySlug      String
  filename            String
  nearAccountId       String
  nearPrivateKey      String
  contractDeployments ContractDeployment[]
}

// deployment configuration for a given near social component in a Repository
model NearSocialComponentDeployConfig {
  slug                String               @unique
  repository          Repository           @relation(fields: [repositorySlug], references: [slug])
  repositorySlug      String
  componentName          String
  nearAccountId       String
  nearPrivateKey      String
  componentPath          String
  nearSocialComponentDeployments NearSocialComponentDeployment[]
}

// deployment configuration for a given frontend in a Repository
// (many templates will only have one)
model FrontendDeployConfig {
  slug                String               @unique
  repository          Repository           @relation(fields: [repositorySlug], references: [slug])
  repositorySlug      String
  packageName         String
  frontendDeployments FrontendDeployment[]
}

// top level reference to a deployment workflow for a Repository which
// will lead to 1+ ContractDeployments
model RepoDeployment {
  slug                String               @unique
  repository          Repository           @relation(fields: [repositorySlug], references: [slug])
  repositorySlug      String
  commitHash          String
  commitMessage       String
  contractDeployments ContractDeployment[]
  frontendDeployments FrontendDeployment[]
  nearSocialComponentDeployments NearSocialComponentDeployment[]
  createdAt           DateTime             @default(now()) @db.Timestamptz
}

enum ContractDeployStatus {
  IN_PROGRESS
  SUCCESS
  ERROR
}

// an executed deployment action on a single ContractDeployConfig
model ContractDeployment {
  slug                     String               @unique
  repoDeployment           RepoDeployment       @relation(fields: [repoDeploymentSlug], references: [slug])
  repoDeploymentSlug       String
  contractDeployConfig     ContractDeployConfig @relation(fields: [contractDeployConfigSlug], references: [slug])
  contractDeployConfigSlug String
  deployTransactionHash    String?
  status                   ContractDeployStatus @default(IN_PROGRESS)
}

model NearSocialComponentDeployment {
  slug                             String               @unique
  repoDeployment                   RepoDeployment       @relation(fields: [repoDeploymentSlug], references: [slug])
  repoDeploymentSlug               String
  nearSocialComponentDeployConfig     NearSocialComponentDeployConfig @relation(fields: [nearSocialComponentDeployConfigSlug], references: [slug])
  nearSocialComponentDeployConfigSlug String
  deployTransactionHash            String?
  status                           ContractDeployStatus @default(IN_PROGRESS)
}

// an executed deployment action on a single FrontendDeployConfig
model FrontendDeployment {
  slug                     String               @unique
  url                      String?
  cid                      String?
  repoDeployment           RepoDeployment       @relation(fields: [repoDeploymentSlug], references: [slug])
  repoDeploymentSlug       String
  frontendDeployConfig     FrontendDeployConfig @relation(fields: [frontendDeployConfigSlug], references: [slug])
  frontendDeployConfigSlug String
}
