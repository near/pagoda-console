// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  Int           @id @default(autoincrement())
  uid                 String        @unique
  email               String        @unique
  active              Boolean       @default(true)
  teamMembers         TeamMember[]
  createdAt           DateTime?     @default(now())
  updatedAt           DateTime?     @updatedAt
  createdTeams        Team[]        @relation("UserCreatedTeam")
  updatedTeams        Team[]        @relation("UserUpdatedTeam")
  createdTeamMembers  TeamMember[]  @relation("UserCreatedTeamMember")
  updatedTeamMembers  TeamMember[]  @relation("UserUpdatedTeamMember")
  createdProjects     Project[]     @relation("UserCreatedProject")
  updatedProjects     Project[]     @relation("UserUpdatedProject")
  createdEnvironments Environment[] @relation("UserCreatedEnvironment")
  updatedEnvironments Environment[] @relation("UserUpdatedEnvironment")
  createdContracts    Contract[]    @relation("UserCreatedContract")
  updatedContracts    Contract[]    @relation("UserUpdatedContract")
  createdTeamProject  TeamProject[] @relation("UserCreatedTeamProject")
  updatedTeamProject  TeamProject[] @relation("UserUpdatedTeamProject")
  userActions         UserAction[]
  createdAlertRules   AlertRule[]   @relation("UserCreatedAlert")
  updatedAlertRules   AlertRule[]   @relation("UserUpdatedAlert")
}

model Team {
  id            Int           @id @default(autoincrement())
  name          String
  active        Boolean       @default(true)
  teamMembers   TeamMember[]
  teamProjects  TeamProject[]
  createdAt     DateTime?     @default(now())
  createdByUser User?         @relation(name: "UserCreatedTeam", fields: [createdBy], references: [id])
  createdBy     Int?
  updatedByUser User?         @relation(name: "UserUpdatedTeam", fields: [updatedBy], references: [id])
  updatedAt     DateTime?     @updatedAt
  updatedBy     Int?
}

model TeamMember {
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
  team          Team      @relation(fields: [teamId], references: [id])
  teamId        Int
  active        Boolean   @default(true)
  createdAt     DateTime? @default(now())
  createdByUser User?     @relation(name: "UserCreatedTeamMember", fields: [createdBy], references: [id])
  createdBy     Int?
  updatedByUser User?     @relation(name: "UserUpdatedTeamMember", fields: [updatedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     Int?

  @@id([userId, teamId])
}

model Project {
  id            Int              @id @default(autoincrement())
  name          String
  slug          String           @unique
  active        Boolean          @default(true)
  teamProjects  TeamProject[]
  environments  Environment[]
  tutorial      ProjectTutorial?
  createdAt     DateTime?        @default(now())
  createdByUser User?            @relation(name: "UserCreatedProject", fields: [createdBy], references: [id])
  createdBy     Int?
  updatedByUser User?            @relation(name: "UserUpdatedProject", fields: [updatedBy], references: [id])
  updatedAt     DateTime?        @updatedAt
  updatedBy     Int?
}

model TeamProject {
  team          Team      @relation(fields: [teamId], references: [id])
  teamId        Int
  project       Project   @relation(fields: [projectId], references: [id])
  projectId     Int
  active        Boolean   @default(true)
  createdAt     DateTime? @default(now())
  createdByUser User?     @relation(name: "UserCreatedTeamProject", fields: [createdBy], references: [id])
  createdBy     Int?
  updatedByUser User?     @relation(name: "UserUpdatedTeamProject", fields: [updatedBy], references: [id])
  updatedAt     DateTime? @updatedAt
  updatedBy     Int?

  @@id([teamId, projectId])
}

enum Net {
  MAINNET
  TESTNET
}

model ApiKey {
  reference     String      @id
  net           Net
  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId Int
  active        Boolean     @default(true)
}

model Environment {
  id            Int        @id @default(autoincrement())
  name          String
  project       Project    @relation(fields: [projectId], references: [id])
  projectId     Int
  net           Net
  subId         Int
  active        Boolean    @default(true)
  apiKeys       ApiKey[]
  contracts     Contract[]
  createdAt     DateTime?  @default(now())
  createdByUser User?      @relation(name: "UserCreatedEnvironment", fields: [createdBy], references: [id])
  createdBy     Int?
  updatedByUser User?      @relation(name: "UserUpdatedEnvironment", fields: [updatedBy], references: [id])
  updatedAt     DateTime?  @updatedAt
  updatedBy     Int?

  AlertRule AlertRule[]
  @@unique([projectId, subId])
}

model Contract {
  id            Int         @id @default(autoincrement())
  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId Int
  address       String
  net           Net
  active        Boolean     @default(true)
  alertRules    AlertRule[]
  createdAt     DateTime?   @default(now())
  createdByUser User?       @relation(name: "UserCreatedContract", fields: [createdBy], references: [id])
  createdBy     Int?
  updatedByUser User?       @relation(name: "UserUpdatedContract", fields: [updatedBy], references: [id])
  updatedAt     DateTime?   @updatedAt
  updatedBy     Int?
}

enum ProjectTutorial {
  NFT_MARKET
  CROSSWORD
}

// UserAction is used to audit user actions that can't be captured in the Audit table.
model UserAction {
  id              Int            @id @default(autoincrement())
  action          UserActionType
  data            Json?
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  actionTimestamp DateTime       @default(now())
}

enum UserActionType {
  ROTATE_API_KEY
}

model AlertRule {
  id            Int           @id @default(autoincrement())
  type          AlertRuleType
  name          String
  description   String
  isPaused      Boolean       @default(false)
  fnCallRule    FnCallRule?   @relation(fields: [fnCallRuleId], references: [id])
  fnCallRuleId  Int?
  // txRule        TxRule?       @relation(fields: [txRuleId], references: [id])
  // txRuleId      Int?
  // eventRuleId   EventRule?
  // acctBalRuleId
  // acctBalRuleId
  contract      Contract      @relation(fields: [contractId], references: [id])
  contractId    Int
  environment   Environment   @relation(fields: [environmentId], references: [id])
  environmentId Int
  active        Boolean       @default(true)
  createdAt     DateTime?     @default(now())
  createdByUser User?         @relation(name: "UserCreatedAlert", fields: [createdBy], references: [id])
  createdBy     Int?
  updatedByUser User?         @relation(name: "UserUpdatedAlert", fields: [updatedBy], references: [id])
  updatedAt     DateTime?     @updatedAt
  updatedBy     Int?
}

enum AlertRuleType {
  TX_SUCCESS
  TX_FAILURE
  FN_CALL
  EVENT
  ACCT_BAL_PCT
  ACCT_BAL_NUM
}

model FnCallRule {
  id         Int         @id @default(autoincrement())
  methodName String
  // paramFilters Json
  AlertRule  AlertRule[]
}

// model TxRule {
//   id        Int         @id @default(autoincrement())
//   action TxAction?
//   AlertRule AlertRule[]
// }

// enum TxAction {
//   CREATE_ACCOUNT
//   DEPLOY_CONTRACT
//   FUNCTION_CALL
//   TRANSFER
//   STAKE
//   ADD_KEY
//   DELETE_KEY
//   DELETE_ACCOUNT
// }

// FN_CALL
// {
//   "method_name": "guess_solution",
//   // These would be "and" filters only.
//   // Or filters can be achieved by creating multiple rules on the same method/contract.
//   "method_params": [
//     {
//       "name": "guess",
//       "comparator": "eq",
//       "value": "near nomicon ref finances"
//     }
//   ]
// }

// EVENT
// {
//   "event": "nft_mint",
//   "standard": "nep191",
//   "version": "1.0.0",
//   "data_type": "Array",
//   // These would be "and" filters only.
//   // Or filters can be achieved by creating multiple rules on the same method/contract.
//   // data in the event could be anything... we should ask the user what the data type is and store it
//   // If it's a number or a string, then only one filter can exist
//   "filters": [
//     {
//       "attribute_path": [""], // An array of strings to get to the attribute that finally holds the data you want
//       "comparator": "eq",
//       "value": "near nomicon ref finances"
//     }
//   ]
// }

// ACCOUNT BALANCE
// {
//   "comparator": "gte",
//   "amount": 50
// }
