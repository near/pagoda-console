
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.10.0
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.10.0",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  email: 'email',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TeamScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  active: 'active',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
});

exports.Prisma.TeamMemberScalarFieldEnum = makeEnum({
  userId: 'userId',
  teamId: 'teamId',
  active: 'active',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
});

exports.Prisma.ProjectScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  active: 'active',
  tutorial: 'tutorial',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
});

exports.Prisma.TeamProjectScalarFieldEnum = makeEnum({
  teamId: 'teamId',
  projectId: 'projectId',
  active: 'active',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
});

exports.Prisma.ApiKeyScalarFieldEnum = makeEnum({
  reference: 'reference',
  net: 'net',
  environmentId: 'environmentId',
  active: 'active'
});

exports.Prisma.EnvironmentScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  projectId: 'projectId',
  net: 'net',
  subId: 'subId',
  active: 'active',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
});

exports.Prisma.ContractScalarFieldEnum = makeEnum({
  id: 'id',
  environmentId: 'environmentId',
  address: 'address',
  net: 'net',
  active: 'active',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy'
});

exports.Prisma.UserActionScalarFieldEnum = makeEnum({
  id: 'id',
  action: 'action',
  data: 'data',
  userId: 'userId',
  actionTimestamp: 'actionTimestamp'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});
exports.ProjectTutorial = makeEnum({
  NFT_MARKET: 'NFT_MARKET',
  CROSSWORD: 'CROSSWORD'
});

exports.Net = makeEnum({
  MAINNET: 'MAINNET',
  TESTNET: 'TESTNET'
});

exports.UserActionType = makeEnum({
  ROTATE_API_KEY: 'ROTATE_API_KEY'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Team: 'Team',
  TeamMember: 'TeamMember',
  Project: 'Project',
  TeamProject: 'TeamProject',
  ApiKey: 'ApiKey',
  Environment: 'Environment',
  Contract: 'Contract',
  UserAction: 'UserAction'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
