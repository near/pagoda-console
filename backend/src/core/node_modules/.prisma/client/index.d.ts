
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  uid: string
  email: string
  /**
   * If 'false', the record was soft-deleted by a user.
   */
  active: boolean
  createdAt: Date | null
  updatedAt: Date | null
}

/**
 * Model Team
 * 
 */
export type Team = {
  id: number
  name: string
  /**
   * If 'false', the record was soft-deleted by a user.
   */
  active: boolean
  createdAt: Date | null
  /**
   * Reference to the user id who created the record.
   */
  createdBy: number | null
  updatedAt: Date | null
  /**
   * Reference to the user id who last updated the record.
   */
  updatedBy: number | null
}

/**
 * Model TeamMember
 * 
 */
export type TeamMember = {
  userId: number
  teamId: number
  /**
   * If 'false', the record was soft-deleted by a user.
   */
  active: boolean
  createdAt: Date | null
  /**
   * Reference to the user id who created the record.
   */
  createdBy: number | null
  updatedAt: Date | null
  /**
   * Reference to the user id who last updated the record.
   */
  updatedBy: number | null
}

/**
 * Model Project
 * 
 */
export type Project = {
  id: number
  name: string
  slug: string
  /**
   * If 'false', the record was soft-deleted by a user.
   */
  active: boolean
  tutorial: ProjectTutorial | null
  createdAt: Date | null
  /**
   * Reference to the user id who created the record.
   */
  createdBy: number | null
  updatedAt: Date | null
  /**
   * Reference to the user id who last updated the record.
   */
  updatedBy: number | null
}

/**
 * Model TeamProject
 * 
 */
export type TeamProject = {
  teamId: number
  projectId: number
  /**
   * If 'false', the record was soft-deleted by a user.
   */
  active: boolean
  createdAt: Date | null
  /**
   * Reference to the user id who created the record.
   */
  createdBy: number | null
  updatedAt: Date | null
  /**
   * Reference to the user id who last updated the record.
   */
  updatedBy: number | null
}

/**
 * Model ApiKey
 * 
 */
export type ApiKey = {
  reference: string
  net: Net
  environmentId: number
  /**
   * If 'false', the record was soft-deleted by a user.
   */
  active: boolean
}

/**
 * Model Environment
 * 
 */
export type Environment = {
  id: number
  name: string
  projectId: number
  net: Net
  subId: number
  /**
   * If 'false', the record was soft-deleted by a user.
   */
  active: boolean
  createdAt: Date | null
  /**
   * Reference to the user id who created the record.
   */
  createdBy: number | null
  updatedAt: Date | null
  /**
   * Reference to the user id who last updated the record.
   */
  updatedBy: number | null
}

/**
 * Model Contract
 * 
 */
export type Contract = {
  id: number
  environmentId: number
  address: string
  net: Net
  /**
   * If 'false', the record was soft-deleted by a user.
   */
  active: boolean
  createdAt: Date | null
  /**
   * Reference to the user id who created the record.
   */
  createdBy: number | null
  updatedAt: Date | null
  /**
   * Reference to the user id who last updated the record.
   */
  updatedBy: number | null
}

/**
 * Model UserAction
 * UserAction is used to audit user actions that can't be captured in the Audit table.
 */
export type UserAction = {
  id: number
  action: UserActionType
  data: Prisma.JsonValue | null
  userId: number
  actionTimestamp: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ProjectTutorial: {
  NFT_MARKET: 'NFT_MARKET',
  CROSSWORD: 'CROSSWORD'
};

export type ProjectTutorial = (typeof ProjectTutorial)[keyof typeof ProjectTutorial]


export const Net: {
  MAINNET: 'MAINNET',
  TESTNET: 'TESTNET'
};

export type Net = (typeof Net)[keyof typeof Net]


export const UserActionType: {
  ROTATE_API_KEY: 'ROTATE_API_KEY'
};

export type UserActionType = (typeof UserActionType)[keyof typeof UserActionType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<GlobalReject>;

  /**
   * `prisma.teamMember`: Exposes CRUD operations for the **TeamMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMember.findMany()
    * ```
    */
  get teamMember(): Prisma.TeamMemberDelegate<GlobalReject>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<GlobalReject>;

  /**
   * `prisma.teamProject`: Exposes CRUD operations for the **TeamProject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamProjects
    * const teamProjects = await prisma.teamProject.findMany()
    * ```
    */
  get teamProject(): Prisma.TeamProjectDelegate<GlobalReject>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<GlobalReject>;

  /**
   * `prisma.environment`: Exposes CRUD operations for the **Environment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Environments
    * const environments = await prisma.environment.findMany()
    * ```
    */
  get environment(): Prisma.EnvironmentDelegate<GlobalReject>;

  /**
   * `prisma.contract`: Exposes CRUD operations for the **Contract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contract.findMany()
    * ```
    */
  get contract(): Prisma.ContractDelegate<GlobalReject>;

  /**
   * `prisma.userAction`: Exposes CRUD operations for the **UserAction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserActions
    * const userActions = await prisma.userAction.findMany()
    * ```
    */
  get userAction(): Prisma.UserActionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.10.0
   * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Team: 'Team',
    TeamMember: 'TeamMember',
    Project: 'Project',
    TeamProject: 'TeamProject',
    ApiKey: 'ApiKey',
    Environment: 'Environment',
    Contract: 'Contract',
    UserAction: 'UserAction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    teamMembers: number
    createdTeams: number
    updatedTeams: number
    createdTeamMembers: number
    updatedTeamMembers: number
    createdProjects: number
    updatedProjects: number
    createdEnvironments: number
    updatedEnvironments: number
    createdContracts: number
    updatedContracts: number
    createdTeamProject: number
    updatedTeamProject: number
    userActions: number
  }

  export type UserCountOutputTypeSelect = {
    teamMembers?: boolean
    createdTeams?: boolean
    updatedTeams?: boolean
    createdTeamMembers?: boolean
    updatedTeamMembers?: boolean
    createdProjects?: boolean
    updatedProjects?: boolean
    createdEnvironments?: boolean
    updatedEnvironments?: boolean
    createdContracts?: boolean
    updatedContracts?: boolean
    createdTeamProject?: boolean
    updatedTeamProject?: boolean
    userActions?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type TeamCountOutputType
   */


  export type TeamCountOutputType = {
    teamMembers: number
    teamProjects: number
  }

  export type TeamCountOutputTypeSelect = {
    teamMembers?: boolean
    teamProjects?: boolean
  }

  export type TeamCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TeamCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TeamCountOutputType
    : S extends undefined
    ? never
    : S extends TeamCountOutputTypeArgs
    ?'include' extends U
    ? TeamCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TeamCountOutputType ? TeamCountOutputType[P] : never
  } 
    : TeamCountOutputType
  : TeamCountOutputType




  // Custom InputTypes

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     * 
    **/
    select?: TeamCountOutputTypeSelect | null
  }



  /**
   * Count Type ProjectCountOutputType
   */


  export type ProjectCountOutputType = {
    teamProjects: number
    environments: number
  }

  export type ProjectCountOutputTypeSelect = {
    teamProjects?: boolean
    environments?: boolean
  }

  export type ProjectCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProjectCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProjectCountOutputType
    : S extends undefined
    ? never
    : S extends ProjectCountOutputTypeArgs
    ?'include' extends U
    ? ProjectCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProjectCountOutputType ? ProjectCountOutputType[P] : never
  } 
    : ProjectCountOutputType
  : ProjectCountOutputType




  // Custom InputTypes

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     * 
    **/
    select?: ProjectCountOutputTypeSelect | null
  }



  /**
   * Count Type EnvironmentCountOutputType
   */


  export type EnvironmentCountOutputType = {
    apiKeys: number
    contracts: number
  }

  export type EnvironmentCountOutputTypeSelect = {
    apiKeys?: boolean
    contracts?: boolean
  }

  export type EnvironmentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | EnvironmentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? EnvironmentCountOutputType
    : S extends undefined
    ? never
    : S extends EnvironmentCountOutputTypeArgs
    ?'include' extends U
    ? EnvironmentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof EnvironmentCountOutputType ? EnvironmentCountOutputType[P] : never
  } 
    : EnvironmentCountOutputType
  : EnvironmentCountOutputType




  // Custom InputTypes

  /**
   * EnvironmentCountOutputType without action
   */
  export type EnvironmentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EnvironmentCountOutputType
     * 
    **/
    select?: EnvironmentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    uid: string | null
    email: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    uid: string | null
    email: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    uid: number
    email: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    uid?: true
    email?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    uid?: true
    email?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    uid?: true
    email?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    uid: string
    email: string
    active: boolean
    createdAt: Date | null
    updatedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    uid?: boolean
    email?: boolean
    active?: boolean
    teamMembers?: boolean | TeamMemberFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    createdTeams?: boolean | TeamFindManyArgs
    updatedTeams?: boolean | TeamFindManyArgs
    createdTeamMembers?: boolean | TeamMemberFindManyArgs
    updatedTeamMembers?: boolean | TeamMemberFindManyArgs
    createdProjects?: boolean | ProjectFindManyArgs
    updatedProjects?: boolean | ProjectFindManyArgs
    createdEnvironments?: boolean | EnvironmentFindManyArgs
    updatedEnvironments?: boolean | EnvironmentFindManyArgs
    createdContracts?: boolean | ContractFindManyArgs
    updatedContracts?: boolean | ContractFindManyArgs
    createdTeamProject?: boolean | TeamProjectFindManyArgs
    updatedTeamProject?: boolean | TeamProjectFindManyArgs
    userActions?: boolean | UserActionFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    teamMembers?: boolean | TeamMemberFindManyArgs
    createdTeams?: boolean | TeamFindManyArgs
    updatedTeams?: boolean | TeamFindManyArgs
    createdTeamMembers?: boolean | TeamMemberFindManyArgs
    updatedTeamMembers?: boolean | TeamMemberFindManyArgs
    createdProjects?: boolean | ProjectFindManyArgs
    updatedProjects?: boolean | ProjectFindManyArgs
    createdEnvironments?: boolean | EnvironmentFindManyArgs
    updatedEnvironments?: boolean | EnvironmentFindManyArgs
    createdContracts?: boolean | ContractFindManyArgs
    updatedContracts?: boolean | ContractFindManyArgs
    createdTeamProject?: boolean | TeamProjectFindManyArgs
    updatedTeamProject?: boolean | TeamProjectFindManyArgs
    userActions?: boolean | UserActionFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'teamMembers' ? Array < TeamMemberGetPayload<S['include'][P]>>  :
        P extends 'createdTeams' ? Array < TeamGetPayload<S['include'][P]>>  :
        P extends 'updatedTeams' ? Array < TeamGetPayload<S['include'][P]>>  :
        P extends 'createdTeamMembers' ? Array < TeamMemberGetPayload<S['include'][P]>>  :
        P extends 'updatedTeamMembers' ? Array < TeamMemberGetPayload<S['include'][P]>>  :
        P extends 'createdProjects' ? Array < ProjectGetPayload<S['include'][P]>>  :
        P extends 'updatedProjects' ? Array < ProjectGetPayload<S['include'][P]>>  :
        P extends 'createdEnvironments' ? Array < EnvironmentGetPayload<S['include'][P]>>  :
        P extends 'updatedEnvironments' ? Array < EnvironmentGetPayload<S['include'][P]>>  :
        P extends 'createdContracts' ? Array < ContractGetPayload<S['include'][P]>>  :
        P extends 'updatedContracts' ? Array < ContractGetPayload<S['include'][P]>>  :
        P extends 'createdTeamProject' ? Array < TeamProjectGetPayload<S['include'][P]>>  :
        P extends 'updatedTeamProject' ? Array < TeamProjectGetPayload<S['include'][P]>>  :
        P extends 'userActions' ? Array < UserActionGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'teamMembers' ? Array < TeamMemberGetPayload<S['select'][P]>>  :
        P extends 'createdTeams' ? Array < TeamGetPayload<S['select'][P]>>  :
        P extends 'updatedTeams' ? Array < TeamGetPayload<S['select'][P]>>  :
        P extends 'createdTeamMembers' ? Array < TeamMemberGetPayload<S['select'][P]>>  :
        P extends 'updatedTeamMembers' ? Array < TeamMemberGetPayload<S['select'][P]>>  :
        P extends 'createdProjects' ? Array < ProjectGetPayload<S['select'][P]>>  :
        P extends 'updatedProjects' ? Array < ProjectGetPayload<S['select'][P]>>  :
        P extends 'createdEnvironments' ? Array < EnvironmentGetPayload<S['select'][P]>>  :
        P extends 'updatedEnvironments' ? Array < EnvironmentGetPayload<S['select'][P]>>  :
        P extends 'createdContracts' ? Array < ContractGetPayload<S['select'][P]>>  :
        P extends 'updatedContracts' ? Array < ContractGetPayload<S['select'][P]>>  :
        P extends 'createdTeamProject' ? Array < TeamProjectGetPayload<S['select'][P]>>  :
        P extends 'updatedTeamProject' ? Array < TeamProjectGetPayload<S['select'][P]>>  :
        P extends 'userActions' ? Array < UserActionGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    teamMembers<T extends TeamMemberFindManyArgs = {}>(args?: Subset<T, TeamMemberFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeamMember>>, PrismaPromise<Array<TeamMemberGetPayload<T>>>>;

    createdTeams<T extends TeamFindManyArgs = {}>(args?: Subset<T, TeamFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Team>>, PrismaPromise<Array<TeamGetPayload<T>>>>;

    updatedTeams<T extends TeamFindManyArgs = {}>(args?: Subset<T, TeamFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Team>>, PrismaPromise<Array<TeamGetPayload<T>>>>;

    createdTeamMembers<T extends TeamMemberFindManyArgs = {}>(args?: Subset<T, TeamMemberFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeamMember>>, PrismaPromise<Array<TeamMemberGetPayload<T>>>>;

    updatedTeamMembers<T extends TeamMemberFindManyArgs = {}>(args?: Subset<T, TeamMemberFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeamMember>>, PrismaPromise<Array<TeamMemberGetPayload<T>>>>;

    createdProjects<T extends ProjectFindManyArgs = {}>(args?: Subset<T, ProjectFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Project>>, PrismaPromise<Array<ProjectGetPayload<T>>>>;

    updatedProjects<T extends ProjectFindManyArgs = {}>(args?: Subset<T, ProjectFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Project>>, PrismaPromise<Array<ProjectGetPayload<T>>>>;

    createdEnvironments<T extends EnvironmentFindManyArgs = {}>(args?: Subset<T, EnvironmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Environment>>, PrismaPromise<Array<EnvironmentGetPayload<T>>>>;

    updatedEnvironments<T extends EnvironmentFindManyArgs = {}>(args?: Subset<T, EnvironmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Environment>>, PrismaPromise<Array<EnvironmentGetPayload<T>>>>;

    createdContracts<T extends ContractFindManyArgs = {}>(args?: Subset<T, ContractFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Contract>>, PrismaPromise<Array<ContractGetPayload<T>>>>;

    updatedContracts<T extends ContractFindManyArgs = {}>(args?: Subset<T, ContractFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Contract>>, PrismaPromise<Array<ContractGetPayload<T>>>>;

    createdTeamProject<T extends TeamProjectFindManyArgs = {}>(args?: Subset<T, TeamProjectFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeamProject>>, PrismaPromise<Array<TeamProjectGetPayload<T>>>>;

    updatedTeamProject<T extends TeamProjectFindManyArgs = {}>(args?: Subset<T, TeamProjectFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeamProject>>, PrismaPromise<Array<TeamProjectGetPayload<T>>>>;

    userActions<T extends UserActionFindManyArgs = {}>(args?: Subset<T, UserActionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserAction>>, PrismaPromise<Array<UserActionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Team
   */


  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    active: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type TeamAggregateArgs = {
    /**
     * Filter which Team to aggregate.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs = {
    where?: TeamWhereInput
    orderBy?: Enumerable<TeamOrderByWithAggregationInput>
    by: Array<TeamScalarFieldEnum>
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }


  export type TeamGroupByOutputType = {
    id: number
    name: string
    active: boolean
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect = {
    id?: boolean
    name?: boolean
    active?: boolean
    teamMembers?: boolean | TeamMemberFindManyArgs
    teamProjects?: boolean | TeamProjectFindManyArgs
    createdAt?: boolean
    createdByUser?: boolean | UserArgs
    createdBy?: boolean
    updatedByUser?: boolean | UserArgs
    updatedAt?: boolean
    updatedBy?: boolean
    _count?: boolean | TeamCountOutputTypeArgs
  }

  export type TeamInclude = {
    teamMembers?: boolean | TeamMemberFindManyArgs
    teamProjects?: boolean | TeamProjectFindManyArgs
    createdByUser?: boolean | UserArgs
    updatedByUser?: boolean | UserArgs
    _count?: boolean | TeamCountOutputTypeArgs
  }

  export type TeamGetPayload<
    S extends boolean | null | undefined | TeamArgs,
    U = keyof S
      > = S extends true
        ? Team
    : S extends undefined
    ? never
    : S extends TeamArgs | TeamFindManyArgs
    ?'include' extends U
    ? Team  & {
    [P in TrueKeys<S['include']>]:
        P extends 'teamMembers' ? Array < TeamMemberGetPayload<S['include'][P]>>  :
        P extends 'teamProjects' ? Array < TeamProjectGetPayload<S['include'][P]>>  :
        P extends 'createdByUser' ? UserGetPayload<S['include'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['include'][P]> | null :
        P extends '_count' ? TeamCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'teamMembers' ? Array < TeamMemberGetPayload<S['select'][P]>>  :
        P extends 'teamProjects' ? Array < TeamProjectGetPayload<S['select'][P]>>  :
        P extends 'createdByUser' ? UserGetPayload<S['select'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['select'][P]> | null :
        P extends '_count' ? TeamCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Team ? Team[P] : never
  } 
    : Team
  : Team


  type TeamCountArgs = Merge<
    Omit<TeamFindManyArgs, 'select' | 'include'> & {
      select?: TeamCountAggregateInputType | true
    }
  >

  export interface TeamDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeamFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Team'> extends True ? CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>> : CheckSelect<T, Prisma__TeamClient<Team | null >, Prisma__TeamClient<TeamGetPayload<T> | null >>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeamFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Team'> extends True ? CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>> : CheckSelect<T, Prisma__TeamClient<Team | null >, Prisma__TeamClient<TeamGetPayload<T> | null >>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeamFindManyArgs>(
      args?: SelectSubset<T, TeamFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Team>>, PrismaPromise<Array<TeamGetPayload<T>>>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
    **/
    create<T extends TeamCreateArgs>(
      args: SelectSubset<T, TeamCreateArgs>
    ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>

    /**
     * Create many Teams.
     *     @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     *     @example
     *     // Create many Teams
     *     const team = await prisma.team.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamCreateManyArgs>(
      args?: SelectSubset<T, TeamCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
    **/
    delete<T extends TeamDeleteArgs>(
      args: SelectSubset<T, TeamDeleteArgs>
    ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamUpdateArgs>(
      args: SelectSubset<T, TeamUpdateArgs>
    ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamDeleteManyArgs>(
      args?: SelectSubset<T, TeamDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamUpdateManyArgs>(
      args: SelectSubset<T, TeamUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
    **/
    upsert<T extends TeamUpsertArgs>(
      args: SelectSubset<T, TeamUpsertArgs>
    ): CheckSelect<T, Prisma__TeamClient<Team>, Prisma__TeamClient<TeamGetPayload<T>>>

    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeamClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    teamMembers<T extends TeamMemberFindManyArgs = {}>(args?: Subset<T, TeamMemberFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeamMember>>, PrismaPromise<Array<TeamMemberGetPayload<T>>>>;

    teamProjects<T extends TeamProjectFindManyArgs = {}>(args?: Subset<T, TeamProjectFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeamProject>>, PrismaPromise<Array<TeamProjectGetPayload<T>>>>;

    createdByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    updatedByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Throw an Error if a Team can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Team to fetch.
     * 
    **/
    where: TeamWhereUniqueInput
  }


  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Throw an Error if a Team can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Team to fetch.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     * 
    **/
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team findMany
   */
  export type TeamFindManyArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter, which Teams to fetch.
     * 
    **/
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     * 
    **/
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team create
   */
  export type TeamCreateArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * The data needed to create a Team.
     * 
    **/
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }


  /**
   * Team createMany
   */
  export type TeamCreateManyArgs = {
    /**
     * The data used to create many Teams.
     * 
    **/
    data: Enumerable<TeamCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Team update
   */
  export type TeamUpdateArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * The data needed to update a Team.
     * 
    **/
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     * 
    **/
    where: TeamWhereUniqueInput
  }


  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs = {
    /**
     * The data used to update Teams.
     * 
    **/
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     * 
    **/
    where?: TeamWhereInput
  }


  /**
   * Team upsert
   */
  export type TeamUpsertArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * The filter to search for the Team to update in case it exists.
     * 
    **/
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     * 
    **/
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }


  /**
   * Team delete
   */
  export type TeamDeleteArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
    /**
     * Filter which Team to delete.
     * 
    **/
    where: TeamWhereUniqueInput
  }


  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs = {
    /**
     * Filter which Teams to delete
     * 
    **/
    where?: TeamWhereInput
  }


  /**
   * Team without action
   */
  export type TeamArgs = {
    /**
     * Select specific fields to fetch from the Team
     * 
    **/
    select?: TeamSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamInclude | null
  }



  /**
   * Model TeamMember
   */


  export type AggregateTeamMember = {
    _count: TeamMemberCountAggregateOutputType | null
    _avg: TeamMemberAvgAggregateOutputType | null
    _sum: TeamMemberSumAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  export type TeamMemberAvgAggregateOutputType = {
    userId: number | null
    teamId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type TeamMemberSumAggregateOutputType = {
    userId: number | null
    teamId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type TeamMemberMinAggregateOutputType = {
    userId: number | null
    teamId: number | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type TeamMemberMaxAggregateOutputType = {
    userId: number | null
    teamId: number | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type TeamMemberCountAggregateOutputType = {
    userId: number
    teamId: number
    active: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type TeamMemberAvgAggregateInputType = {
    userId?: true
    teamId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type TeamMemberSumAggregateInputType = {
    userId?: true
    teamId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type TeamMemberMinAggregateInputType = {
    userId?: true
    teamId?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TeamMemberMaxAggregateInputType = {
    userId?: true
    teamId?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TeamMemberCountAggregateInputType = {
    userId?: true
    teamId?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type TeamMemberAggregateArgs = {
    /**
     * Filter which TeamMember to aggregate.
     * 
    **/
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMembers
    **/
    _count?: true | TeamMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMemberMaxAggregateInputType
  }

  export type GetTeamMemberAggregateType<T extends TeamMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMember[P]>
      : GetScalarType<T[P], AggregateTeamMember[P]>
  }




  export type TeamMemberGroupByArgs = {
    where?: TeamMemberWhereInput
    orderBy?: Enumerable<TeamMemberOrderByWithAggregationInput>
    by: Array<TeamMemberScalarFieldEnum>
    having?: TeamMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMemberCountAggregateInputType | true
    _avg?: TeamMemberAvgAggregateInputType
    _sum?: TeamMemberSumAggregateInputType
    _min?: TeamMemberMinAggregateInputType
    _max?: TeamMemberMaxAggregateInputType
  }


  export type TeamMemberGroupByOutputType = {
    userId: number
    teamId: number
    active: boolean
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
    _count: TeamMemberCountAggregateOutputType | null
    _avg: TeamMemberAvgAggregateOutputType | null
    _sum: TeamMemberSumAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  type GetTeamMemberGroupByPayload<T extends TeamMemberGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeamMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
        }
      >
    >


  export type TeamMemberSelect = {
    user?: boolean | UserArgs
    userId?: boolean
    team?: boolean | TeamArgs
    teamId?: boolean
    active?: boolean
    createdAt?: boolean
    createdByUser?: boolean | UserArgs
    createdBy?: boolean
    updatedByUser?: boolean | UserArgs
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type TeamMemberInclude = {
    user?: boolean | UserArgs
    team?: boolean | TeamArgs
    createdByUser?: boolean | UserArgs
    updatedByUser?: boolean | UserArgs
  }

  export type TeamMemberGetPayload<
    S extends boolean | null | undefined | TeamMemberArgs,
    U = keyof S
      > = S extends true
        ? TeamMember
    : S extends undefined
    ? never
    : S extends TeamMemberArgs | TeamMemberFindManyArgs
    ?'include' extends U
    ? TeamMember  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'team' ? TeamGetPayload<S['include'][P]> :
        P extends 'createdByUser' ? UserGetPayload<S['include'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'team' ? TeamGetPayload<S['select'][P]> :
        P extends 'createdByUser' ? UserGetPayload<S['select'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['select'][P]> | null :  P extends keyof TeamMember ? TeamMember[P] : never
  } 
    : TeamMember
  : TeamMember


  type TeamMemberCountArgs = Merge<
    Omit<TeamMemberFindManyArgs, 'select' | 'include'> & {
      select?: TeamMemberCountAggregateInputType | true
    }
  >

  export interface TeamMemberDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TeamMember that matches the filter.
     * @param {TeamMemberFindUniqueArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamMemberFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeamMemberFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TeamMember'> extends True ? CheckSelect<T, Prisma__TeamMemberClient<TeamMember>, Prisma__TeamMemberClient<TeamMemberGetPayload<T>>> : CheckSelect<T, Prisma__TeamMemberClient<TeamMember | null >, Prisma__TeamMemberClient<TeamMemberGetPayload<T> | null >>

    /**
     * Find the first TeamMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamMemberFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeamMemberFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TeamMember'> extends True ? CheckSelect<T, Prisma__TeamMemberClient<TeamMember>, Prisma__TeamMemberClient<TeamMemberGetPayload<T>>> : CheckSelect<T, Prisma__TeamMemberClient<TeamMember | null >, Prisma__TeamMemberClient<TeamMemberGetPayload<T> | null >>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMember.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMember.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const teamMemberWithUserIdOnly = await prisma.teamMember.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends TeamMemberFindManyArgs>(
      args?: SelectSubset<T, TeamMemberFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TeamMember>>, PrismaPromise<Array<TeamMemberGetPayload<T>>>>

    /**
     * Create a TeamMember.
     * @param {TeamMemberCreateArgs} args - Arguments to create a TeamMember.
     * @example
     * // Create one TeamMember
     * const TeamMember = await prisma.teamMember.create({
     *   data: {
     *     // ... data to create a TeamMember
     *   }
     * })
     * 
    **/
    create<T extends TeamMemberCreateArgs>(
      args: SelectSubset<T, TeamMemberCreateArgs>
    ): CheckSelect<T, Prisma__TeamMemberClient<TeamMember>, Prisma__TeamMemberClient<TeamMemberGetPayload<T>>>

    /**
     * Create many TeamMembers.
     *     @param {TeamMemberCreateManyArgs} args - Arguments to create many TeamMembers.
     *     @example
     *     // Create many TeamMembers
     *     const teamMember = await prisma.teamMember.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamMemberCreateManyArgs>(
      args?: SelectSubset<T, TeamMemberCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TeamMember.
     * @param {TeamMemberDeleteArgs} args - Arguments to delete one TeamMember.
     * @example
     * // Delete one TeamMember
     * const TeamMember = await prisma.teamMember.delete({
     *   where: {
     *     // ... filter to delete one TeamMember
     *   }
     * })
     * 
    **/
    delete<T extends TeamMemberDeleteArgs>(
      args: SelectSubset<T, TeamMemberDeleteArgs>
    ): CheckSelect<T, Prisma__TeamMemberClient<TeamMember>, Prisma__TeamMemberClient<TeamMemberGetPayload<T>>>

    /**
     * Update one TeamMember.
     * @param {TeamMemberUpdateArgs} args - Arguments to update one TeamMember.
     * @example
     * // Update one TeamMember
     * const teamMember = await prisma.teamMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamMemberUpdateArgs>(
      args: SelectSubset<T, TeamMemberUpdateArgs>
    ): CheckSelect<T, Prisma__TeamMemberClient<TeamMember>, Prisma__TeamMemberClient<TeamMemberGetPayload<T>>>

    /**
     * Delete zero or more TeamMembers.
     * @param {TeamMemberDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamMemberDeleteManyArgs>(
      args?: SelectSubset<T, TeamMemberDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamMemberUpdateManyArgs>(
      args: SelectSubset<T, TeamMemberUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamMember.
     * @param {TeamMemberUpsertArgs} args - Arguments to update or create a TeamMember.
     * @example
     * // Update or create a TeamMember
     * const teamMember = await prisma.teamMember.upsert({
     *   create: {
     *     // ... data to create a TeamMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMember we want to update
     *   }
     * })
    **/
    upsert<T extends TeamMemberUpsertArgs>(
      args: SelectSubset<T, TeamMemberUpsertArgs>
    ): CheckSelect<T, Prisma__TeamMemberClient<TeamMember>, Prisma__TeamMemberClient<TeamMemberGetPayload<T>>>

    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMember.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends TeamMemberCountArgs>(
      args?: Subset<T, TeamMemberCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMemberAggregateArgs>(args: Subset<T, TeamMemberAggregateArgs>): PrismaPromise<GetTeamMemberAggregateType<T>>

    /**
     * Group by TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMemberGroupByArgs['orderBy'] }
        : { orderBy?: TeamMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMemberGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeamMemberClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    team<T extends TeamArgs = {}>(args?: Subset<T, TeamArgs>): CheckSelect<T, Prisma__TeamClient<Team | null >, Prisma__TeamClient<TeamGetPayload<T> | null >>;

    createdByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    updatedByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TeamMember findUnique
   */
  export type TeamMemberFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TeamMember
     * 
    **/
    select?: TeamMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamMemberInclude | null
    /**
     * Throw an Error if a TeamMember can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TeamMember to fetch.
     * 
    **/
    where: TeamMemberWhereUniqueInput
  }


  /**
   * TeamMember findFirst
   */
  export type TeamMemberFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TeamMember
     * 
    **/
    select?: TeamMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamMemberInclude | null
    /**
     * Throw an Error if a TeamMember can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TeamMember to fetch.
     * 
    **/
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     * 
    **/
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     * 
    **/
    distinct?: Enumerable<TeamMemberScalarFieldEnum>
  }


  /**
   * TeamMember findMany
   */
  export type TeamMemberFindManyArgs = {
    /**
     * Select specific fields to fetch from the TeamMember
     * 
    **/
    select?: TeamMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamMemberInclude | null
    /**
     * Filter, which TeamMembers to fetch.
     * 
    **/
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMembers.
     * 
    **/
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeamMemberScalarFieldEnum>
  }


  /**
   * TeamMember create
   */
  export type TeamMemberCreateArgs = {
    /**
     * Select specific fields to fetch from the TeamMember
     * 
    **/
    select?: TeamMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamMemberInclude | null
    /**
     * The data needed to create a TeamMember.
     * 
    **/
    data: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
  }


  /**
   * TeamMember createMany
   */
  export type TeamMemberCreateManyArgs = {
    /**
     * The data used to create many TeamMembers.
     * 
    **/
    data: Enumerable<TeamMemberCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TeamMember update
   */
  export type TeamMemberUpdateArgs = {
    /**
     * Select specific fields to fetch from the TeamMember
     * 
    **/
    select?: TeamMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamMemberInclude | null
    /**
     * The data needed to update a TeamMember.
     * 
    **/
    data: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
    /**
     * Choose, which TeamMember to update.
     * 
    **/
    where: TeamMemberWhereUniqueInput
  }


  /**
   * TeamMember updateMany
   */
  export type TeamMemberUpdateManyArgs = {
    /**
     * The data used to update TeamMembers.
     * 
    **/
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     * 
    **/
    where?: TeamMemberWhereInput
  }


  /**
   * TeamMember upsert
   */
  export type TeamMemberUpsertArgs = {
    /**
     * Select specific fields to fetch from the TeamMember
     * 
    **/
    select?: TeamMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamMemberInclude | null
    /**
     * The filter to search for the TeamMember to update in case it exists.
     * 
    **/
    where: TeamMemberWhereUniqueInput
    /**
     * In case the TeamMember found by the `where` argument doesn't exist, create a new TeamMember with this data.
     * 
    **/
    create: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
    /**
     * In case the TeamMember was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
  }


  /**
   * TeamMember delete
   */
  export type TeamMemberDeleteArgs = {
    /**
     * Select specific fields to fetch from the TeamMember
     * 
    **/
    select?: TeamMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamMemberInclude | null
    /**
     * Filter which TeamMember to delete.
     * 
    **/
    where: TeamMemberWhereUniqueInput
  }


  /**
   * TeamMember deleteMany
   */
  export type TeamMemberDeleteManyArgs = {
    /**
     * Filter which TeamMembers to delete
     * 
    **/
    where?: TeamMemberWhereInput
  }


  /**
   * TeamMember without action
   */
  export type TeamMemberArgs = {
    /**
     * Select specific fields to fetch from the TeamMember
     * 
    **/
    select?: TeamMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamMemberInclude | null
  }



  /**
   * Model Project
   */


  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ProjectSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    active: boolean | null
    tutorial: ProjectTutorial | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    active: boolean | null
    tutorial: ProjectTutorial | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    active: number
    tutorial: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    active?: true
    tutorial?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    active?: true
    tutorial?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    active?: true
    tutorial?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ProjectAggregateArgs = {
    /**
     * Filter which Project to aggregate.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs = {
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByWithAggregationInput>
    by: Array<ProjectScalarFieldEnum>
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }


  export type ProjectGroupByOutputType = {
    id: number
    name: string
    slug: string
    active: boolean
    tutorial: ProjectTutorial | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect = {
    id?: boolean
    name?: boolean
    slug?: boolean
    active?: boolean
    teamProjects?: boolean | TeamProjectFindManyArgs
    environments?: boolean | EnvironmentFindManyArgs
    tutorial?: boolean
    createdAt?: boolean
    createdByUser?: boolean | UserArgs
    createdBy?: boolean
    updatedByUser?: boolean | UserArgs
    updatedAt?: boolean
    updatedBy?: boolean
    _count?: boolean | ProjectCountOutputTypeArgs
  }

  export type ProjectInclude = {
    teamProjects?: boolean | TeamProjectFindManyArgs
    environments?: boolean | EnvironmentFindManyArgs
    createdByUser?: boolean | UserArgs
    updatedByUser?: boolean | UserArgs
    _count?: boolean | ProjectCountOutputTypeArgs
  }

  export type ProjectGetPayload<
    S extends boolean | null | undefined | ProjectArgs,
    U = keyof S
      > = S extends true
        ? Project
    : S extends undefined
    ? never
    : S extends ProjectArgs | ProjectFindManyArgs
    ?'include' extends U
    ? Project  & {
    [P in TrueKeys<S['include']>]:
        P extends 'teamProjects' ? Array < TeamProjectGetPayload<S['include'][P]>>  :
        P extends 'environments' ? Array < EnvironmentGetPayload<S['include'][P]>>  :
        P extends 'createdByUser' ? UserGetPayload<S['include'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['include'][P]> | null :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'teamProjects' ? Array < TeamProjectGetPayload<S['select'][P]>>  :
        P extends 'environments' ? Array < EnvironmentGetPayload<S['select'][P]>>  :
        P extends 'createdByUser' ? UserGetPayload<S['select'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['select'][P]> | null :
        P extends '_count' ? ProjectCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Project ? Project[P] : never
  } 
    : Project
  : Project


  type ProjectCountArgs = Merge<
    Omit<ProjectFindManyArgs, 'select' | 'include'> & {
      select?: ProjectCountAggregateInputType | true
    }
  >

  export interface ProjectDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Project'> extends True ? CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>> : CheckSelect<T, Prisma__ProjectClient<Project | null >, Prisma__ProjectClient<ProjectGetPayload<T> | null >>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Project'> extends True ? CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>> : CheckSelect<T, Prisma__ProjectClient<Project | null >, Prisma__ProjectClient<ProjectGetPayload<T> | null >>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs>(
      args?: SelectSubset<T, ProjectFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Project>>, PrismaPromise<Array<ProjectGetPayload<T>>>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs>(
      args: SelectSubset<T, ProjectCreateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs>(
      args?: SelectSubset<T, ProjectCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs>(
      args: SelectSubset<T, ProjectDeleteArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs>(
      args: SelectSubset<T, ProjectUpdateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: SelectSubset<T, ProjectDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs>(
      args: SelectSubset<T, ProjectUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs>(
      args: SelectSubset<T, ProjectUpsertArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    teamProjects<T extends TeamProjectFindManyArgs = {}>(args?: Subset<T, TeamProjectFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TeamProject>>, PrismaPromise<Array<TeamProjectGetPayload<T>>>>;

    environments<T extends EnvironmentFindManyArgs = {}>(args?: Subset<T, EnvironmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Environment>>, PrismaPromise<Array<EnvironmentGetPayload<T>>>>;

    createdByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    updatedByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Throw an Error if a Project can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Throw an Error if a Project can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Project to fetch.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     * 
    **/
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project findMany
   */
  export type ProjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Projects to fetch.
     * 
    **/
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     * 
    **/
    orderBy?: Enumerable<ProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     * 
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to create a Project.
     * 
    **/
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs = {
    /**
     * The data used to create many Projects.
     * 
    **/
    data: Enumerable<ProjectCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to update a Project.
     * 
    **/
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs = {
    /**
     * The data used to update Projects.
     * 
    **/
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     * 
    **/
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * The filter to search for the Project to update in case it exists.
     * 
    **/
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     * 
    **/
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
    /**
     * Filter which Project to delete.
     * 
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs = {
    /**
     * Filter which Projects to delete
     * 
    **/
    where?: ProjectWhereInput
  }


  /**
   * Project without action
   */
  export type ProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
     * 
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProjectInclude | null
  }



  /**
   * Model TeamProject
   */


  export type AggregateTeamProject = {
    _count: TeamProjectCountAggregateOutputType | null
    _avg: TeamProjectAvgAggregateOutputType | null
    _sum: TeamProjectSumAggregateOutputType | null
    _min: TeamProjectMinAggregateOutputType | null
    _max: TeamProjectMaxAggregateOutputType | null
  }

  export type TeamProjectAvgAggregateOutputType = {
    teamId: number | null
    projectId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type TeamProjectSumAggregateOutputType = {
    teamId: number | null
    projectId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type TeamProjectMinAggregateOutputType = {
    teamId: number | null
    projectId: number | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type TeamProjectMaxAggregateOutputType = {
    teamId: number | null
    projectId: number | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type TeamProjectCountAggregateOutputType = {
    teamId: number
    projectId: number
    active: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type TeamProjectAvgAggregateInputType = {
    teamId?: true
    projectId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type TeamProjectSumAggregateInputType = {
    teamId?: true
    projectId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type TeamProjectMinAggregateInputType = {
    teamId?: true
    projectId?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TeamProjectMaxAggregateInputType = {
    teamId?: true
    projectId?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type TeamProjectCountAggregateInputType = {
    teamId?: true
    projectId?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type TeamProjectAggregateArgs = {
    /**
     * Filter which TeamProject to aggregate.
     * 
    **/
    where?: TeamProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamProjects to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TeamProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamProjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamProjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamProjects
    **/
    _count?: true | TeamProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamProjectMaxAggregateInputType
  }

  export type GetTeamProjectAggregateType<T extends TeamProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamProject[P]>
      : GetScalarType<T[P], AggregateTeamProject[P]>
  }




  export type TeamProjectGroupByArgs = {
    where?: TeamProjectWhereInput
    orderBy?: Enumerable<TeamProjectOrderByWithAggregationInput>
    by: Array<TeamProjectScalarFieldEnum>
    having?: TeamProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamProjectCountAggregateInputType | true
    _avg?: TeamProjectAvgAggregateInputType
    _sum?: TeamProjectSumAggregateInputType
    _min?: TeamProjectMinAggregateInputType
    _max?: TeamProjectMaxAggregateInputType
  }


  export type TeamProjectGroupByOutputType = {
    teamId: number
    projectId: number
    active: boolean
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
    _count: TeamProjectCountAggregateOutputType | null
    _avg: TeamProjectAvgAggregateOutputType | null
    _sum: TeamProjectSumAggregateOutputType | null
    _min: TeamProjectMinAggregateOutputType | null
    _max: TeamProjectMaxAggregateOutputType | null
  }

  type GetTeamProjectGroupByPayload<T extends TeamProjectGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TeamProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamProjectGroupByOutputType[P]>
            : GetScalarType<T[P], TeamProjectGroupByOutputType[P]>
        }
      >
    >


  export type TeamProjectSelect = {
    team?: boolean | TeamArgs
    teamId?: boolean
    project?: boolean | ProjectArgs
    projectId?: boolean
    active?: boolean
    createdAt?: boolean
    createdByUser?: boolean | UserArgs
    createdBy?: boolean
    updatedByUser?: boolean | UserArgs
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type TeamProjectInclude = {
    team?: boolean | TeamArgs
    project?: boolean | ProjectArgs
    createdByUser?: boolean | UserArgs
    updatedByUser?: boolean | UserArgs
  }

  export type TeamProjectGetPayload<
    S extends boolean | null | undefined | TeamProjectArgs,
    U = keyof S
      > = S extends true
        ? TeamProject
    : S extends undefined
    ? never
    : S extends TeamProjectArgs | TeamProjectFindManyArgs
    ?'include' extends U
    ? TeamProject  & {
    [P in TrueKeys<S['include']>]:
        P extends 'team' ? TeamGetPayload<S['include'][P]> :
        P extends 'project' ? ProjectGetPayload<S['include'][P]> :
        P extends 'createdByUser' ? UserGetPayload<S['include'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'team' ? TeamGetPayload<S['select'][P]> :
        P extends 'project' ? ProjectGetPayload<S['select'][P]> :
        P extends 'createdByUser' ? UserGetPayload<S['select'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['select'][P]> | null :  P extends keyof TeamProject ? TeamProject[P] : never
  } 
    : TeamProject
  : TeamProject


  type TeamProjectCountArgs = Merge<
    Omit<TeamProjectFindManyArgs, 'select' | 'include'> & {
      select?: TeamProjectCountAggregateInputType | true
    }
  >

  export interface TeamProjectDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TeamProject that matches the filter.
     * @param {TeamProjectFindUniqueArgs} args - Arguments to find a TeamProject
     * @example
     * // Get one TeamProject
     * const teamProject = await prisma.teamProject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamProjectFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeamProjectFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TeamProject'> extends True ? CheckSelect<T, Prisma__TeamProjectClient<TeamProject>, Prisma__TeamProjectClient<TeamProjectGetPayload<T>>> : CheckSelect<T, Prisma__TeamProjectClient<TeamProject | null >, Prisma__TeamProjectClient<TeamProjectGetPayload<T> | null >>

    /**
     * Find the first TeamProject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProjectFindFirstArgs} args - Arguments to find a TeamProject
     * @example
     * // Get one TeamProject
     * const teamProject = await prisma.teamProject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamProjectFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeamProjectFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TeamProject'> extends True ? CheckSelect<T, Prisma__TeamProjectClient<TeamProject>, Prisma__TeamProjectClient<TeamProjectGetPayload<T>>> : CheckSelect<T, Prisma__TeamProjectClient<TeamProject | null >, Prisma__TeamProjectClient<TeamProjectGetPayload<T> | null >>

    /**
     * Find zero or more TeamProjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamProjects
     * const teamProjects = await prisma.teamProject.findMany()
     * 
     * // Get first 10 TeamProjects
     * const teamProjects = await prisma.teamProject.findMany({ take: 10 })
     * 
     * // Only select the `teamId`
     * const teamProjectWithTeamIdOnly = await prisma.teamProject.findMany({ select: { teamId: true } })
     * 
    **/
    findMany<T extends TeamProjectFindManyArgs>(
      args?: SelectSubset<T, TeamProjectFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TeamProject>>, PrismaPromise<Array<TeamProjectGetPayload<T>>>>

    /**
     * Create a TeamProject.
     * @param {TeamProjectCreateArgs} args - Arguments to create a TeamProject.
     * @example
     * // Create one TeamProject
     * const TeamProject = await prisma.teamProject.create({
     *   data: {
     *     // ... data to create a TeamProject
     *   }
     * })
     * 
    **/
    create<T extends TeamProjectCreateArgs>(
      args: SelectSubset<T, TeamProjectCreateArgs>
    ): CheckSelect<T, Prisma__TeamProjectClient<TeamProject>, Prisma__TeamProjectClient<TeamProjectGetPayload<T>>>

    /**
     * Create many TeamProjects.
     *     @param {TeamProjectCreateManyArgs} args - Arguments to create many TeamProjects.
     *     @example
     *     // Create many TeamProjects
     *     const teamProject = await prisma.teamProject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamProjectCreateManyArgs>(
      args?: SelectSubset<T, TeamProjectCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TeamProject.
     * @param {TeamProjectDeleteArgs} args - Arguments to delete one TeamProject.
     * @example
     * // Delete one TeamProject
     * const TeamProject = await prisma.teamProject.delete({
     *   where: {
     *     // ... filter to delete one TeamProject
     *   }
     * })
     * 
    **/
    delete<T extends TeamProjectDeleteArgs>(
      args: SelectSubset<T, TeamProjectDeleteArgs>
    ): CheckSelect<T, Prisma__TeamProjectClient<TeamProject>, Prisma__TeamProjectClient<TeamProjectGetPayload<T>>>

    /**
     * Update one TeamProject.
     * @param {TeamProjectUpdateArgs} args - Arguments to update one TeamProject.
     * @example
     * // Update one TeamProject
     * const teamProject = await prisma.teamProject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamProjectUpdateArgs>(
      args: SelectSubset<T, TeamProjectUpdateArgs>
    ): CheckSelect<T, Prisma__TeamProjectClient<TeamProject>, Prisma__TeamProjectClient<TeamProjectGetPayload<T>>>

    /**
     * Delete zero or more TeamProjects.
     * @param {TeamProjectDeleteManyArgs} args - Arguments to filter TeamProjects to delete.
     * @example
     * // Delete a few TeamProjects
     * const { count } = await prisma.teamProject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamProjectDeleteManyArgs>(
      args?: SelectSubset<T, TeamProjectDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamProjects
     * const teamProject = await prisma.teamProject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamProjectUpdateManyArgs>(
      args: SelectSubset<T, TeamProjectUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TeamProject.
     * @param {TeamProjectUpsertArgs} args - Arguments to update or create a TeamProject.
     * @example
     * // Update or create a TeamProject
     * const teamProject = await prisma.teamProject.upsert({
     *   create: {
     *     // ... data to create a TeamProject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamProject we want to update
     *   }
     * })
    **/
    upsert<T extends TeamProjectUpsertArgs>(
      args: SelectSubset<T, TeamProjectUpsertArgs>
    ): CheckSelect<T, Prisma__TeamProjectClient<TeamProject>, Prisma__TeamProjectClient<TeamProjectGetPayload<T>>>

    /**
     * Count the number of TeamProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProjectCountArgs} args - Arguments to filter TeamProjects to count.
     * @example
     * // Count the number of TeamProjects
     * const count = await prisma.teamProject.count({
     *   where: {
     *     // ... the filter for the TeamProjects we want to count
     *   }
     * })
    **/
    count<T extends TeamProjectCountArgs>(
      args?: Subset<T, TeamProjectCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamProjectAggregateArgs>(args: Subset<T, TeamProjectAggregateArgs>): PrismaPromise<GetTeamProjectAggregateType<T>>

    /**
     * Group by TeamProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamProjectGroupByArgs['orderBy'] }
        : { orderBy?: TeamProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamProjectGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamProject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeamProjectClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    team<T extends TeamArgs = {}>(args?: Subset<T, TeamArgs>): CheckSelect<T, Prisma__TeamClient<Team | null >, Prisma__TeamClient<TeamGetPayload<T> | null >>;

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null >, Prisma__ProjectClient<ProjectGetPayload<T> | null >>;

    createdByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    updatedByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TeamProject findUnique
   */
  export type TeamProjectFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TeamProject
     * 
    **/
    select?: TeamProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamProjectInclude | null
    /**
     * Throw an Error if a TeamProject can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TeamProject to fetch.
     * 
    **/
    where: TeamProjectWhereUniqueInput
  }


  /**
   * TeamProject findFirst
   */
  export type TeamProjectFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TeamProject
     * 
    **/
    select?: TeamProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamProjectInclude | null
    /**
     * Throw an Error if a TeamProject can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TeamProject to fetch.
     * 
    **/
    where?: TeamProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamProjects to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamProjects.
     * 
    **/
    cursor?: TeamProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamProjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamProjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamProjects.
     * 
    **/
    distinct?: Enumerable<TeamProjectScalarFieldEnum>
  }


  /**
   * TeamProject findMany
   */
  export type TeamProjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the TeamProject
     * 
    **/
    select?: TeamProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamProjectInclude | null
    /**
     * Filter, which TeamProjects to fetch.
     * 
    **/
    where?: TeamProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamProjects to fetch.
     * 
    **/
    orderBy?: Enumerable<TeamProjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamProjects.
     * 
    **/
    cursor?: TeamProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamProjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamProjects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TeamProjectScalarFieldEnum>
  }


  /**
   * TeamProject create
   */
  export type TeamProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the TeamProject
     * 
    **/
    select?: TeamProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamProjectInclude | null
    /**
     * The data needed to create a TeamProject.
     * 
    **/
    data: XOR<TeamProjectCreateInput, TeamProjectUncheckedCreateInput>
  }


  /**
   * TeamProject createMany
   */
  export type TeamProjectCreateManyArgs = {
    /**
     * The data used to create many TeamProjects.
     * 
    **/
    data: Enumerable<TeamProjectCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TeamProject update
   */
  export type TeamProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the TeamProject
     * 
    **/
    select?: TeamProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamProjectInclude | null
    /**
     * The data needed to update a TeamProject.
     * 
    **/
    data: XOR<TeamProjectUpdateInput, TeamProjectUncheckedUpdateInput>
    /**
     * Choose, which TeamProject to update.
     * 
    **/
    where: TeamProjectWhereUniqueInput
  }


  /**
   * TeamProject updateMany
   */
  export type TeamProjectUpdateManyArgs = {
    /**
     * The data used to update TeamProjects.
     * 
    **/
    data: XOR<TeamProjectUpdateManyMutationInput, TeamProjectUncheckedUpdateManyInput>
    /**
     * Filter which TeamProjects to update
     * 
    **/
    where?: TeamProjectWhereInput
  }


  /**
   * TeamProject upsert
   */
  export type TeamProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the TeamProject
     * 
    **/
    select?: TeamProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamProjectInclude | null
    /**
     * The filter to search for the TeamProject to update in case it exists.
     * 
    **/
    where: TeamProjectWhereUniqueInput
    /**
     * In case the TeamProject found by the `where` argument doesn't exist, create a new TeamProject with this data.
     * 
    **/
    create: XOR<TeamProjectCreateInput, TeamProjectUncheckedCreateInput>
    /**
     * In case the TeamProject was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TeamProjectUpdateInput, TeamProjectUncheckedUpdateInput>
  }


  /**
   * TeamProject delete
   */
  export type TeamProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the TeamProject
     * 
    **/
    select?: TeamProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamProjectInclude | null
    /**
     * Filter which TeamProject to delete.
     * 
    **/
    where: TeamProjectWhereUniqueInput
  }


  /**
   * TeamProject deleteMany
   */
  export type TeamProjectDeleteManyArgs = {
    /**
     * Filter which TeamProjects to delete
     * 
    **/
    where?: TeamProjectWhereInput
  }


  /**
   * TeamProject without action
   */
  export type TeamProjectArgs = {
    /**
     * Select specific fields to fetch from the TeamProject
     * 
    **/
    select?: TeamProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TeamProjectInclude | null
  }



  /**
   * Model ApiKey
   */


  export type AggregateApiKey = {
    _count: ApiKeyCountAggregateOutputType | null
    _avg: ApiKeyAvgAggregateOutputType | null
    _sum: ApiKeySumAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  export type ApiKeyAvgAggregateOutputType = {
    environmentId: number | null
  }

  export type ApiKeySumAggregateOutputType = {
    environmentId: number | null
  }

  export type ApiKeyMinAggregateOutputType = {
    reference: string | null
    net: Net | null
    environmentId: number | null
    active: boolean | null
  }

  export type ApiKeyMaxAggregateOutputType = {
    reference: string | null
    net: Net | null
    environmentId: number | null
    active: boolean | null
  }

  export type ApiKeyCountAggregateOutputType = {
    reference: number
    net: number
    environmentId: number
    active: number
    _all: number
  }


  export type ApiKeyAvgAggregateInputType = {
    environmentId?: true
  }

  export type ApiKeySumAggregateInputType = {
    environmentId?: true
  }

  export type ApiKeyMinAggregateInputType = {
    reference?: true
    net?: true
    environmentId?: true
    active?: true
  }

  export type ApiKeyMaxAggregateInputType = {
    reference?: true
    net?: true
    environmentId?: true
    active?: true
  }

  export type ApiKeyCountAggregateInputType = {
    reference?: true
    net?: true
    environmentId?: true
    active?: true
    _all?: true
  }

  export type ApiKeyAggregateArgs = {
    /**
     * Filter which ApiKey to aggregate.
     * 
    **/
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     * 
    **/
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeys
    **/
    _count?: true | ApiKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApiKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApiKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyMaxAggregateInputType
  }

  export type GetApiKeyAggregateType<T extends ApiKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKey[P]>
      : GetScalarType<T[P], AggregateApiKey[P]>
  }




  export type ApiKeyGroupByArgs = {
    where?: ApiKeyWhereInput
    orderBy?: Enumerable<ApiKeyOrderByWithAggregationInput>
    by: Array<ApiKeyScalarFieldEnum>
    having?: ApiKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyCountAggregateInputType | true
    _avg?: ApiKeyAvgAggregateInputType
    _sum?: ApiKeySumAggregateInputType
    _min?: ApiKeyMinAggregateInputType
    _max?: ApiKeyMaxAggregateInputType
  }


  export type ApiKeyGroupByOutputType = {
    reference: string
    net: Net
    environmentId: number
    active: boolean
    _count: ApiKeyCountAggregateOutputType | null
    _avg: ApiKeyAvgAggregateOutputType | null
    _sum: ApiKeySumAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  type GetApiKeyGroupByPayload<T extends ApiKeyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ApiKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
            : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
        }
      >
    >


  export type ApiKeySelect = {
    reference?: boolean
    net?: boolean
    environment?: boolean | EnvironmentArgs
    environmentId?: boolean
    active?: boolean
  }

  export type ApiKeyInclude = {
    environment?: boolean | EnvironmentArgs
  }

  export type ApiKeyGetPayload<
    S extends boolean | null | undefined | ApiKeyArgs,
    U = keyof S
      > = S extends true
        ? ApiKey
    : S extends undefined
    ? never
    : S extends ApiKeyArgs | ApiKeyFindManyArgs
    ?'include' extends U
    ? ApiKey  & {
    [P in TrueKeys<S['include']>]:
        P extends 'environment' ? EnvironmentGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'environment' ? EnvironmentGetPayload<S['select'][P]> :  P extends keyof ApiKey ? ApiKey[P] : never
  } 
    : ApiKey
  : ApiKey


  type ApiKeyCountArgs = Merge<
    Omit<ApiKeyFindManyArgs, 'select' | 'include'> & {
      select?: ApiKeyCountAggregateInputType | true
    }
  >

  export interface ApiKeyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ApiKey that matches the filter.
     * @param {ApiKeyFindUniqueArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApiKeyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ApiKeyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ApiKey'> extends True ? CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>> : CheckSelect<T, Prisma__ApiKeyClient<ApiKey | null >, Prisma__ApiKeyClient<ApiKeyGetPayload<T> | null >>

    /**
     * Find the first ApiKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApiKeyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ApiKeyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ApiKey'> extends True ? CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>> : CheckSelect<T, Prisma__ApiKeyClient<ApiKey | null >, Prisma__ApiKeyClient<ApiKeyGetPayload<T> | null >>

    /**
     * Find zero or more ApiKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeys
     * const apiKeys = await prisma.apiKey.findMany()
     * 
     * // Get first 10 ApiKeys
     * const apiKeys = await prisma.apiKey.findMany({ take: 10 })
     * 
     * // Only select the `reference`
     * const apiKeyWithReferenceOnly = await prisma.apiKey.findMany({ select: { reference: true } })
     * 
    **/
    findMany<T extends ApiKeyFindManyArgs>(
      args?: SelectSubset<T, ApiKeyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ApiKey>>, PrismaPromise<Array<ApiKeyGetPayload<T>>>>

    /**
     * Create a ApiKey.
     * @param {ApiKeyCreateArgs} args - Arguments to create a ApiKey.
     * @example
     * // Create one ApiKey
     * const ApiKey = await prisma.apiKey.create({
     *   data: {
     *     // ... data to create a ApiKey
     *   }
     * })
     * 
    **/
    create<T extends ApiKeyCreateArgs>(
      args: SelectSubset<T, ApiKeyCreateArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Create many ApiKeys.
     *     @param {ApiKeyCreateManyArgs} args - Arguments to create many ApiKeys.
     *     @example
     *     // Create many ApiKeys
     *     const apiKey = await prisma.apiKey.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApiKeyCreateManyArgs>(
      args?: SelectSubset<T, ApiKeyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ApiKey.
     * @param {ApiKeyDeleteArgs} args - Arguments to delete one ApiKey.
     * @example
     * // Delete one ApiKey
     * const ApiKey = await prisma.apiKey.delete({
     *   where: {
     *     // ... filter to delete one ApiKey
     *   }
     * })
     * 
    **/
    delete<T extends ApiKeyDeleteArgs>(
      args: SelectSubset<T, ApiKeyDeleteArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Update one ApiKey.
     * @param {ApiKeyUpdateArgs} args - Arguments to update one ApiKey.
     * @example
     * // Update one ApiKey
     * const apiKey = await prisma.apiKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApiKeyUpdateArgs>(
      args: SelectSubset<T, ApiKeyUpdateArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Delete zero or more ApiKeys.
     * @param {ApiKeyDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
     * @example
     * // Delete a few ApiKeys
     * const { count } = await prisma.apiKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApiKeyDeleteManyArgs>(
      args?: SelectSubset<T, ApiKeyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApiKeyUpdateManyArgs>(
      args: SelectSubset<T, ApiKeyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiKey.
     * @param {ApiKeyUpsertArgs} args - Arguments to update or create a ApiKey.
     * @example
     * // Update or create a ApiKey
     * const apiKey = await prisma.apiKey.upsert({
     *   create: {
     *     // ... data to create a ApiKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKey we want to update
     *   }
     * })
    **/
    upsert<T extends ApiKeyUpsertArgs>(
      args: SelectSubset<T, ApiKeyUpsertArgs>
    ): CheckSelect<T, Prisma__ApiKeyClient<ApiKey>, Prisma__ApiKeyClient<ApiKeyGetPayload<T>>>

    /**
     * Count the number of ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyCountArgs} args - Arguments to filter ApiKeys to count.
     * @example
     * // Count the number of ApiKeys
     * const count = await prisma.apiKey.count({
     *   where: {
     *     // ... the filter for the ApiKeys we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyCountArgs>(
      args?: Subset<T, ApiKeyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyAggregateArgs>(args: Subset<T, ApiKeyAggregateArgs>): PrismaPromise<GetApiKeyAggregateType<T>>

    /**
     * Group by ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ApiKeyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    environment<T extends EnvironmentArgs = {}>(args?: Subset<T, EnvironmentArgs>): CheckSelect<T, Prisma__EnvironmentClient<Environment | null >, Prisma__EnvironmentClient<EnvironmentGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ApiKey findUnique
   */
  export type ApiKeyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Throw an Error if a ApiKey can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ApiKey to fetch.
     * 
    **/
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey findFirst
   */
  export type ApiKeyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Throw an Error if a ApiKey can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ApiKey to fetch.
     * 
    **/
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     * 
    **/
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     * 
    **/
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     * 
    **/
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }


  /**
   * ApiKey findMany
   */
  export type ApiKeyFindManyArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Filter, which ApiKeys to fetch.
     * 
    **/
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     * 
    **/
    orderBy?: Enumerable<ApiKeyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeys.
     * 
    **/
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ApiKeyScalarFieldEnum>
  }


  /**
   * ApiKey create
   */
  export type ApiKeyCreateArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * The data needed to create a ApiKey.
     * 
    **/
    data: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
  }


  /**
   * ApiKey createMany
   */
  export type ApiKeyCreateManyArgs = {
    /**
     * The data used to create many ApiKeys.
     * 
    **/
    data: Enumerable<ApiKeyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ApiKey update
   */
  export type ApiKeyUpdateArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * The data needed to update a ApiKey.
     * 
    **/
    data: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
    /**
     * Choose, which ApiKey to update.
     * 
    **/
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey updateMany
   */
  export type ApiKeyUpdateManyArgs = {
    /**
     * The data used to update ApiKeys.
     * 
    **/
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     * 
    **/
    where?: ApiKeyWhereInput
  }


  /**
   * ApiKey upsert
   */
  export type ApiKeyUpsertArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * The filter to search for the ApiKey to update in case it exists.
     * 
    **/
    where: ApiKeyWhereUniqueInput
    /**
     * In case the ApiKey found by the `where` argument doesn't exist, create a new ApiKey with this data.
     * 
    **/
    create: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
    /**
     * In case the ApiKey was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
  }


  /**
   * ApiKey delete
   */
  export type ApiKeyDeleteArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
    /**
     * Filter which ApiKey to delete.
     * 
    **/
    where: ApiKeyWhereUniqueInput
  }


  /**
   * ApiKey deleteMany
   */
  export type ApiKeyDeleteManyArgs = {
    /**
     * Filter which ApiKeys to delete
     * 
    **/
    where?: ApiKeyWhereInput
  }


  /**
   * ApiKey without action
   */
  export type ApiKeyArgs = {
    /**
     * Select specific fields to fetch from the ApiKey
     * 
    **/
    select?: ApiKeySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ApiKeyInclude | null
  }



  /**
   * Model Environment
   */


  export type AggregateEnvironment = {
    _count: EnvironmentCountAggregateOutputType | null
    _avg: EnvironmentAvgAggregateOutputType | null
    _sum: EnvironmentSumAggregateOutputType | null
    _min: EnvironmentMinAggregateOutputType | null
    _max: EnvironmentMaxAggregateOutputType | null
  }

  export type EnvironmentAvgAggregateOutputType = {
    id: number | null
    projectId: number | null
    subId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type EnvironmentSumAggregateOutputType = {
    id: number | null
    projectId: number | null
    subId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type EnvironmentMinAggregateOutputType = {
    id: number | null
    name: string | null
    projectId: number | null
    net: Net | null
    subId: number | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type EnvironmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    projectId: number | null
    net: Net | null
    subId: number | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type EnvironmentCountAggregateOutputType = {
    id: number
    name: number
    projectId: number
    net: number
    subId: number
    active: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type EnvironmentAvgAggregateInputType = {
    id?: true
    projectId?: true
    subId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type EnvironmentSumAggregateInputType = {
    id?: true
    projectId?: true
    subId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type EnvironmentMinAggregateInputType = {
    id?: true
    name?: true
    projectId?: true
    net?: true
    subId?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type EnvironmentMaxAggregateInputType = {
    id?: true
    name?: true
    projectId?: true
    net?: true
    subId?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type EnvironmentCountAggregateInputType = {
    id?: true
    name?: true
    projectId?: true
    net?: true
    subId?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type EnvironmentAggregateArgs = {
    /**
     * Filter which Environment to aggregate.
     * 
    **/
    where?: EnvironmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Environments to fetch.
     * 
    **/
    orderBy?: Enumerable<EnvironmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EnvironmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Environments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Environments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Environments
    **/
    _count?: true | EnvironmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnvironmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnvironmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnvironmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnvironmentMaxAggregateInputType
  }

  export type GetEnvironmentAggregateType<T extends EnvironmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEnvironment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnvironment[P]>
      : GetScalarType<T[P], AggregateEnvironment[P]>
  }




  export type EnvironmentGroupByArgs = {
    where?: EnvironmentWhereInput
    orderBy?: Enumerable<EnvironmentOrderByWithAggregationInput>
    by: Array<EnvironmentScalarFieldEnum>
    having?: EnvironmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnvironmentCountAggregateInputType | true
    _avg?: EnvironmentAvgAggregateInputType
    _sum?: EnvironmentSumAggregateInputType
    _min?: EnvironmentMinAggregateInputType
    _max?: EnvironmentMaxAggregateInputType
  }


  export type EnvironmentGroupByOutputType = {
    id: number
    name: string
    projectId: number
    net: Net
    subId: number
    active: boolean
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
    _count: EnvironmentCountAggregateOutputType | null
    _avg: EnvironmentAvgAggregateOutputType | null
    _sum: EnvironmentSumAggregateOutputType | null
    _min: EnvironmentMinAggregateOutputType | null
    _max: EnvironmentMaxAggregateOutputType | null
  }

  type GetEnvironmentGroupByPayload<T extends EnvironmentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EnvironmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnvironmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnvironmentGroupByOutputType[P]>
            : GetScalarType<T[P], EnvironmentGroupByOutputType[P]>
        }
      >
    >


  export type EnvironmentSelect = {
    id?: boolean
    name?: boolean
    project?: boolean | ProjectArgs
    projectId?: boolean
    net?: boolean
    subId?: boolean
    active?: boolean
    apiKeys?: boolean | ApiKeyFindManyArgs
    contracts?: boolean | ContractFindManyArgs
    createdAt?: boolean
    createdByUser?: boolean | UserArgs
    createdBy?: boolean
    updatedByUser?: boolean | UserArgs
    updatedAt?: boolean
    updatedBy?: boolean
    _count?: boolean | EnvironmentCountOutputTypeArgs
  }

  export type EnvironmentInclude = {
    project?: boolean | ProjectArgs
    apiKeys?: boolean | ApiKeyFindManyArgs
    contracts?: boolean | ContractFindManyArgs
    createdByUser?: boolean | UserArgs
    updatedByUser?: boolean | UserArgs
    _count?: boolean | EnvironmentCountOutputTypeArgs
  }

  export type EnvironmentGetPayload<
    S extends boolean | null | undefined | EnvironmentArgs,
    U = keyof S
      > = S extends true
        ? Environment
    : S extends undefined
    ? never
    : S extends EnvironmentArgs | EnvironmentFindManyArgs
    ?'include' extends U
    ? Environment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'project' ? ProjectGetPayload<S['include'][P]> :
        P extends 'apiKeys' ? Array < ApiKeyGetPayload<S['include'][P]>>  :
        P extends 'contracts' ? Array < ContractGetPayload<S['include'][P]>>  :
        P extends 'createdByUser' ? UserGetPayload<S['include'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['include'][P]> | null :
        P extends '_count' ? EnvironmentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'project' ? ProjectGetPayload<S['select'][P]> :
        P extends 'apiKeys' ? Array < ApiKeyGetPayload<S['select'][P]>>  :
        P extends 'contracts' ? Array < ContractGetPayload<S['select'][P]>>  :
        P extends 'createdByUser' ? UserGetPayload<S['select'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['select'][P]> | null :
        P extends '_count' ? EnvironmentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Environment ? Environment[P] : never
  } 
    : Environment
  : Environment


  type EnvironmentCountArgs = Merge<
    Omit<EnvironmentFindManyArgs, 'select' | 'include'> & {
      select?: EnvironmentCountAggregateInputType | true
    }
  >

  export interface EnvironmentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Environment that matches the filter.
     * @param {EnvironmentFindUniqueArgs} args - Arguments to find a Environment
     * @example
     * // Get one Environment
     * const environment = await prisma.environment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EnvironmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EnvironmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Environment'> extends True ? CheckSelect<T, Prisma__EnvironmentClient<Environment>, Prisma__EnvironmentClient<EnvironmentGetPayload<T>>> : CheckSelect<T, Prisma__EnvironmentClient<Environment | null >, Prisma__EnvironmentClient<EnvironmentGetPayload<T> | null >>

    /**
     * Find the first Environment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentFindFirstArgs} args - Arguments to find a Environment
     * @example
     * // Get one Environment
     * const environment = await prisma.environment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EnvironmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EnvironmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Environment'> extends True ? CheckSelect<T, Prisma__EnvironmentClient<Environment>, Prisma__EnvironmentClient<EnvironmentGetPayload<T>>> : CheckSelect<T, Prisma__EnvironmentClient<Environment | null >, Prisma__EnvironmentClient<EnvironmentGetPayload<T> | null >>

    /**
     * Find zero or more Environments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Environments
     * const environments = await prisma.environment.findMany()
     * 
     * // Get first 10 Environments
     * const environments = await prisma.environment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const environmentWithIdOnly = await prisma.environment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EnvironmentFindManyArgs>(
      args?: SelectSubset<T, EnvironmentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Environment>>, PrismaPromise<Array<EnvironmentGetPayload<T>>>>

    /**
     * Create a Environment.
     * @param {EnvironmentCreateArgs} args - Arguments to create a Environment.
     * @example
     * // Create one Environment
     * const Environment = await prisma.environment.create({
     *   data: {
     *     // ... data to create a Environment
     *   }
     * })
     * 
    **/
    create<T extends EnvironmentCreateArgs>(
      args: SelectSubset<T, EnvironmentCreateArgs>
    ): CheckSelect<T, Prisma__EnvironmentClient<Environment>, Prisma__EnvironmentClient<EnvironmentGetPayload<T>>>

    /**
     * Create many Environments.
     *     @param {EnvironmentCreateManyArgs} args - Arguments to create many Environments.
     *     @example
     *     // Create many Environments
     *     const environment = await prisma.environment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EnvironmentCreateManyArgs>(
      args?: SelectSubset<T, EnvironmentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Environment.
     * @param {EnvironmentDeleteArgs} args - Arguments to delete one Environment.
     * @example
     * // Delete one Environment
     * const Environment = await prisma.environment.delete({
     *   where: {
     *     // ... filter to delete one Environment
     *   }
     * })
     * 
    **/
    delete<T extends EnvironmentDeleteArgs>(
      args: SelectSubset<T, EnvironmentDeleteArgs>
    ): CheckSelect<T, Prisma__EnvironmentClient<Environment>, Prisma__EnvironmentClient<EnvironmentGetPayload<T>>>

    /**
     * Update one Environment.
     * @param {EnvironmentUpdateArgs} args - Arguments to update one Environment.
     * @example
     * // Update one Environment
     * const environment = await prisma.environment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EnvironmentUpdateArgs>(
      args: SelectSubset<T, EnvironmentUpdateArgs>
    ): CheckSelect<T, Prisma__EnvironmentClient<Environment>, Prisma__EnvironmentClient<EnvironmentGetPayload<T>>>

    /**
     * Delete zero or more Environments.
     * @param {EnvironmentDeleteManyArgs} args - Arguments to filter Environments to delete.
     * @example
     * // Delete a few Environments
     * const { count } = await prisma.environment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EnvironmentDeleteManyArgs>(
      args?: SelectSubset<T, EnvironmentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Environments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Environments
     * const environment = await prisma.environment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EnvironmentUpdateManyArgs>(
      args: SelectSubset<T, EnvironmentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Environment.
     * @param {EnvironmentUpsertArgs} args - Arguments to update or create a Environment.
     * @example
     * // Update or create a Environment
     * const environment = await prisma.environment.upsert({
     *   create: {
     *     // ... data to create a Environment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Environment we want to update
     *   }
     * })
    **/
    upsert<T extends EnvironmentUpsertArgs>(
      args: SelectSubset<T, EnvironmentUpsertArgs>
    ): CheckSelect<T, Prisma__EnvironmentClient<Environment>, Prisma__EnvironmentClient<EnvironmentGetPayload<T>>>

    /**
     * Count the number of Environments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentCountArgs} args - Arguments to filter Environments to count.
     * @example
     * // Count the number of Environments
     * const count = await prisma.environment.count({
     *   where: {
     *     // ... the filter for the Environments we want to count
     *   }
     * })
    **/
    count<T extends EnvironmentCountArgs>(
      args?: Subset<T, EnvironmentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnvironmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Environment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnvironmentAggregateArgs>(args: Subset<T, EnvironmentAggregateArgs>): PrismaPromise<GetEnvironmentAggregateType<T>>

    /**
     * Group by Environment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnvironmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnvironmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnvironmentGroupByArgs['orderBy'] }
        : { orderBy?: EnvironmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnvironmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnvironmentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Environment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EnvironmentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null >, Prisma__ProjectClient<ProjectGetPayload<T> | null >>;

    apiKeys<T extends ApiKeyFindManyArgs = {}>(args?: Subset<T, ApiKeyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ApiKey>>, PrismaPromise<Array<ApiKeyGetPayload<T>>>>;

    contracts<T extends ContractFindManyArgs = {}>(args?: Subset<T, ContractFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Contract>>, PrismaPromise<Array<ContractGetPayload<T>>>>;

    createdByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    updatedByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Environment findUnique
   */
  export type EnvironmentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Environment
     * 
    **/
    select?: EnvironmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnvironmentInclude | null
    /**
     * Throw an Error if a Environment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Environment to fetch.
     * 
    **/
    where: EnvironmentWhereUniqueInput
  }


  /**
   * Environment findFirst
   */
  export type EnvironmentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Environment
     * 
    **/
    select?: EnvironmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnvironmentInclude | null
    /**
     * Throw an Error if a Environment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Environment to fetch.
     * 
    **/
    where?: EnvironmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Environments to fetch.
     * 
    **/
    orderBy?: Enumerable<EnvironmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Environments.
     * 
    **/
    cursor?: EnvironmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Environments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Environments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Environments.
     * 
    **/
    distinct?: Enumerable<EnvironmentScalarFieldEnum>
  }


  /**
   * Environment findMany
   */
  export type EnvironmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Environment
     * 
    **/
    select?: EnvironmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnvironmentInclude | null
    /**
     * Filter, which Environments to fetch.
     * 
    **/
    where?: EnvironmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Environments to fetch.
     * 
    **/
    orderBy?: Enumerable<EnvironmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Environments.
     * 
    **/
    cursor?: EnvironmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Environments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Environments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EnvironmentScalarFieldEnum>
  }


  /**
   * Environment create
   */
  export type EnvironmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Environment
     * 
    **/
    select?: EnvironmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnvironmentInclude | null
    /**
     * The data needed to create a Environment.
     * 
    **/
    data: XOR<EnvironmentCreateInput, EnvironmentUncheckedCreateInput>
  }


  /**
   * Environment createMany
   */
  export type EnvironmentCreateManyArgs = {
    /**
     * The data used to create many Environments.
     * 
    **/
    data: Enumerable<EnvironmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Environment update
   */
  export type EnvironmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Environment
     * 
    **/
    select?: EnvironmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnvironmentInclude | null
    /**
     * The data needed to update a Environment.
     * 
    **/
    data: XOR<EnvironmentUpdateInput, EnvironmentUncheckedUpdateInput>
    /**
     * Choose, which Environment to update.
     * 
    **/
    where: EnvironmentWhereUniqueInput
  }


  /**
   * Environment updateMany
   */
  export type EnvironmentUpdateManyArgs = {
    /**
     * The data used to update Environments.
     * 
    **/
    data: XOR<EnvironmentUpdateManyMutationInput, EnvironmentUncheckedUpdateManyInput>
    /**
     * Filter which Environments to update
     * 
    **/
    where?: EnvironmentWhereInput
  }


  /**
   * Environment upsert
   */
  export type EnvironmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Environment
     * 
    **/
    select?: EnvironmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnvironmentInclude | null
    /**
     * The filter to search for the Environment to update in case it exists.
     * 
    **/
    where: EnvironmentWhereUniqueInput
    /**
     * In case the Environment found by the `where` argument doesn't exist, create a new Environment with this data.
     * 
    **/
    create: XOR<EnvironmentCreateInput, EnvironmentUncheckedCreateInput>
    /**
     * In case the Environment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EnvironmentUpdateInput, EnvironmentUncheckedUpdateInput>
  }


  /**
   * Environment delete
   */
  export type EnvironmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Environment
     * 
    **/
    select?: EnvironmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnvironmentInclude | null
    /**
     * Filter which Environment to delete.
     * 
    **/
    where: EnvironmentWhereUniqueInput
  }


  /**
   * Environment deleteMany
   */
  export type EnvironmentDeleteManyArgs = {
    /**
     * Filter which Environments to delete
     * 
    **/
    where?: EnvironmentWhereInput
  }


  /**
   * Environment without action
   */
  export type EnvironmentArgs = {
    /**
     * Select specific fields to fetch from the Environment
     * 
    **/
    select?: EnvironmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnvironmentInclude | null
  }



  /**
   * Model Contract
   */


  export type AggregateContract = {
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  export type ContractAvgAggregateOutputType = {
    id: number | null
    environmentId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ContractSumAggregateOutputType = {
    id: number | null
    environmentId: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ContractMinAggregateOutputType = {
    id: number | null
    environmentId: number | null
    address: string | null
    net: Net | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type ContractMaxAggregateOutputType = {
    id: number | null
    environmentId: number | null
    address: string | null
    net: Net | null
    active: boolean | null
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
  }

  export type ContractCountAggregateOutputType = {
    id: number
    environmentId: number
    address: number
    net: number
    active: number
    createdAt: number
    createdBy: number
    updatedAt: number
    updatedBy: number
    _all: number
  }


  export type ContractAvgAggregateInputType = {
    id?: true
    environmentId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ContractSumAggregateInputType = {
    id?: true
    environmentId?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ContractMinAggregateInputType = {
    id?: true
    environmentId?: true
    address?: true
    net?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ContractMaxAggregateInputType = {
    id?: true
    environmentId?: true
    address?: true
    net?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
  }

  export type ContractCountAggregateInputType = {
    id?: true
    environmentId?: true
    address?: true
    net?: true
    active?: true
    createdAt?: true
    createdBy?: true
    updatedAt?: true
    updatedBy?: true
    _all?: true
  }

  export type ContractAggregateArgs = {
    /**
     * Filter which Contract to aggregate.
     * 
    **/
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     * 
    **/
    orderBy?: Enumerable<ContractOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contracts
    **/
    _count?: true | ContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractMaxAggregateInputType
  }

  export type GetContractAggregateType<T extends ContractAggregateArgs> = {
        [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContract[P]>
      : GetScalarType<T[P], AggregateContract[P]>
  }




  export type ContractGroupByArgs = {
    where?: ContractWhereInput
    orderBy?: Enumerable<ContractOrderByWithAggregationInput>
    by: Array<ContractScalarFieldEnum>
    having?: ContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractCountAggregateInputType | true
    _avg?: ContractAvgAggregateInputType
    _sum?: ContractSumAggregateInputType
    _min?: ContractMinAggregateInputType
    _max?: ContractMaxAggregateInputType
  }


  export type ContractGroupByOutputType = {
    id: number
    environmentId: number
    address: string
    net: Net
    active: boolean
    createdAt: Date | null
    createdBy: number | null
    updatedAt: Date | null
    updatedBy: number | null
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  type GetContractGroupByPayload<T extends ContractGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractGroupByOutputType[P]>
            : GetScalarType<T[P], ContractGroupByOutputType[P]>
        }
      >
    >


  export type ContractSelect = {
    id?: boolean
    environment?: boolean | EnvironmentArgs
    environmentId?: boolean
    address?: boolean
    net?: boolean
    active?: boolean
    createdAt?: boolean
    createdByUser?: boolean | UserArgs
    createdBy?: boolean
    updatedByUser?: boolean | UserArgs
    updatedAt?: boolean
    updatedBy?: boolean
  }

  export type ContractInclude = {
    environment?: boolean | EnvironmentArgs
    createdByUser?: boolean | UserArgs
    updatedByUser?: boolean | UserArgs
  }

  export type ContractGetPayload<
    S extends boolean | null | undefined | ContractArgs,
    U = keyof S
      > = S extends true
        ? Contract
    : S extends undefined
    ? never
    : S extends ContractArgs | ContractFindManyArgs
    ?'include' extends U
    ? Contract  & {
    [P in TrueKeys<S['include']>]:
        P extends 'environment' ? EnvironmentGetPayload<S['include'][P]> :
        P extends 'createdByUser' ? UserGetPayload<S['include'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'environment' ? EnvironmentGetPayload<S['select'][P]> :
        P extends 'createdByUser' ? UserGetPayload<S['select'][P]> | null :
        P extends 'updatedByUser' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Contract ? Contract[P] : never
  } 
    : Contract
  : Contract


  type ContractCountArgs = Merge<
    Omit<ContractFindManyArgs, 'select' | 'include'> & {
      select?: ContractCountAggregateInputType | true
    }
  >

  export interface ContractDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Contract that matches the filter.
     * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContractFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContractFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Contract'> extends True ? CheckSelect<T, Prisma__ContractClient<Contract>, Prisma__ContractClient<ContractGetPayload<T>>> : CheckSelect<T, Prisma__ContractClient<Contract | null >, Prisma__ContractClient<ContractGetPayload<T> | null >>

    /**
     * Find the first Contract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContractFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContractFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Contract'> extends True ? CheckSelect<T, Prisma__ContractClient<Contract>, Prisma__ContractClient<ContractGetPayload<T>>> : CheckSelect<T, Prisma__ContractClient<Contract | null >, Prisma__ContractClient<ContractGetPayload<T> | null >>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contract.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractWithIdOnly = await prisma.contract.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContractFindManyArgs>(
      args?: SelectSubset<T, ContractFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Contract>>, PrismaPromise<Array<ContractGetPayload<T>>>>

    /**
     * Create a Contract.
     * @param {ContractCreateArgs} args - Arguments to create a Contract.
     * @example
     * // Create one Contract
     * const Contract = await prisma.contract.create({
     *   data: {
     *     // ... data to create a Contract
     *   }
     * })
     * 
    **/
    create<T extends ContractCreateArgs>(
      args: SelectSubset<T, ContractCreateArgs>
    ): CheckSelect<T, Prisma__ContractClient<Contract>, Prisma__ContractClient<ContractGetPayload<T>>>

    /**
     * Create many Contracts.
     *     @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
     *     @example
     *     // Create many Contracts
     *     const contract = await prisma.contract.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContractCreateManyArgs>(
      args?: SelectSubset<T, ContractCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Contract.
     * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
     * @example
     * // Delete one Contract
     * const Contract = await prisma.contract.delete({
     *   where: {
     *     // ... filter to delete one Contract
     *   }
     * })
     * 
    **/
    delete<T extends ContractDeleteArgs>(
      args: SelectSubset<T, ContractDeleteArgs>
    ): CheckSelect<T, Prisma__ContractClient<Contract>, Prisma__ContractClient<ContractGetPayload<T>>>

    /**
     * Update one Contract.
     * @param {ContractUpdateArgs} args - Arguments to update one Contract.
     * @example
     * // Update one Contract
     * const contract = await prisma.contract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContractUpdateArgs>(
      args: SelectSubset<T, ContractUpdateArgs>
    ): CheckSelect<T, Prisma__ContractClient<Contract>, Prisma__ContractClient<ContractGetPayload<T>>>

    /**
     * Delete zero or more Contracts.
     * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContractDeleteManyArgs>(
      args?: SelectSubset<T, ContractDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContractUpdateManyArgs>(
      args: SelectSubset<T, ContractUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Contract.
     * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
     * @example
     * // Update or create a Contract
     * const contract = await prisma.contract.upsert({
     *   create: {
     *     // ... data to create a Contract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contract we want to update
     *   }
     * })
    **/
    upsert<T extends ContractUpsertArgs>(
      args: SelectSubset<T, ContractUpsertArgs>
    ): CheckSelect<T, Prisma__ContractClient<Contract>, Prisma__ContractClient<ContractGetPayload<T>>>

    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contract.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends ContractCountArgs>(
      args?: Subset<T, ContractCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractAggregateArgs>(args: Subset<T, ContractAggregateArgs>): PrismaPromise<GetContractAggregateType<T>>

    /**
     * Group by Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractGroupByArgs['orderBy'] }
        : { orderBy?: ContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContractClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    environment<T extends EnvironmentArgs = {}>(args?: Subset<T, EnvironmentArgs>): CheckSelect<T, Prisma__EnvironmentClient<Environment | null >, Prisma__EnvironmentClient<EnvironmentGetPayload<T> | null >>;

    createdByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    updatedByUser<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Contract findUnique
   */
  export type ContractFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Contract
     * 
    **/
    select?: ContractSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContractInclude | null
    /**
     * Throw an Error if a Contract can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Contract to fetch.
     * 
    **/
    where: ContractWhereUniqueInput
  }


  /**
   * Contract findFirst
   */
  export type ContractFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Contract
     * 
    **/
    select?: ContractSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContractInclude | null
    /**
     * Throw an Error if a Contract can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Contract to fetch.
     * 
    **/
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     * 
    **/
    orderBy?: Enumerable<ContractOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     * 
    **/
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     * 
    **/
    distinct?: Enumerable<ContractScalarFieldEnum>
  }


  /**
   * Contract findMany
   */
  export type ContractFindManyArgs = {
    /**
     * Select specific fields to fetch from the Contract
     * 
    **/
    select?: ContractSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContractInclude | null
    /**
     * Filter, which Contracts to fetch.
     * 
    **/
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     * 
    **/
    orderBy?: Enumerable<ContractOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contracts.
     * 
    **/
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ContractScalarFieldEnum>
  }


  /**
   * Contract create
   */
  export type ContractCreateArgs = {
    /**
     * Select specific fields to fetch from the Contract
     * 
    **/
    select?: ContractSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContractInclude | null
    /**
     * The data needed to create a Contract.
     * 
    **/
    data: XOR<ContractCreateInput, ContractUncheckedCreateInput>
  }


  /**
   * Contract createMany
   */
  export type ContractCreateManyArgs = {
    /**
     * The data used to create many Contracts.
     * 
    **/
    data: Enumerable<ContractCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Contract update
   */
  export type ContractUpdateArgs = {
    /**
     * Select specific fields to fetch from the Contract
     * 
    **/
    select?: ContractSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContractInclude | null
    /**
     * The data needed to update a Contract.
     * 
    **/
    data: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
    /**
     * Choose, which Contract to update.
     * 
    **/
    where: ContractWhereUniqueInput
  }


  /**
   * Contract updateMany
   */
  export type ContractUpdateManyArgs = {
    /**
     * The data used to update Contracts.
     * 
    **/
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     * 
    **/
    where?: ContractWhereInput
  }


  /**
   * Contract upsert
   */
  export type ContractUpsertArgs = {
    /**
     * Select specific fields to fetch from the Contract
     * 
    **/
    select?: ContractSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContractInclude | null
    /**
     * The filter to search for the Contract to update in case it exists.
     * 
    **/
    where: ContractWhereUniqueInput
    /**
     * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
     * 
    **/
    create: XOR<ContractCreateInput, ContractUncheckedCreateInput>
    /**
     * In case the Contract was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
  }


  /**
   * Contract delete
   */
  export type ContractDeleteArgs = {
    /**
     * Select specific fields to fetch from the Contract
     * 
    **/
    select?: ContractSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContractInclude | null
    /**
     * Filter which Contract to delete.
     * 
    **/
    where: ContractWhereUniqueInput
  }


  /**
   * Contract deleteMany
   */
  export type ContractDeleteManyArgs = {
    /**
     * Filter which Contracts to delete
     * 
    **/
    where?: ContractWhereInput
  }


  /**
   * Contract without action
   */
  export type ContractArgs = {
    /**
     * Select specific fields to fetch from the Contract
     * 
    **/
    select?: ContractSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContractInclude | null
  }



  /**
   * Model UserAction
   */


  export type AggregateUserAction = {
    _count: UserActionCountAggregateOutputType | null
    _avg: UserActionAvgAggregateOutputType | null
    _sum: UserActionSumAggregateOutputType | null
    _min: UserActionMinAggregateOutputType | null
    _max: UserActionMaxAggregateOutputType | null
  }

  export type UserActionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserActionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserActionMinAggregateOutputType = {
    id: number | null
    action: UserActionType | null
    userId: number | null
    actionTimestamp: Date | null
  }

  export type UserActionMaxAggregateOutputType = {
    id: number | null
    action: UserActionType | null
    userId: number | null
    actionTimestamp: Date | null
  }

  export type UserActionCountAggregateOutputType = {
    id: number
    action: number
    data: number
    userId: number
    actionTimestamp: number
    _all: number
  }


  export type UserActionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserActionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserActionMinAggregateInputType = {
    id?: true
    action?: true
    userId?: true
    actionTimestamp?: true
  }

  export type UserActionMaxAggregateInputType = {
    id?: true
    action?: true
    userId?: true
    actionTimestamp?: true
  }

  export type UserActionCountAggregateInputType = {
    id?: true
    action?: true
    data?: true
    userId?: true
    actionTimestamp?: true
    _all?: true
  }

  export type UserActionAggregateArgs = {
    /**
     * Filter which UserAction to aggregate.
     * 
    **/
    where?: UserActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActions to fetch.
     * 
    **/
    orderBy?: Enumerable<UserActionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserActions
    **/
    _count?: true | UserActionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserActionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserActionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserActionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserActionMaxAggregateInputType
  }

  export type GetUserActionAggregateType<T extends UserActionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAction[P]>
      : GetScalarType<T[P], AggregateUserAction[P]>
  }




  export type UserActionGroupByArgs = {
    where?: UserActionWhereInput
    orderBy?: Enumerable<UserActionOrderByWithAggregationInput>
    by: Array<UserActionScalarFieldEnum>
    having?: UserActionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserActionCountAggregateInputType | true
    _avg?: UserActionAvgAggregateInputType
    _sum?: UserActionSumAggregateInputType
    _min?: UserActionMinAggregateInputType
    _max?: UserActionMaxAggregateInputType
  }


  export type UserActionGroupByOutputType = {
    id: number
    action: UserActionType
    data: JsonValue | null
    userId: number
    actionTimestamp: Date
    _count: UserActionCountAggregateOutputType | null
    _avg: UserActionAvgAggregateOutputType | null
    _sum: UserActionSumAggregateOutputType | null
    _min: UserActionMinAggregateOutputType | null
    _max: UserActionMaxAggregateOutputType | null
  }

  type GetUserActionGroupByPayload<T extends UserActionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserActionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserActionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserActionGroupByOutputType[P]>
            : GetScalarType<T[P], UserActionGroupByOutputType[P]>
        }
      >
    >


  export type UserActionSelect = {
    id?: boolean
    action?: boolean
    data?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    actionTimestamp?: boolean
  }

  export type UserActionInclude = {
    user?: boolean | UserArgs
  }

  export type UserActionGetPayload<
    S extends boolean | null | undefined | UserActionArgs,
    U = keyof S
      > = S extends true
        ? UserAction
    : S extends undefined
    ? never
    : S extends UserActionArgs | UserActionFindManyArgs
    ?'include' extends U
    ? UserAction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof UserAction ? UserAction[P] : never
  } 
    : UserAction
  : UserAction


  type UserActionCountArgs = Merge<
    Omit<UserActionFindManyArgs, 'select' | 'include'> & {
      select?: UserActionCountAggregateInputType | true
    }
  >

  export interface UserActionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserAction that matches the filter.
     * @param {UserActionFindUniqueArgs} args - Arguments to find a UserAction
     * @example
     * // Get one UserAction
     * const userAction = await prisma.userAction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserActionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserActionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserAction'> extends True ? CheckSelect<T, Prisma__UserActionClient<UserAction>, Prisma__UserActionClient<UserActionGetPayload<T>>> : CheckSelect<T, Prisma__UserActionClient<UserAction | null >, Prisma__UserActionClient<UserActionGetPayload<T> | null >>

    /**
     * Find the first UserAction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionFindFirstArgs} args - Arguments to find a UserAction
     * @example
     * // Get one UserAction
     * const userAction = await prisma.userAction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserActionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserActionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserAction'> extends True ? CheckSelect<T, Prisma__UserActionClient<UserAction>, Prisma__UserActionClient<UserActionGetPayload<T>>> : CheckSelect<T, Prisma__UserActionClient<UserAction | null >, Prisma__UserActionClient<UserActionGetPayload<T> | null >>

    /**
     * Find zero or more UserActions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserActions
     * const userActions = await prisma.userAction.findMany()
     * 
     * // Get first 10 UserActions
     * const userActions = await prisma.userAction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userActionWithIdOnly = await prisma.userAction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserActionFindManyArgs>(
      args?: SelectSubset<T, UserActionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserAction>>, PrismaPromise<Array<UserActionGetPayload<T>>>>

    /**
     * Create a UserAction.
     * @param {UserActionCreateArgs} args - Arguments to create a UserAction.
     * @example
     * // Create one UserAction
     * const UserAction = await prisma.userAction.create({
     *   data: {
     *     // ... data to create a UserAction
     *   }
     * })
     * 
    **/
    create<T extends UserActionCreateArgs>(
      args: SelectSubset<T, UserActionCreateArgs>
    ): CheckSelect<T, Prisma__UserActionClient<UserAction>, Prisma__UserActionClient<UserActionGetPayload<T>>>

    /**
     * Create many UserActions.
     *     @param {UserActionCreateManyArgs} args - Arguments to create many UserActions.
     *     @example
     *     // Create many UserActions
     *     const userAction = await prisma.userAction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserActionCreateManyArgs>(
      args?: SelectSubset<T, UserActionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserAction.
     * @param {UserActionDeleteArgs} args - Arguments to delete one UserAction.
     * @example
     * // Delete one UserAction
     * const UserAction = await prisma.userAction.delete({
     *   where: {
     *     // ... filter to delete one UserAction
     *   }
     * })
     * 
    **/
    delete<T extends UserActionDeleteArgs>(
      args: SelectSubset<T, UserActionDeleteArgs>
    ): CheckSelect<T, Prisma__UserActionClient<UserAction>, Prisma__UserActionClient<UserActionGetPayload<T>>>

    /**
     * Update one UserAction.
     * @param {UserActionUpdateArgs} args - Arguments to update one UserAction.
     * @example
     * // Update one UserAction
     * const userAction = await prisma.userAction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserActionUpdateArgs>(
      args: SelectSubset<T, UserActionUpdateArgs>
    ): CheckSelect<T, Prisma__UserActionClient<UserAction>, Prisma__UserActionClient<UserActionGetPayload<T>>>

    /**
     * Delete zero or more UserActions.
     * @param {UserActionDeleteManyArgs} args - Arguments to filter UserActions to delete.
     * @example
     * // Delete a few UserActions
     * const { count } = await prisma.userAction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserActionDeleteManyArgs>(
      args?: SelectSubset<T, UserActionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserActions
     * const userAction = await prisma.userAction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserActionUpdateManyArgs>(
      args: SelectSubset<T, UserActionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserAction.
     * @param {UserActionUpsertArgs} args - Arguments to update or create a UserAction.
     * @example
     * // Update or create a UserAction
     * const userAction = await prisma.userAction.upsert({
     *   create: {
     *     // ... data to create a UserAction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAction we want to update
     *   }
     * })
    **/
    upsert<T extends UserActionUpsertArgs>(
      args: SelectSubset<T, UserActionUpsertArgs>
    ): CheckSelect<T, Prisma__UserActionClient<UserAction>, Prisma__UserActionClient<UserActionGetPayload<T>>>

    /**
     * Count the number of UserActions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionCountArgs} args - Arguments to filter UserActions to count.
     * @example
     * // Count the number of UserActions
     * const count = await prisma.userAction.count({
     *   where: {
     *     // ... the filter for the UserActions we want to count
     *   }
     * })
    **/
    count<T extends UserActionCountArgs>(
      args?: Subset<T, UserActionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserActionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserActionAggregateArgs>(args: Subset<T, UserActionAggregateArgs>): PrismaPromise<GetUserActionAggregateType<T>>

    /**
     * Group by UserAction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserActionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserActionGroupByArgs['orderBy'] }
        : { orderBy?: UserActionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserActionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserActionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserActionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserAction findUnique
   */
  export type UserActionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserAction
     * 
    **/
    select?: UserActionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserActionInclude | null
    /**
     * Throw an Error if a UserAction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserAction to fetch.
     * 
    **/
    where: UserActionWhereUniqueInput
  }


  /**
   * UserAction findFirst
   */
  export type UserActionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserAction
     * 
    **/
    select?: UserActionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserActionInclude | null
    /**
     * Throw an Error if a UserAction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserAction to fetch.
     * 
    **/
    where?: UserActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActions to fetch.
     * 
    **/
    orderBy?: Enumerable<UserActionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActions.
     * 
    **/
    cursor?: UserActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActions.
     * 
    **/
    distinct?: Enumerable<UserActionScalarFieldEnum>
  }


  /**
   * UserAction findMany
   */
  export type UserActionFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserAction
     * 
    **/
    select?: UserActionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserActionInclude | null
    /**
     * Filter, which UserActions to fetch.
     * 
    **/
    where?: UserActionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActions to fetch.
     * 
    **/
    orderBy?: Enumerable<UserActionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserActions.
     * 
    **/
    cursor?: UserActionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserActionScalarFieldEnum>
  }


  /**
   * UserAction create
   */
  export type UserActionCreateArgs = {
    /**
     * Select specific fields to fetch from the UserAction
     * 
    **/
    select?: UserActionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserActionInclude | null
    /**
     * The data needed to create a UserAction.
     * 
    **/
    data: XOR<UserActionCreateInput, UserActionUncheckedCreateInput>
  }


  /**
   * UserAction createMany
   */
  export type UserActionCreateManyArgs = {
    /**
     * The data used to create many UserActions.
     * 
    **/
    data: Enumerable<UserActionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserAction update
   */
  export type UserActionUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserAction
     * 
    **/
    select?: UserActionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserActionInclude | null
    /**
     * The data needed to update a UserAction.
     * 
    **/
    data: XOR<UserActionUpdateInput, UserActionUncheckedUpdateInput>
    /**
     * Choose, which UserAction to update.
     * 
    **/
    where: UserActionWhereUniqueInput
  }


  /**
   * UserAction updateMany
   */
  export type UserActionUpdateManyArgs = {
    /**
     * The data used to update UserActions.
     * 
    **/
    data: XOR<UserActionUpdateManyMutationInput, UserActionUncheckedUpdateManyInput>
    /**
     * Filter which UserActions to update
     * 
    **/
    where?: UserActionWhereInput
  }


  /**
   * UserAction upsert
   */
  export type UserActionUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserAction
     * 
    **/
    select?: UserActionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserActionInclude | null
    /**
     * The filter to search for the UserAction to update in case it exists.
     * 
    **/
    where: UserActionWhereUniqueInput
    /**
     * In case the UserAction found by the `where` argument doesn't exist, create a new UserAction with this data.
     * 
    **/
    create: XOR<UserActionCreateInput, UserActionUncheckedCreateInput>
    /**
     * In case the UserAction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserActionUpdateInput, UserActionUncheckedUpdateInput>
  }


  /**
   * UserAction delete
   */
  export type UserActionDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserAction
     * 
    **/
    select?: UserActionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserActionInclude | null
    /**
     * Filter which UserAction to delete.
     * 
    **/
    where: UserActionWhereUniqueInput
  }


  /**
   * UserAction deleteMany
   */
  export type UserActionDeleteManyArgs = {
    /**
     * Filter which UserActions to delete
     * 
    **/
    where?: UserActionWhereInput
  }


  /**
   * UserAction without action
   */
  export type UserActionArgs = {
    /**
     * Select specific fields to fetch from the UserAction
     * 
    **/
    select?: UserActionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserActionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    email: 'email',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    active: 'active',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamMemberScalarFieldEnum: {
    userId: 'userId',
    teamId: 'teamId',
    active: 'active',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type TeamMemberScalarFieldEnum = (typeof TeamMemberScalarFieldEnum)[keyof typeof TeamMemberScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    active: 'active',
    tutorial: 'tutorial',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const TeamProjectScalarFieldEnum: {
    teamId: 'teamId',
    projectId: 'projectId',
    active: 'active',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type TeamProjectScalarFieldEnum = (typeof TeamProjectScalarFieldEnum)[keyof typeof TeamProjectScalarFieldEnum]


  export const ApiKeyScalarFieldEnum: {
    reference: 'reference',
    net: 'net',
    environmentId: 'environmentId',
    active: 'active'
  };

  export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


  export const EnvironmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    projectId: 'projectId',
    net: 'net',
    subId: 'subId',
    active: 'active',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type EnvironmentScalarFieldEnum = (typeof EnvironmentScalarFieldEnum)[keyof typeof EnvironmentScalarFieldEnum]


  export const ContractScalarFieldEnum: {
    id: 'id',
    environmentId: 'environmentId',
    address: 'address',
    net: 'net',
    active: 'active',
    createdAt: 'createdAt',
    createdBy: 'createdBy',
    updatedAt: 'updatedAt',
    updatedBy: 'updatedBy'
  };

  export type ContractScalarFieldEnum = (typeof ContractScalarFieldEnum)[keyof typeof ContractScalarFieldEnum]


  export const UserActionScalarFieldEnum: {
    id: 'id',
    action: 'action',
    data: 'data',
    userId: 'userId',
    actionTimestamp: 'actionTimestamp'
  };

  export type UserActionScalarFieldEnum = (typeof UserActionScalarFieldEnum)[keyof typeof UserActionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    uid?: StringFilter | string
    email?: StringFilter | string
    active?: BoolFilter | boolean
    teamMembers?: TeamMemberListRelationFilter
    createdAt?: DateTimeNullableFilter | Date | string | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    createdTeams?: TeamListRelationFilter
    updatedTeams?: TeamListRelationFilter
    createdTeamMembers?: TeamMemberListRelationFilter
    updatedTeamMembers?: TeamMemberListRelationFilter
    createdProjects?: ProjectListRelationFilter
    updatedProjects?: ProjectListRelationFilter
    createdEnvironments?: EnvironmentListRelationFilter
    updatedEnvironments?: EnvironmentListRelationFilter
    createdContracts?: ContractListRelationFilter
    updatedContracts?: ContractListRelationFilter
    createdTeamProject?: TeamProjectListRelationFilter
    updatedTeamProject?: TeamProjectListRelationFilter
    userActions?: UserActionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    email?: SortOrder
    active?: SortOrder
    teamMembers?: TeamMemberOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdTeams?: TeamOrderByRelationAggregateInput
    updatedTeams?: TeamOrderByRelationAggregateInput
    createdTeamMembers?: TeamMemberOrderByRelationAggregateInput
    updatedTeamMembers?: TeamMemberOrderByRelationAggregateInput
    createdProjects?: ProjectOrderByRelationAggregateInput
    updatedProjects?: ProjectOrderByRelationAggregateInput
    createdEnvironments?: EnvironmentOrderByRelationAggregateInput
    updatedEnvironments?: EnvironmentOrderByRelationAggregateInput
    createdContracts?: ContractOrderByRelationAggregateInput
    updatedContracts?: ContractOrderByRelationAggregateInput
    createdTeamProject?: TeamProjectOrderByRelationAggregateInput
    updatedTeamProject?: TeamProjectOrderByRelationAggregateInput
    userActions?: UserActionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    uid?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    email?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    uid?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    active?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type TeamWhereInput = {
    AND?: Enumerable<TeamWhereInput>
    OR?: Enumerable<TeamWhereInput>
    NOT?: Enumerable<TeamWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    active?: BoolFilter | boolean
    teamMembers?: TeamMemberListRelationFilter
    teamProjects?: TeamProjectListRelationFilter
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    createdBy?: IntNullableFilter | number | null
    updatedByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    teamMembers?: TeamMemberOrderByRelationAggregateInput
    teamProjects?: TeamProjectOrderByRelationAggregateInput
    createdAt?: SortOrder
    createdByUser?: UserOrderByWithRelationInput
    createdBy?: SortOrder
    updatedByUser?: UserOrderByWithRelationInput
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamWhereUniqueInput = {
    id?: number
  }

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeamScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeamScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeamScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    active?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdBy?: IntNullableWithAggregatesFilter | number | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedBy?: IntNullableWithAggregatesFilter | number | null
  }

  export type TeamMemberWhereInput = {
    AND?: Enumerable<TeamMemberWhereInput>
    OR?: Enumerable<TeamMemberWhereInput>
    NOT?: Enumerable<TeamMemberWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    teamId?: IntFilter | number
    active?: BoolFilter | boolean
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    createdBy?: IntNullableFilter | number | null
    updatedByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type TeamMemberOrderByWithRelationInput = {
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    team?: TeamOrderByWithRelationInput
    teamId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdByUser?: UserOrderByWithRelationInput
    createdBy?: SortOrder
    updatedByUser?: UserOrderByWithRelationInput
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamMemberWhereUniqueInput = {
    userId_teamId?: TeamMemberUserIdTeamIdCompoundUniqueInput
  }

  export type TeamMemberOrderByWithAggregationInput = {
    userId?: SortOrder
    teamId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: TeamMemberCountOrderByAggregateInput
    _avg?: TeamMemberAvgOrderByAggregateInput
    _max?: TeamMemberMaxOrderByAggregateInput
    _min?: TeamMemberMinOrderByAggregateInput
    _sum?: TeamMemberSumOrderByAggregateInput
  }

  export type TeamMemberScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeamMemberScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeamMemberScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeamMemberScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    teamId?: IntWithAggregatesFilter | number
    active?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdBy?: IntNullableWithAggregatesFilter | number | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedBy?: IntNullableWithAggregatesFilter | number | null
  }

  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>
    OR?: Enumerable<ProjectWhereInput>
    NOT?: Enumerable<ProjectWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    slug?: StringFilter | string
    active?: BoolFilter | boolean
    teamProjects?: TeamProjectListRelationFilter
    environments?: EnvironmentListRelationFilter
    tutorial?: EnumProjectTutorialNullableFilter | ProjectTutorial | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    createdBy?: IntNullableFilter | number | null
    updatedByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    active?: SortOrder
    teamProjects?: TeamProjectOrderByRelationAggregateInput
    environments?: EnvironmentOrderByRelationAggregateInput
    tutorial?: SortOrder
    createdAt?: SortOrder
    createdByUser?: UserOrderByWithRelationInput
    createdBy?: SortOrder
    updatedByUser?: UserOrderByWithRelationInput
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProjectWhereUniqueInput = {
    id?: number
    slug?: string
  }

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    active?: SortOrder
    tutorial?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    active?: BoolWithAggregatesFilter | boolean
    tutorial?: EnumProjectTutorialNullableWithAggregatesFilter | ProjectTutorial | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdBy?: IntNullableWithAggregatesFilter | number | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedBy?: IntNullableWithAggregatesFilter | number | null
  }

  export type TeamProjectWhereInput = {
    AND?: Enumerable<TeamProjectWhereInput>
    OR?: Enumerable<TeamProjectWhereInput>
    NOT?: Enumerable<TeamProjectWhereInput>
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    teamId?: IntFilter | number
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    projectId?: IntFilter | number
    active?: BoolFilter | boolean
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    createdBy?: IntNullableFilter | number | null
    updatedByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type TeamProjectOrderByWithRelationInput = {
    team?: TeamOrderByWithRelationInput
    teamId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    projectId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdByUser?: UserOrderByWithRelationInput
    createdBy?: SortOrder
    updatedByUser?: UserOrderByWithRelationInput
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamProjectWhereUniqueInput = {
    teamId_projectId?: TeamProjectTeamIdProjectIdCompoundUniqueInput
  }

  export type TeamProjectOrderByWithAggregationInput = {
    teamId?: SortOrder
    projectId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: TeamProjectCountOrderByAggregateInput
    _avg?: TeamProjectAvgOrderByAggregateInput
    _max?: TeamProjectMaxOrderByAggregateInput
    _min?: TeamProjectMinOrderByAggregateInput
    _sum?: TeamProjectSumOrderByAggregateInput
  }

  export type TeamProjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeamProjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeamProjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeamProjectScalarWhereWithAggregatesInput>
    teamId?: IntWithAggregatesFilter | number
    projectId?: IntWithAggregatesFilter | number
    active?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdBy?: IntNullableWithAggregatesFilter | number | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedBy?: IntNullableWithAggregatesFilter | number | null
  }

  export type ApiKeyWhereInput = {
    AND?: Enumerable<ApiKeyWhereInput>
    OR?: Enumerable<ApiKeyWhereInput>
    NOT?: Enumerable<ApiKeyWhereInput>
    reference?: StringFilter | string
    net?: EnumNetFilter | Net
    environment?: XOR<EnvironmentRelationFilter, EnvironmentWhereInput>
    environmentId?: IntFilter | number
    active?: BoolFilter | boolean
  }

  export type ApiKeyOrderByWithRelationInput = {
    reference?: SortOrder
    net?: SortOrder
    environment?: EnvironmentOrderByWithRelationInput
    environmentId?: SortOrder
    active?: SortOrder
  }

  export type ApiKeyWhereUniqueInput = {
    reference?: string
  }

  export type ApiKeyOrderByWithAggregationInput = {
    reference?: SortOrder
    net?: SortOrder
    environmentId?: SortOrder
    active?: SortOrder
    _count?: ApiKeyCountOrderByAggregateInput
    _avg?: ApiKeyAvgOrderByAggregateInput
    _max?: ApiKeyMaxOrderByAggregateInput
    _min?: ApiKeyMinOrderByAggregateInput
    _sum?: ApiKeySumOrderByAggregateInput
  }

  export type ApiKeyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    OR?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ApiKeyScalarWhereWithAggregatesInput>
    reference?: StringWithAggregatesFilter | string
    net?: EnumNetWithAggregatesFilter | Net
    environmentId?: IntWithAggregatesFilter | number
    active?: BoolWithAggregatesFilter | boolean
  }

  export type EnvironmentWhereInput = {
    AND?: Enumerable<EnvironmentWhereInput>
    OR?: Enumerable<EnvironmentWhereInput>
    NOT?: Enumerable<EnvironmentWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    projectId?: IntFilter | number
    net?: EnumNetFilter | Net
    subId?: IntFilter | number
    active?: BoolFilter | boolean
    apiKeys?: ApiKeyListRelationFilter
    contracts?: ContractListRelationFilter
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    createdBy?: IntNullableFilter | number | null
    updatedByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type EnvironmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    project?: ProjectOrderByWithRelationInput
    projectId?: SortOrder
    net?: SortOrder
    subId?: SortOrder
    active?: SortOrder
    apiKeys?: ApiKeyOrderByRelationAggregateInput
    contracts?: ContractOrderByRelationAggregateInput
    createdAt?: SortOrder
    createdByUser?: UserOrderByWithRelationInput
    createdBy?: SortOrder
    updatedByUser?: UserOrderByWithRelationInput
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnvironmentWhereUniqueInput = {
    id?: number
    projectId_subId?: EnvironmentProjectIdSubIdCompoundUniqueInput
  }

  export type EnvironmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    projectId?: SortOrder
    net?: SortOrder
    subId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: EnvironmentCountOrderByAggregateInput
    _avg?: EnvironmentAvgOrderByAggregateInput
    _max?: EnvironmentMaxOrderByAggregateInput
    _min?: EnvironmentMinOrderByAggregateInput
    _sum?: EnvironmentSumOrderByAggregateInput
  }

  export type EnvironmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EnvironmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<EnvironmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EnvironmentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    projectId?: IntWithAggregatesFilter | number
    net?: EnumNetWithAggregatesFilter | Net
    subId?: IntWithAggregatesFilter | number
    active?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdBy?: IntNullableWithAggregatesFilter | number | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedBy?: IntNullableWithAggregatesFilter | number | null
  }

  export type ContractWhereInput = {
    AND?: Enumerable<ContractWhereInput>
    OR?: Enumerable<ContractWhereInput>
    NOT?: Enumerable<ContractWhereInput>
    id?: IntFilter | number
    environment?: XOR<EnvironmentRelationFilter, EnvironmentWhereInput>
    environmentId?: IntFilter | number
    address?: StringFilter | string
    net?: EnumNetFilter | Net
    active?: BoolFilter | boolean
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    createdBy?: IntNullableFilter | number | null
    updatedByUser?: XOR<UserRelationFilter, UserWhereInput> | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type ContractOrderByWithRelationInput = {
    id?: SortOrder
    environment?: EnvironmentOrderByWithRelationInput
    environmentId?: SortOrder
    address?: SortOrder
    net?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdByUser?: UserOrderByWithRelationInput
    createdBy?: SortOrder
    updatedByUser?: UserOrderByWithRelationInput
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ContractWhereUniqueInput = {
    id?: number
  }

  export type ContractOrderByWithAggregationInput = {
    id?: SortOrder
    environmentId?: SortOrder
    address?: SortOrder
    net?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
    _count?: ContractCountOrderByAggregateInput
    _avg?: ContractAvgOrderByAggregateInput
    _max?: ContractMaxOrderByAggregateInput
    _min?: ContractMinOrderByAggregateInput
    _sum?: ContractSumOrderByAggregateInput
  }

  export type ContractScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContractScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContractScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContractScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    environmentId?: IntWithAggregatesFilter | number
    address?: StringWithAggregatesFilter | string
    net?: EnumNetWithAggregatesFilter | Net
    active?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdBy?: IntNullableWithAggregatesFilter | number | null
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updatedBy?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserActionWhereInput = {
    AND?: Enumerable<UserActionWhereInput>
    OR?: Enumerable<UserActionWhereInput>
    NOT?: Enumerable<UserActionWhereInput>
    id?: IntFilter | number
    action?: EnumUserActionTypeFilter | UserActionType
    data?: JsonNullableFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    actionTimestamp?: DateTimeFilter | Date | string
  }

  export type UserActionOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    data?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    actionTimestamp?: SortOrder
  }

  export type UserActionWhereUniqueInput = {
    id?: number
  }

  export type UserActionOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    actionTimestamp?: SortOrder
    _count?: UserActionCountOrderByAggregateInput
    _avg?: UserActionAvgOrderByAggregateInput
    _max?: UserActionMaxOrderByAggregateInput
    _min?: UserActionMinOrderByAggregateInput
    _sum?: UserActionSumOrderByAggregateInput
  }

  export type UserActionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserActionScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserActionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserActionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    action?: EnumUserActionTypeWithAggregatesFilter | UserActionType
    data?: JsonNullableWithAggregatesFilter
    userId?: IntWithAggregatesFilter | number
    actionTimestamp?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamCreateInput = {
    name: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutTeamInput
    teamProjects?: TeamProjectCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamsInput
    updatedAt?: Date | string | null
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    teamProjects?: TeamProjectUncheckedCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutTeamInput
    teamProjects?: TeamProjectUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutTeamInput
    teamProjects?: TeamProjectUncheckedUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamCreateManyInput = {
    id?: number
    name: string
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamMemberCreateInput = {
    user: UserCreateNestedOneWithoutTeamMembersInput
    team: TeamCreateNestedOneWithoutTeamMembersInput
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamMembersInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamMembersInput
    updatedAt?: Date | string | null
  }

  export type TeamMemberUncheckedCreateInput = {
    userId: number
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamMemberUpdateInput = {
    user?: UserUpdateOneRequiredWithoutTeamMembersInput
    team?: TeamUpdateOneRequiredWithoutTeamMembersInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamMembersInput
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamMembersInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamMemberUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamMemberCreateManyInput = {
    userId: number
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamMemberUpdateManyMutationInput = {
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamMemberUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectCreateInput = {
    name: string
    slug: string
    active?: boolean
    teamProjects?: TeamProjectCreateNestedManyWithoutProjectInput
    environments?: EnvironmentCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedProjectsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedProjectsInput
    updatedAt?: Date | string | null
  }

  export type ProjectUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    active?: boolean
    teamProjects?: TeamProjectUncheckedCreateNestedManyWithoutProjectInput
    environments?: EnvironmentUncheckedCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUpdateManyWithoutProjectInput
    environments?: EnvironmentUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedProjectsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedProjectsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUncheckedUpdateManyWithoutProjectInput
    environments?: EnvironmentUncheckedUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectCreateManyInput = {
    id?: number
    name: string
    slug: string
    active?: boolean
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamProjectCreateInput = {
    team: TeamCreateNestedOneWithoutTeamProjectsInput
    project: ProjectCreateNestedOneWithoutTeamProjectsInput
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamProjectInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamProjectInput
    updatedAt?: Date | string | null
  }

  export type TeamProjectUncheckedCreateInput = {
    teamId: number
    projectId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamProjectUpdateInput = {
    team?: TeamUpdateOneRequiredWithoutTeamProjectsInput
    project?: ProjectUpdateOneRequiredWithoutTeamProjectsInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamProjectInput
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamProjectInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamProjectUncheckedUpdateInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamProjectCreateManyInput = {
    teamId: number
    projectId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamProjectUpdateManyMutationInput = {
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamProjectUncheckedUpdateManyInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ApiKeyCreateInput = {
    reference: string
    net: Net
    environment: EnvironmentCreateNestedOneWithoutApiKeysInput
    active?: boolean
  }

  export type ApiKeyUncheckedCreateInput = {
    reference: string
    net: Net
    environmentId: number
    active?: boolean
  }

  export type ApiKeyUpdateInput = {
    reference?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    environment?: EnvironmentUpdateOneRequiredWithoutApiKeysInput
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApiKeyUncheckedUpdateInput = {
    reference?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    environmentId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApiKeyCreateManyInput = {
    reference: string
    net: Net
    environmentId: number
    active?: boolean
  }

  export type ApiKeyUpdateManyMutationInput = {
    reference?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApiKeyUncheckedUpdateManyInput = {
    reference?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    environmentId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EnvironmentCreateInput = {
    name: string
    project: ProjectCreateNestedOneWithoutEnvironmentsInput
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyCreateNestedManyWithoutEnvironmentInput
    contracts?: ContractCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedEnvironmentsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedEnvironmentsInput
    updatedAt?: Date | string | null
  }

  export type EnvironmentUncheckedCreateInput = {
    id?: number
    name: string
    projectId: number
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutEnvironmentInput
    contracts?: ContractUncheckedCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type EnvironmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutEnvironmentsInput
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUpdateManyWithoutEnvironmentInput
    contracts?: ContractUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedEnvironmentsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedEnvironmentsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnvironmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    projectId?: IntFieldUpdateOperationsInput | number
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutEnvironmentInput
    contracts?: ContractUncheckedUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnvironmentCreateManyInput = {
    id?: number
    name: string
    projectId: number
    net: Net
    subId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type EnvironmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnvironmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    projectId?: IntFieldUpdateOperationsInput | number
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContractCreateInput = {
    environment: EnvironmentCreateNestedOneWithoutContractsInput
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedContractsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedContractsInput
    updatedAt?: Date | string | null
  }

  export type ContractUncheckedCreateInput = {
    id?: number
    environmentId: number
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ContractUpdateInput = {
    environment?: EnvironmentUpdateOneRequiredWithoutContractsInput
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedContractsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedContractsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContractCreateManyInput = {
    id?: number
    environmentId: number
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ContractUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserActionCreateInput = {
    action: UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutUserActionsInput
    actionTimestamp?: Date | string
  }

  export type UserActionUncheckedCreateInput = {
    id?: number
    action: UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    userId: number
    actionTimestamp?: Date | string
  }

  export type UserActionUpdateInput = {
    action?: EnumUserActionTypeFieldUpdateOperationsInput | UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutUserActionsInput
    actionTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: EnumUserActionTypeFieldUpdateOperationsInput | UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    actionTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActionCreateManyInput = {
    id?: number
    action: UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    userId: number
    actionTimestamp?: Date | string
  }

  export type UserActionUpdateManyMutationInput = {
    action?: EnumUserActionTypeFieldUpdateOperationsInput | UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    actionTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: EnumUserActionTypeFieldUpdateOperationsInput | UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    userId?: IntFieldUpdateOperationsInput | number
    actionTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type TeamMemberListRelationFilter = {
    every?: TeamMemberWhereInput
    some?: TeamMemberWhereInput
    none?: TeamMemberWhereInput
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type EnvironmentListRelationFilter = {
    every?: EnvironmentWhereInput
    some?: EnvironmentWhereInput
    none?: EnvironmentWhereInput
  }

  export type ContractListRelationFilter = {
    every?: ContractWhereInput
    some?: ContractWhereInput
    none?: ContractWhereInput
  }

  export type TeamProjectListRelationFilter = {
    every?: TeamProjectWhereInput
    some?: TeamProjectWhereInput
    none?: TeamProjectWhereInput
  }

  export type UserActionListRelationFilter = {
    every?: UserActionWhereInput
    some?: UserActionWhereInput
    none?: UserActionWhereInput
  }

  export type TeamMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnvironmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserActionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    email?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    email?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    email?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type TeamMemberUserIdTeamIdCompoundUniqueInput = {
    userId: number
    teamId: number
  }

  export type TeamMemberCountOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamMemberAvgOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamMemberMaxOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamMemberMinOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamMemberSumOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnumProjectTutorialNullableFilter = {
    equals?: ProjectTutorial | null
    in?: Enumerable<ProjectTutorial> | null
    notIn?: Enumerable<ProjectTutorial> | null
    not?: NestedEnumProjectTutorialNullableFilter | ProjectTutorial | null
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    active?: SortOrder
    tutorial?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    active?: SortOrder
    tutorial?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    active?: SortOrder
    tutorial?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnumProjectTutorialNullableWithAggregatesFilter = {
    equals?: ProjectTutorial | null
    in?: Enumerable<ProjectTutorial> | null
    notIn?: Enumerable<ProjectTutorial> | null
    not?: NestedEnumProjectTutorialNullableWithAggregatesFilter | ProjectTutorial | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumProjectTutorialNullableFilter
    _max?: NestedEnumProjectTutorialNullableFilter
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type TeamProjectTeamIdProjectIdCompoundUniqueInput = {
    teamId: number
    projectId: number
  }

  export type TeamProjectCountOrderByAggregateInput = {
    teamId?: SortOrder
    projectId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamProjectAvgOrderByAggregateInput = {
    teamId?: SortOrder
    projectId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamProjectMaxOrderByAggregateInput = {
    teamId?: SortOrder
    projectId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamProjectMinOrderByAggregateInput = {
    teamId?: SortOrder
    projectId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type TeamProjectSumOrderByAggregateInput = {
    teamId?: SortOrder
    projectId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnumNetFilter = {
    equals?: Net
    in?: Enumerable<Net>
    notIn?: Enumerable<Net>
    not?: NestedEnumNetFilter | Net
  }

  export type EnvironmentRelationFilter = {
    is?: EnvironmentWhereInput
    isNot?: EnvironmentWhereInput
  }

  export type ApiKeyCountOrderByAggregateInput = {
    reference?: SortOrder
    net?: SortOrder
    environmentId?: SortOrder
    active?: SortOrder
  }

  export type ApiKeyAvgOrderByAggregateInput = {
    environmentId?: SortOrder
  }

  export type ApiKeyMaxOrderByAggregateInput = {
    reference?: SortOrder
    net?: SortOrder
    environmentId?: SortOrder
    active?: SortOrder
  }

  export type ApiKeyMinOrderByAggregateInput = {
    reference?: SortOrder
    net?: SortOrder
    environmentId?: SortOrder
    active?: SortOrder
  }

  export type ApiKeySumOrderByAggregateInput = {
    environmentId?: SortOrder
  }

  export type EnumNetWithAggregatesFilter = {
    equals?: Net
    in?: Enumerable<Net>
    notIn?: Enumerable<Net>
    not?: NestedEnumNetWithAggregatesFilter | Net
    _count?: NestedIntFilter
    _min?: NestedEnumNetFilter
    _max?: NestedEnumNetFilter
  }

  export type ApiKeyListRelationFilter = {
    every?: ApiKeyWhereInput
    some?: ApiKeyWhereInput
    none?: ApiKeyWhereInput
  }

  export type ApiKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnvironmentProjectIdSubIdCompoundUniqueInput = {
    projectId: number
    subId: number
  }

  export type EnvironmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    projectId?: SortOrder
    net?: SortOrder
    subId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnvironmentAvgOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    subId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnvironmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    projectId?: SortOrder
    net?: SortOrder
    subId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnvironmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    projectId?: SortOrder
    net?: SortOrder
    subId?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnvironmentSumOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    subId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ContractCountOrderByAggregateInput = {
    id?: SortOrder
    environmentId?: SortOrder
    address?: SortOrder
    net?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ContractAvgOrderByAggregateInput = {
    id?: SortOrder
    environmentId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ContractMaxOrderByAggregateInput = {
    id?: SortOrder
    environmentId?: SortOrder
    address?: SortOrder
    net?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ContractMinOrderByAggregateInput = {
    id?: SortOrder
    environmentId?: SortOrder
    address?: SortOrder
    net?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    createdBy?: SortOrder
    updatedAt?: SortOrder
    updatedBy?: SortOrder
  }

  export type ContractSumOrderByAggregateInput = {
    id?: SortOrder
    environmentId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type EnumUserActionTypeFilter = {
    equals?: UserActionType
    in?: Enumerable<UserActionType>
    notIn?: Enumerable<UserActionType>
    not?: NestedEnumUserActionTypeFilter | UserActionType
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserActionCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    actionTimestamp?: SortOrder
  }

  export type UserActionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserActionMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    actionTimestamp?: SortOrder
  }

  export type UserActionMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    actionTimestamp?: SortOrder
  }

  export type UserActionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumUserActionTypeWithAggregatesFilter = {
    equals?: UserActionType
    in?: Enumerable<UserActionType>
    notIn?: Enumerable<UserActionType>
    not?: NestedEnumUserActionTypeWithAggregatesFilter | UserActionType
    _count?: NestedIntFilter
    _min?: NestedEnumUserActionTypeFilter
    _max?: NestedEnumUserActionTypeFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type TeamMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutUserInput>
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: Enumerable<TeamMemberWhereUniqueInput>
  }

  export type TeamCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamCreateWithoutCreatedByUserInput>, Enumerable<TeamUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamCreateOrConnectWithoutCreatedByUserInput>
    createMany?: TeamCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<TeamWhereUniqueInput>
  }

  export type TeamCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamCreateWithoutUpdatedByUserInput>, Enumerable<TeamUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: TeamCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<TeamWhereUniqueInput>
  }

  export type TeamMemberCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutCreatedByUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutCreatedByUserInput>
    createMany?: TeamMemberCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<TeamMemberWhereUniqueInput>
  }

  export type TeamMemberCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutUpdatedByUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: TeamMemberCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<TeamMemberWhereUniqueInput>
  }

  export type ProjectCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutCreatedByUserInput>, Enumerable<ProjectUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutCreatedByUserInput>
    createMany?: ProjectCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type ProjectCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutUpdatedByUserInput>, Enumerable<ProjectUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: ProjectCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type EnvironmentCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutCreatedByUserInput>, Enumerable<EnvironmentUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutCreatedByUserInput>
    createMany?: EnvironmentCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<EnvironmentWhereUniqueInput>
  }

  export type EnvironmentCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutUpdatedByUserInput>, Enumerable<EnvironmentUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: EnvironmentCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<EnvironmentWhereUniqueInput>
  }

  export type ContractCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<ContractCreateWithoutCreatedByUserInput>, Enumerable<ContractUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutCreatedByUserInput>
    createMany?: ContractCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<ContractWhereUniqueInput>
  }

  export type ContractCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<ContractCreateWithoutUpdatedByUserInput>, Enumerable<ContractUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: ContractCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<ContractWhereUniqueInput>
  }

  export type TeamProjectCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutCreatedByUserInput>, Enumerable<TeamProjectUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutCreatedByUserInput>
    createMany?: TeamProjectCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<TeamProjectWhereUniqueInput>
  }

  export type TeamProjectCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutUpdatedByUserInput>, Enumerable<TeamProjectUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: TeamProjectCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<TeamProjectWhereUniqueInput>
  }

  export type UserActionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserActionCreateWithoutUserInput>, Enumerable<UserActionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserActionCreateOrConnectWithoutUserInput>
    createMany?: UserActionCreateManyUserInputEnvelope
    connect?: Enumerable<UserActionWhereUniqueInput>
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutUserInput>
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: Enumerable<TeamMemberWhereUniqueInput>
  }

  export type TeamUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamCreateWithoutCreatedByUserInput>, Enumerable<TeamUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamCreateOrConnectWithoutCreatedByUserInput>
    createMany?: TeamCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<TeamWhereUniqueInput>
  }

  export type TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamCreateWithoutUpdatedByUserInput>, Enumerable<TeamUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: TeamCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<TeamWhereUniqueInput>
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutCreatedByUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutCreatedByUserInput>
    createMany?: TeamMemberCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<TeamMemberWhereUniqueInput>
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutUpdatedByUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: TeamMemberCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<TeamMemberWhereUniqueInput>
  }

  export type ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutCreatedByUserInput>, Enumerable<ProjectUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutCreatedByUserInput>
    createMany?: ProjectCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutUpdatedByUserInput>, Enumerable<ProjectUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: ProjectCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<ProjectWhereUniqueInput>
  }

  export type EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutCreatedByUserInput>, Enumerable<EnvironmentUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutCreatedByUserInput>
    createMany?: EnvironmentCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<EnvironmentWhereUniqueInput>
  }

  export type EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutUpdatedByUserInput>, Enumerable<EnvironmentUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: EnvironmentCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<EnvironmentWhereUniqueInput>
  }

  export type ContractUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<ContractCreateWithoutCreatedByUserInput>, Enumerable<ContractUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutCreatedByUserInput>
    createMany?: ContractCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<ContractWhereUniqueInput>
  }

  export type ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<ContractCreateWithoutUpdatedByUserInput>, Enumerable<ContractUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: ContractCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<ContractWhereUniqueInput>
  }

  export type TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutCreatedByUserInput>, Enumerable<TeamProjectUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutCreatedByUserInput>
    createMany?: TeamProjectCreateManyCreatedByUserInputEnvelope
    connect?: Enumerable<TeamProjectWhereUniqueInput>
  }

  export type TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutUpdatedByUserInput>, Enumerable<TeamProjectUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutUpdatedByUserInput>
    createMany?: TeamProjectCreateManyUpdatedByUserInputEnvelope
    connect?: Enumerable<TeamProjectWhereUniqueInput>
  }

  export type UserActionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserActionCreateWithoutUserInput>, Enumerable<UserActionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserActionCreateOrConnectWithoutUserInput>
    createMany?: UserActionCreateManyUserInputEnvelope
    connect?: Enumerable<UserActionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TeamMemberUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TeamMemberUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: Enumerable<TeamMemberWhereUniqueInput>
    disconnect?: Enumerable<TeamMemberWhereUniqueInput>
    delete?: Enumerable<TeamMemberWhereUniqueInput>
    connect?: Enumerable<TeamMemberWhereUniqueInput>
    update?: Enumerable<TeamMemberUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TeamMemberUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TeamMemberScalarWhereInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TeamUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamCreateWithoutCreatedByUserInput>, Enumerable<TeamUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<TeamUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: TeamCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<TeamWhereUniqueInput>
    disconnect?: Enumerable<TeamWhereUniqueInput>
    delete?: Enumerable<TeamWhereUniqueInput>
    connect?: Enumerable<TeamWhereUniqueInput>
    update?: Enumerable<TeamUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<TeamUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<TeamScalarWhereInput>
  }

  export type TeamUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamCreateWithoutUpdatedByUserInput>, Enumerable<TeamUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<TeamUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: TeamCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<TeamWhereUniqueInput>
    disconnect?: Enumerable<TeamWhereUniqueInput>
    delete?: Enumerable<TeamWhereUniqueInput>
    connect?: Enumerable<TeamWhereUniqueInput>
    update?: Enumerable<TeamUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<TeamUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<TeamScalarWhereInput>
  }

  export type TeamMemberUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutCreatedByUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<TeamMemberUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: TeamMemberCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<TeamMemberWhereUniqueInput>
    disconnect?: Enumerable<TeamMemberWhereUniqueInput>
    delete?: Enumerable<TeamMemberWhereUniqueInput>
    connect?: Enumerable<TeamMemberWhereUniqueInput>
    update?: Enumerable<TeamMemberUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<TeamMemberUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<TeamMemberScalarWhereInput>
  }

  export type TeamMemberUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutUpdatedByUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<TeamMemberUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: TeamMemberCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<TeamMemberWhereUniqueInput>
    disconnect?: Enumerable<TeamMemberWhereUniqueInput>
    delete?: Enumerable<TeamMemberWhereUniqueInput>
    connect?: Enumerable<TeamMemberWhereUniqueInput>
    update?: Enumerable<TeamMemberUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<TeamMemberUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<TeamMemberScalarWhereInput>
  }

  export type ProjectUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutCreatedByUserInput>, Enumerable<ProjectUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: ProjectCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type ProjectUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutUpdatedByUserInput>, Enumerable<ProjectUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: ProjectCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type EnvironmentUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutCreatedByUserInput>, Enumerable<EnvironmentUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<EnvironmentUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: EnvironmentCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<EnvironmentWhereUniqueInput>
    disconnect?: Enumerable<EnvironmentWhereUniqueInput>
    delete?: Enumerable<EnvironmentWhereUniqueInput>
    connect?: Enumerable<EnvironmentWhereUniqueInput>
    update?: Enumerable<EnvironmentUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<EnvironmentUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<EnvironmentScalarWhereInput>
  }

  export type EnvironmentUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutUpdatedByUserInput>, Enumerable<EnvironmentUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<EnvironmentUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: EnvironmentCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<EnvironmentWhereUniqueInput>
    disconnect?: Enumerable<EnvironmentWhereUniqueInput>
    delete?: Enumerable<EnvironmentWhereUniqueInput>
    connect?: Enumerable<EnvironmentWhereUniqueInput>
    update?: Enumerable<EnvironmentUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<EnvironmentUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<EnvironmentScalarWhereInput>
  }

  export type ContractUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<ContractCreateWithoutCreatedByUserInput>, Enumerable<ContractUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<ContractUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: ContractCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<ContractWhereUniqueInput>
    disconnect?: Enumerable<ContractWhereUniqueInput>
    delete?: Enumerable<ContractWhereUniqueInput>
    connect?: Enumerable<ContractWhereUniqueInput>
    update?: Enumerable<ContractUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<ContractUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<ContractScalarWhereInput>
  }

  export type ContractUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<ContractCreateWithoutUpdatedByUserInput>, Enumerable<ContractUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<ContractUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: ContractCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<ContractWhereUniqueInput>
    disconnect?: Enumerable<ContractWhereUniqueInput>
    delete?: Enumerable<ContractWhereUniqueInput>
    connect?: Enumerable<ContractWhereUniqueInput>
    update?: Enumerable<ContractUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<ContractUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<ContractScalarWhereInput>
  }

  export type TeamProjectUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutCreatedByUserInput>, Enumerable<TeamProjectUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<TeamProjectUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: TeamProjectCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<TeamProjectWhereUniqueInput>
    disconnect?: Enumerable<TeamProjectWhereUniqueInput>
    delete?: Enumerable<TeamProjectWhereUniqueInput>
    connect?: Enumerable<TeamProjectWhereUniqueInput>
    update?: Enumerable<TeamProjectUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<TeamProjectUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<TeamProjectScalarWhereInput>
  }

  export type TeamProjectUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutUpdatedByUserInput>, Enumerable<TeamProjectUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<TeamProjectUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: TeamProjectCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<TeamProjectWhereUniqueInput>
    disconnect?: Enumerable<TeamProjectWhereUniqueInput>
    delete?: Enumerable<TeamProjectWhereUniqueInput>
    connect?: Enumerable<TeamProjectWhereUniqueInput>
    update?: Enumerable<TeamProjectUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<TeamProjectUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<TeamProjectScalarWhereInput>
  }

  export type UserActionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserActionCreateWithoutUserInput>, Enumerable<UserActionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserActionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserActionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserActionCreateManyUserInputEnvelope
    set?: Enumerable<UserActionWhereUniqueInput>
    disconnect?: Enumerable<UserActionWhereUniqueInput>
    delete?: Enumerable<UserActionWhereUniqueInput>
    connect?: Enumerable<UserActionWhereUniqueInput>
    update?: Enumerable<UserActionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserActionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserActionScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeamMemberUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TeamMemberUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: Enumerable<TeamMemberWhereUniqueInput>
    disconnect?: Enumerable<TeamMemberWhereUniqueInput>
    delete?: Enumerable<TeamMemberWhereUniqueInput>
    connect?: Enumerable<TeamMemberWhereUniqueInput>
    update?: Enumerable<TeamMemberUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TeamMemberUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TeamMemberScalarWhereInput>
  }

  export type TeamUncheckedUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamCreateWithoutCreatedByUserInput>, Enumerable<TeamUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<TeamUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: TeamCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<TeamWhereUniqueInput>
    disconnect?: Enumerable<TeamWhereUniqueInput>
    delete?: Enumerable<TeamWhereUniqueInput>
    connect?: Enumerable<TeamWhereUniqueInput>
    update?: Enumerable<TeamUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<TeamUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<TeamScalarWhereInput>
  }

  export type TeamUncheckedUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamCreateWithoutUpdatedByUserInput>, Enumerable<TeamUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<TeamUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: TeamCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<TeamWhereUniqueInput>
    disconnect?: Enumerable<TeamWhereUniqueInput>
    delete?: Enumerable<TeamWhereUniqueInput>
    connect?: Enumerable<TeamWhereUniqueInput>
    update?: Enumerable<TeamUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<TeamUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<TeamScalarWhereInput>
  }

  export type TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutCreatedByUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<TeamMemberUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: TeamMemberCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<TeamMemberWhereUniqueInput>
    disconnect?: Enumerable<TeamMemberWhereUniqueInput>
    delete?: Enumerable<TeamMemberWhereUniqueInput>
    connect?: Enumerable<TeamMemberWhereUniqueInput>
    update?: Enumerable<TeamMemberUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<TeamMemberUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<TeamMemberScalarWhereInput>
  }

  export type TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutUpdatedByUserInput>, Enumerable<TeamMemberUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<TeamMemberUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: TeamMemberCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<TeamMemberWhereUniqueInput>
    disconnect?: Enumerable<TeamMemberWhereUniqueInput>
    delete?: Enumerable<TeamMemberWhereUniqueInput>
    connect?: Enumerable<TeamMemberWhereUniqueInput>
    update?: Enumerable<TeamMemberUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<TeamMemberUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<TeamMemberScalarWhereInput>
  }

  export type ProjectUncheckedUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutCreatedByUserInput>, Enumerable<ProjectUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: ProjectCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type ProjectUncheckedUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<ProjectCreateWithoutUpdatedByUserInput>, Enumerable<ProjectUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: ProjectCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
  }

  export type EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutCreatedByUserInput>, Enumerable<EnvironmentUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<EnvironmentUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: EnvironmentCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<EnvironmentWhereUniqueInput>
    disconnect?: Enumerable<EnvironmentWhereUniqueInput>
    delete?: Enumerable<EnvironmentWhereUniqueInput>
    connect?: Enumerable<EnvironmentWhereUniqueInput>
    update?: Enumerable<EnvironmentUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<EnvironmentUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<EnvironmentScalarWhereInput>
  }

  export type EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutUpdatedByUserInput>, Enumerable<EnvironmentUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<EnvironmentUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: EnvironmentCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<EnvironmentWhereUniqueInput>
    disconnect?: Enumerable<EnvironmentWhereUniqueInput>
    delete?: Enumerable<EnvironmentWhereUniqueInput>
    connect?: Enumerable<EnvironmentWhereUniqueInput>
    update?: Enumerable<EnvironmentUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<EnvironmentUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<EnvironmentScalarWhereInput>
  }

  export type ContractUncheckedUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<ContractCreateWithoutCreatedByUserInput>, Enumerable<ContractUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<ContractUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: ContractCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<ContractWhereUniqueInput>
    disconnect?: Enumerable<ContractWhereUniqueInput>
    delete?: Enumerable<ContractWhereUniqueInput>
    connect?: Enumerable<ContractWhereUniqueInput>
    update?: Enumerable<ContractUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<ContractUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<ContractScalarWhereInput>
  }

  export type ContractUncheckedUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<ContractCreateWithoutUpdatedByUserInput>, Enumerable<ContractUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<ContractUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: ContractCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<ContractWhereUniqueInput>
    disconnect?: Enumerable<ContractWhereUniqueInput>
    delete?: Enumerable<ContractWhereUniqueInput>
    connect?: Enumerable<ContractWhereUniqueInput>
    update?: Enumerable<ContractUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<ContractUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<ContractScalarWhereInput>
  }

  export type TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutCreatedByUserInput>, Enumerable<TeamProjectUncheckedCreateWithoutCreatedByUserInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutCreatedByUserInput>
    upsert?: Enumerable<TeamProjectUpsertWithWhereUniqueWithoutCreatedByUserInput>
    createMany?: TeamProjectCreateManyCreatedByUserInputEnvelope
    set?: Enumerable<TeamProjectWhereUniqueInput>
    disconnect?: Enumerable<TeamProjectWhereUniqueInput>
    delete?: Enumerable<TeamProjectWhereUniqueInput>
    connect?: Enumerable<TeamProjectWhereUniqueInput>
    update?: Enumerable<TeamProjectUpdateWithWhereUniqueWithoutCreatedByUserInput>
    updateMany?: Enumerable<TeamProjectUpdateManyWithWhereWithoutCreatedByUserInput>
    deleteMany?: Enumerable<TeamProjectScalarWhereInput>
  }

  export type TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutUpdatedByUserInput>, Enumerable<TeamProjectUncheckedCreateWithoutUpdatedByUserInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutUpdatedByUserInput>
    upsert?: Enumerable<TeamProjectUpsertWithWhereUniqueWithoutUpdatedByUserInput>
    createMany?: TeamProjectCreateManyUpdatedByUserInputEnvelope
    set?: Enumerable<TeamProjectWhereUniqueInput>
    disconnect?: Enumerable<TeamProjectWhereUniqueInput>
    delete?: Enumerable<TeamProjectWhereUniqueInput>
    connect?: Enumerable<TeamProjectWhereUniqueInput>
    update?: Enumerable<TeamProjectUpdateWithWhereUniqueWithoutUpdatedByUserInput>
    updateMany?: Enumerable<TeamProjectUpdateManyWithWhereWithoutUpdatedByUserInput>
    deleteMany?: Enumerable<TeamProjectScalarWhereInput>
  }

  export type UserActionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserActionCreateWithoutUserInput>, Enumerable<UserActionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserActionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserActionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserActionCreateManyUserInputEnvelope
    set?: Enumerable<UserActionWhereUniqueInput>
    disconnect?: Enumerable<UserActionWhereUniqueInput>
    delete?: Enumerable<UserActionWhereUniqueInput>
    connect?: Enumerable<UserActionWhereUniqueInput>
    update?: Enumerable<UserActionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserActionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserActionScalarWhereInput>
  }

  export type TeamMemberCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutTeamInput>, Enumerable<TeamMemberUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutTeamInput>
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: Enumerable<TeamMemberWhereUniqueInput>
  }

  export type TeamProjectCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutTeamInput>, Enumerable<TeamProjectUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutTeamInput>
    createMany?: TeamProjectCreateManyTeamInputEnvelope
    connect?: Enumerable<TeamProjectWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutCreatedTeamsInput = {
    create?: XOR<UserCreateWithoutCreatedTeamsInput, UserUncheckedCreateWithoutCreatedTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTeamsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedTeamsInput = {
    create?: XOR<UserCreateWithoutUpdatedTeamsInput, UserUncheckedCreateWithoutUpdatedTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedTeamsInput
    connect?: UserWhereUniqueInput
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutTeamInput>, Enumerable<TeamMemberUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutTeamInput>
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: Enumerable<TeamMemberWhereUniqueInput>
  }

  export type TeamProjectUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutTeamInput>, Enumerable<TeamProjectUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutTeamInput>
    createMany?: TeamProjectCreateManyTeamInputEnvelope
    connect?: Enumerable<TeamProjectWhereUniqueInput>
  }

  export type TeamMemberUpdateManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutTeamInput>, Enumerable<TeamMemberUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<TeamMemberUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: Enumerable<TeamMemberWhereUniqueInput>
    disconnect?: Enumerable<TeamMemberWhereUniqueInput>
    delete?: Enumerable<TeamMemberWhereUniqueInput>
    connect?: Enumerable<TeamMemberWhereUniqueInput>
    update?: Enumerable<TeamMemberUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<TeamMemberUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<TeamMemberScalarWhereInput>
  }

  export type TeamProjectUpdateManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutTeamInput>, Enumerable<TeamProjectUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<TeamProjectUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: TeamProjectCreateManyTeamInputEnvelope
    set?: Enumerable<TeamProjectWhereUniqueInput>
    disconnect?: Enumerable<TeamProjectWhereUniqueInput>
    delete?: Enumerable<TeamProjectWhereUniqueInput>
    connect?: Enumerable<TeamProjectWhereUniqueInput>
    update?: Enumerable<TeamProjectUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<TeamProjectUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<TeamProjectScalarWhereInput>
  }

  export type UserUpdateOneWithoutCreatedTeamsInput = {
    create?: XOR<UserCreateWithoutCreatedTeamsInput, UserUncheckedCreateWithoutCreatedTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTeamsInput
    upsert?: UserUpsertWithoutCreatedTeamsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedTeamsInput, UserUncheckedUpdateWithoutCreatedTeamsInput>
  }

  export type UserUpdateOneWithoutUpdatedTeamsInput = {
    create?: XOR<UserCreateWithoutUpdatedTeamsInput, UserUncheckedCreateWithoutUpdatedTeamsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedTeamsInput
    upsert?: UserUpsertWithoutUpdatedTeamsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUpdatedTeamsInput, UserUncheckedUpdateWithoutUpdatedTeamsInput>
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamMemberCreateWithoutTeamInput>, Enumerable<TeamMemberUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamMemberCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<TeamMemberUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: Enumerable<TeamMemberWhereUniqueInput>
    disconnect?: Enumerable<TeamMemberWhereUniqueInput>
    delete?: Enumerable<TeamMemberWhereUniqueInput>
    connect?: Enumerable<TeamMemberWhereUniqueInput>
    update?: Enumerable<TeamMemberUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<TeamMemberUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<TeamMemberScalarWhereInput>
  }

  export type TeamProjectUncheckedUpdateManyWithoutTeamInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutTeamInput>, Enumerable<TeamProjectUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<TeamProjectUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: TeamProjectCreateManyTeamInputEnvelope
    set?: Enumerable<TeamProjectWhereUniqueInput>
    disconnect?: Enumerable<TeamProjectWhereUniqueInput>
    delete?: Enumerable<TeamProjectWhereUniqueInput>
    connect?: Enumerable<TeamProjectWhereUniqueInput>
    update?: Enumerable<TeamProjectUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<TeamProjectUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<TeamProjectScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutTeamMembersInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutTeamMembersInput = {
    create?: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamMembersInput
    connect?: TeamWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedTeamMembersInput = {
    create?: XOR<UserCreateWithoutCreatedTeamMembersInput, UserUncheckedCreateWithoutCreatedTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTeamMembersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedTeamMembersInput = {
    create?: XOR<UserCreateWithoutUpdatedTeamMembersInput, UserUncheckedCreateWithoutUpdatedTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedTeamMembersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTeamMembersInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    upsert?: UserUpsertWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
  }

  export type TeamUpdateOneRequiredWithoutTeamMembersInput = {
    create?: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamMembersInput
    upsert?: TeamUpsertWithoutTeamMembersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutTeamMembersInput, TeamUncheckedUpdateWithoutTeamMembersInput>
  }

  export type UserUpdateOneWithoutCreatedTeamMembersInput = {
    create?: XOR<UserCreateWithoutCreatedTeamMembersInput, UserUncheckedCreateWithoutCreatedTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTeamMembersInput
    upsert?: UserUpsertWithoutCreatedTeamMembersInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedTeamMembersInput, UserUncheckedUpdateWithoutCreatedTeamMembersInput>
  }

  export type UserUpdateOneWithoutUpdatedTeamMembersInput = {
    create?: XOR<UserCreateWithoutUpdatedTeamMembersInput, UserUncheckedCreateWithoutUpdatedTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedTeamMembersInput
    upsert?: UserUpsertWithoutUpdatedTeamMembersInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUpdatedTeamMembersInput, UserUncheckedUpdateWithoutUpdatedTeamMembersInput>
  }

  export type TeamProjectCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutProjectInput>, Enumerable<TeamProjectUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutProjectInput>
    createMany?: TeamProjectCreateManyProjectInputEnvelope
    connect?: Enumerable<TeamProjectWhereUniqueInput>
  }

  export type EnvironmentCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutProjectInput>, Enumerable<EnvironmentUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutProjectInput>
    createMany?: EnvironmentCreateManyProjectInputEnvelope
    connect?: Enumerable<EnvironmentWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutCreatedProjectsInput = {
    create?: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedProjectsInput = {
    create?: XOR<UserCreateWithoutUpdatedProjectsInput, UserUncheckedCreateWithoutUpdatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type TeamProjectUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutProjectInput>, Enumerable<TeamProjectUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutProjectInput>
    createMany?: TeamProjectCreateManyProjectInputEnvelope
    connect?: Enumerable<TeamProjectWhereUniqueInput>
  }

  export type EnvironmentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutProjectInput>, Enumerable<EnvironmentUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutProjectInput>
    createMany?: EnvironmentCreateManyProjectInputEnvelope
    connect?: Enumerable<EnvironmentWhereUniqueInput>
  }

  export type TeamProjectUpdateManyWithoutProjectInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutProjectInput>, Enumerable<TeamProjectUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<TeamProjectUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: TeamProjectCreateManyProjectInputEnvelope
    set?: Enumerable<TeamProjectWhereUniqueInput>
    disconnect?: Enumerable<TeamProjectWhereUniqueInput>
    delete?: Enumerable<TeamProjectWhereUniqueInput>
    connect?: Enumerable<TeamProjectWhereUniqueInput>
    update?: Enumerable<TeamProjectUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<TeamProjectUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<TeamProjectScalarWhereInput>
  }

  export type EnvironmentUpdateManyWithoutProjectInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutProjectInput>, Enumerable<EnvironmentUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<EnvironmentUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: EnvironmentCreateManyProjectInputEnvelope
    set?: Enumerable<EnvironmentWhereUniqueInput>
    disconnect?: Enumerable<EnvironmentWhereUniqueInput>
    delete?: Enumerable<EnvironmentWhereUniqueInput>
    connect?: Enumerable<EnvironmentWhereUniqueInput>
    update?: Enumerable<EnvironmentUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<EnvironmentUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<EnvironmentScalarWhereInput>
  }

  export type NullableEnumProjectTutorialFieldUpdateOperationsInput = {
    set?: ProjectTutorial | null
  }

  export type UserUpdateOneWithoutCreatedProjectsInput = {
    create?: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProjectsInput
    upsert?: UserUpsertWithoutCreatedProjectsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedProjectsInput, UserUncheckedUpdateWithoutCreatedProjectsInput>
  }

  export type UserUpdateOneWithoutUpdatedProjectsInput = {
    create?: XOR<UserCreateWithoutUpdatedProjectsInput, UserUncheckedCreateWithoutUpdatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedProjectsInput
    upsert?: UserUpsertWithoutUpdatedProjectsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUpdatedProjectsInput, UserUncheckedUpdateWithoutUpdatedProjectsInput>
  }

  export type TeamProjectUncheckedUpdateManyWithoutProjectInput = {
    create?: XOR<Enumerable<TeamProjectCreateWithoutProjectInput>, Enumerable<TeamProjectUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TeamProjectCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<TeamProjectUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: TeamProjectCreateManyProjectInputEnvelope
    set?: Enumerable<TeamProjectWhereUniqueInput>
    disconnect?: Enumerable<TeamProjectWhereUniqueInput>
    delete?: Enumerable<TeamProjectWhereUniqueInput>
    connect?: Enumerable<TeamProjectWhereUniqueInput>
    update?: Enumerable<TeamProjectUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<TeamProjectUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<TeamProjectScalarWhereInput>
  }

  export type EnvironmentUncheckedUpdateManyWithoutProjectInput = {
    create?: XOR<Enumerable<EnvironmentCreateWithoutProjectInput>, Enumerable<EnvironmentUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<EnvironmentCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<EnvironmentUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: EnvironmentCreateManyProjectInputEnvelope
    set?: Enumerable<EnvironmentWhereUniqueInput>
    disconnect?: Enumerable<EnvironmentWhereUniqueInput>
    delete?: Enumerable<EnvironmentWhereUniqueInput>
    connect?: Enumerable<EnvironmentWhereUniqueInput>
    update?: Enumerable<EnvironmentUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<EnvironmentUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<EnvironmentScalarWhereInput>
  }

  export type TeamCreateNestedOneWithoutTeamProjectsInput = {
    create?: XOR<TeamCreateWithoutTeamProjectsInput, TeamUncheckedCreateWithoutTeamProjectsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamProjectsInput
    connect?: TeamWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutTeamProjectsInput = {
    create?: XOR<ProjectCreateWithoutTeamProjectsInput, ProjectUncheckedCreateWithoutTeamProjectsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTeamProjectsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedTeamProjectInput = {
    create?: XOR<UserCreateWithoutCreatedTeamProjectInput, UserUncheckedCreateWithoutCreatedTeamProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTeamProjectInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedTeamProjectInput = {
    create?: XOR<UserCreateWithoutUpdatedTeamProjectInput, UserUncheckedCreateWithoutUpdatedTeamProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedTeamProjectInput
    connect?: UserWhereUniqueInput
  }

  export type TeamUpdateOneRequiredWithoutTeamProjectsInput = {
    create?: XOR<TeamCreateWithoutTeamProjectsInput, TeamUncheckedCreateWithoutTeamProjectsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamProjectsInput
    upsert?: TeamUpsertWithoutTeamProjectsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutTeamProjectsInput, TeamUncheckedUpdateWithoutTeamProjectsInput>
  }

  export type ProjectUpdateOneRequiredWithoutTeamProjectsInput = {
    create?: XOR<ProjectCreateWithoutTeamProjectsInput, ProjectUncheckedCreateWithoutTeamProjectsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTeamProjectsInput
    upsert?: ProjectUpsertWithoutTeamProjectsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutTeamProjectsInput, ProjectUncheckedUpdateWithoutTeamProjectsInput>
  }

  export type UserUpdateOneWithoutCreatedTeamProjectInput = {
    create?: XOR<UserCreateWithoutCreatedTeamProjectInput, UserUncheckedCreateWithoutCreatedTeamProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTeamProjectInput
    upsert?: UserUpsertWithoutCreatedTeamProjectInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedTeamProjectInput, UserUncheckedUpdateWithoutCreatedTeamProjectInput>
  }

  export type UserUpdateOneWithoutUpdatedTeamProjectInput = {
    create?: XOR<UserCreateWithoutUpdatedTeamProjectInput, UserUncheckedCreateWithoutUpdatedTeamProjectInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedTeamProjectInput
    upsert?: UserUpsertWithoutUpdatedTeamProjectInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUpdatedTeamProjectInput, UserUncheckedUpdateWithoutUpdatedTeamProjectInput>
  }

  export type EnvironmentCreateNestedOneWithoutApiKeysInput = {
    create?: XOR<EnvironmentCreateWithoutApiKeysInput, EnvironmentUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: EnvironmentCreateOrConnectWithoutApiKeysInput
    connect?: EnvironmentWhereUniqueInput
  }

  export type EnumNetFieldUpdateOperationsInput = {
    set?: Net
  }

  export type EnvironmentUpdateOneRequiredWithoutApiKeysInput = {
    create?: XOR<EnvironmentCreateWithoutApiKeysInput, EnvironmentUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: EnvironmentCreateOrConnectWithoutApiKeysInput
    upsert?: EnvironmentUpsertWithoutApiKeysInput
    connect?: EnvironmentWhereUniqueInput
    update?: XOR<EnvironmentUpdateWithoutApiKeysInput, EnvironmentUncheckedUpdateWithoutApiKeysInput>
  }

  export type ProjectCreateNestedOneWithoutEnvironmentsInput = {
    create?: XOR<ProjectCreateWithoutEnvironmentsInput, ProjectUncheckedCreateWithoutEnvironmentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutEnvironmentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ApiKeyCreateNestedManyWithoutEnvironmentInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutEnvironmentInput>, Enumerable<ApiKeyUncheckedCreateWithoutEnvironmentInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutEnvironmentInput>
    createMany?: ApiKeyCreateManyEnvironmentInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type ContractCreateNestedManyWithoutEnvironmentInput = {
    create?: XOR<Enumerable<ContractCreateWithoutEnvironmentInput>, Enumerable<ContractUncheckedCreateWithoutEnvironmentInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutEnvironmentInput>
    createMany?: ContractCreateManyEnvironmentInputEnvelope
    connect?: Enumerable<ContractWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutCreatedEnvironmentsInput = {
    create?: XOR<UserCreateWithoutCreatedEnvironmentsInput, UserUncheckedCreateWithoutCreatedEnvironmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEnvironmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedEnvironmentsInput = {
    create?: XOR<UserCreateWithoutUpdatedEnvironmentsInput, UserUncheckedCreateWithoutUpdatedEnvironmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedEnvironmentsInput
    connect?: UserWhereUniqueInput
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutEnvironmentInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutEnvironmentInput>, Enumerable<ApiKeyUncheckedCreateWithoutEnvironmentInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutEnvironmentInput>
    createMany?: ApiKeyCreateManyEnvironmentInputEnvelope
    connect?: Enumerable<ApiKeyWhereUniqueInput>
  }

  export type ContractUncheckedCreateNestedManyWithoutEnvironmentInput = {
    create?: XOR<Enumerable<ContractCreateWithoutEnvironmentInput>, Enumerable<ContractUncheckedCreateWithoutEnvironmentInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutEnvironmentInput>
    createMany?: ContractCreateManyEnvironmentInputEnvelope
    connect?: Enumerable<ContractWhereUniqueInput>
  }

  export type ProjectUpdateOneRequiredWithoutEnvironmentsInput = {
    create?: XOR<ProjectCreateWithoutEnvironmentsInput, ProjectUncheckedCreateWithoutEnvironmentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutEnvironmentsInput
    upsert?: ProjectUpsertWithoutEnvironmentsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutEnvironmentsInput, ProjectUncheckedUpdateWithoutEnvironmentsInput>
  }

  export type ApiKeyUpdateManyWithoutEnvironmentInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutEnvironmentInput>, Enumerable<ApiKeyUncheckedCreateWithoutEnvironmentInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutEnvironmentInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutEnvironmentInput>
    createMany?: ApiKeyCreateManyEnvironmentInputEnvelope
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutEnvironmentInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutEnvironmentInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type ContractUpdateManyWithoutEnvironmentInput = {
    create?: XOR<Enumerable<ContractCreateWithoutEnvironmentInput>, Enumerable<ContractUncheckedCreateWithoutEnvironmentInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutEnvironmentInput>
    upsert?: Enumerable<ContractUpsertWithWhereUniqueWithoutEnvironmentInput>
    createMany?: ContractCreateManyEnvironmentInputEnvelope
    set?: Enumerable<ContractWhereUniqueInput>
    disconnect?: Enumerable<ContractWhereUniqueInput>
    delete?: Enumerable<ContractWhereUniqueInput>
    connect?: Enumerable<ContractWhereUniqueInput>
    update?: Enumerable<ContractUpdateWithWhereUniqueWithoutEnvironmentInput>
    updateMany?: Enumerable<ContractUpdateManyWithWhereWithoutEnvironmentInput>
    deleteMany?: Enumerable<ContractScalarWhereInput>
  }

  export type UserUpdateOneWithoutCreatedEnvironmentsInput = {
    create?: XOR<UserCreateWithoutCreatedEnvironmentsInput, UserUncheckedCreateWithoutCreatedEnvironmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEnvironmentsInput
    upsert?: UserUpsertWithoutCreatedEnvironmentsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedEnvironmentsInput, UserUncheckedUpdateWithoutCreatedEnvironmentsInput>
  }

  export type UserUpdateOneWithoutUpdatedEnvironmentsInput = {
    create?: XOR<UserCreateWithoutUpdatedEnvironmentsInput, UserUncheckedCreateWithoutUpdatedEnvironmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedEnvironmentsInput
    upsert?: UserUpsertWithoutUpdatedEnvironmentsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUpdatedEnvironmentsInput, UserUncheckedUpdateWithoutUpdatedEnvironmentsInput>
  }

  export type ApiKeyUncheckedUpdateManyWithoutEnvironmentInput = {
    create?: XOR<Enumerable<ApiKeyCreateWithoutEnvironmentInput>, Enumerable<ApiKeyUncheckedCreateWithoutEnvironmentInput>>
    connectOrCreate?: Enumerable<ApiKeyCreateOrConnectWithoutEnvironmentInput>
    upsert?: Enumerable<ApiKeyUpsertWithWhereUniqueWithoutEnvironmentInput>
    createMany?: ApiKeyCreateManyEnvironmentInputEnvelope
    set?: Enumerable<ApiKeyWhereUniqueInput>
    disconnect?: Enumerable<ApiKeyWhereUniqueInput>
    delete?: Enumerable<ApiKeyWhereUniqueInput>
    connect?: Enumerable<ApiKeyWhereUniqueInput>
    update?: Enumerable<ApiKeyUpdateWithWhereUniqueWithoutEnvironmentInput>
    updateMany?: Enumerable<ApiKeyUpdateManyWithWhereWithoutEnvironmentInput>
    deleteMany?: Enumerable<ApiKeyScalarWhereInput>
  }

  export type ContractUncheckedUpdateManyWithoutEnvironmentInput = {
    create?: XOR<Enumerable<ContractCreateWithoutEnvironmentInput>, Enumerable<ContractUncheckedCreateWithoutEnvironmentInput>>
    connectOrCreate?: Enumerable<ContractCreateOrConnectWithoutEnvironmentInput>
    upsert?: Enumerable<ContractUpsertWithWhereUniqueWithoutEnvironmentInput>
    createMany?: ContractCreateManyEnvironmentInputEnvelope
    set?: Enumerable<ContractWhereUniqueInput>
    disconnect?: Enumerable<ContractWhereUniqueInput>
    delete?: Enumerable<ContractWhereUniqueInput>
    connect?: Enumerable<ContractWhereUniqueInput>
    update?: Enumerable<ContractUpdateWithWhereUniqueWithoutEnvironmentInput>
    updateMany?: Enumerable<ContractUpdateManyWithWhereWithoutEnvironmentInput>
    deleteMany?: Enumerable<ContractScalarWhereInput>
  }

  export type EnvironmentCreateNestedOneWithoutContractsInput = {
    create?: XOR<EnvironmentCreateWithoutContractsInput, EnvironmentUncheckedCreateWithoutContractsInput>
    connectOrCreate?: EnvironmentCreateOrConnectWithoutContractsInput
    connect?: EnvironmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedContractsInput = {
    create?: XOR<UserCreateWithoutCreatedContractsInput, UserUncheckedCreateWithoutCreatedContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedContractsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedContractsInput = {
    create?: XOR<UserCreateWithoutUpdatedContractsInput, UserUncheckedCreateWithoutUpdatedContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedContractsInput
    connect?: UserWhereUniqueInput
  }

  export type EnvironmentUpdateOneRequiredWithoutContractsInput = {
    create?: XOR<EnvironmentCreateWithoutContractsInput, EnvironmentUncheckedCreateWithoutContractsInput>
    connectOrCreate?: EnvironmentCreateOrConnectWithoutContractsInput
    upsert?: EnvironmentUpsertWithoutContractsInput
    connect?: EnvironmentWhereUniqueInput
    update?: XOR<EnvironmentUpdateWithoutContractsInput, EnvironmentUncheckedUpdateWithoutContractsInput>
  }

  export type UserUpdateOneWithoutCreatedContractsInput = {
    create?: XOR<UserCreateWithoutCreatedContractsInput, UserUncheckedCreateWithoutCreatedContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedContractsInput
    upsert?: UserUpsertWithoutCreatedContractsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCreatedContractsInput, UserUncheckedUpdateWithoutCreatedContractsInput>
  }

  export type UserUpdateOneWithoutUpdatedContractsInput = {
    create?: XOR<UserCreateWithoutUpdatedContractsInput, UserUncheckedCreateWithoutUpdatedContractsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedContractsInput
    upsert?: UserUpsertWithoutUpdatedContractsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUpdatedContractsInput, UserUncheckedUpdateWithoutUpdatedContractsInput>
  }

  export type UserCreateNestedOneWithoutUserActionsInput = {
    create?: XOR<UserCreateWithoutUserActionsInput, UserUncheckedCreateWithoutUserActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserActionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumUserActionTypeFieldUpdateOperationsInput = {
    set?: UserActionType
  }

  export type UserUpdateOneRequiredWithoutUserActionsInput = {
    create?: XOR<UserCreateWithoutUserActionsInput, UserUncheckedCreateWithoutUserActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserActionsInput
    upsert?: UserUpsertWithoutUserActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserActionsInput, UserUncheckedUpdateWithoutUserActionsInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumProjectTutorialNullableFilter = {
    equals?: ProjectTutorial | null
    in?: Enumerable<ProjectTutorial> | null
    notIn?: Enumerable<ProjectTutorial> | null
    not?: NestedEnumProjectTutorialNullableFilter | ProjectTutorial | null
  }

  export type NestedEnumProjectTutorialNullableWithAggregatesFilter = {
    equals?: ProjectTutorial | null
    in?: Enumerable<ProjectTutorial> | null
    notIn?: Enumerable<ProjectTutorial> | null
    not?: NestedEnumProjectTutorialNullableWithAggregatesFilter | ProjectTutorial | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumProjectTutorialNullableFilter
    _max?: NestedEnumProjectTutorialNullableFilter
  }

  export type NestedEnumNetFilter = {
    equals?: Net
    in?: Enumerable<Net>
    notIn?: Enumerable<Net>
    not?: NestedEnumNetFilter | Net
  }

  export type NestedEnumNetWithAggregatesFilter = {
    equals?: Net
    in?: Enumerable<Net>
    notIn?: Enumerable<Net>
    not?: NestedEnumNetWithAggregatesFilter | Net
    _count?: NestedIntFilter
    _min?: NestedEnumNetFilter
    _max?: NestedEnumNetFilter
  }

  export type NestedEnumUserActionTypeFilter = {
    equals?: UserActionType
    in?: Enumerable<UserActionType>
    notIn?: Enumerable<UserActionType>
    not?: NestedEnumUserActionTypeFilter | UserActionType
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumUserActionTypeWithAggregatesFilter = {
    equals?: UserActionType
    in?: Enumerable<UserActionType>
    notIn?: Enumerable<UserActionType>
    not?: NestedEnumUserActionTypeWithAggregatesFilter | UserActionType
    _count?: NestedIntFilter
    _min?: NestedEnumUserActionTypeFilter
    _max?: NestedEnumUserActionTypeFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type TeamMemberCreateWithoutUserInput = {
    team: TeamCreateNestedOneWithoutTeamMembersInput
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamMembersInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamMembersInput
    updatedAt?: Date | string | null
  }

  export type TeamMemberUncheckedCreateWithoutUserInput = {
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamMemberCreateOrConnectWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberCreateManyUserInputEnvelope = {
    data: Enumerable<TeamMemberCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutCreatedByUserInput = {
    name: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutTeamInput
    teamProjects?: TeamProjectCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamsInput
    updatedAt?: Date | string | null
  }

  export type TeamUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    name: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    teamProjects?: TeamProjectUncheckedCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamCreateOrConnectWithoutCreatedByUserInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutCreatedByUserInput, TeamUncheckedCreateWithoutCreatedByUserInput>
  }

  export type TeamCreateManyCreatedByUserInputEnvelope = {
    data: Enumerable<TeamCreateManyCreatedByUserInput>
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutUpdatedByUserInput = {
    name: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutTeamInput
    teamProjects?: TeamProjectCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamsInput
    updatedAt?: Date | string | null
  }

  export type TeamUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    name: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    teamProjects?: TeamProjectUncheckedCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type TeamCreateOrConnectWithoutUpdatedByUserInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutUpdatedByUserInput, TeamUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type TeamCreateManyUpdatedByUserInputEnvelope = {
    data: Enumerable<TeamCreateManyUpdatedByUserInput>
    skipDuplicates?: boolean
  }

  export type TeamMemberCreateWithoutCreatedByUserInput = {
    user: UserCreateNestedOneWithoutTeamMembersInput
    team: TeamCreateNestedOneWithoutTeamMembersInput
    active?: boolean
    createdAt?: Date | string | null
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamMembersInput
    updatedAt?: Date | string | null
  }

  export type TeamMemberUncheckedCreateWithoutCreatedByUserInput = {
    userId: number
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamMemberCreateOrConnectWithoutCreatedByUserInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutCreatedByUserInput, TeamMemberUncheckedCreateWithoutCreatedByUserInput>
  }

  export type TeamMemberCreateManyCreatedByUserInputEnvelope = {
    data: Enumerable<TeamMemberCreateManyCreatedByUserInput>
    skipDuplicates?: boolean
  }

  export type TeamMemberCreateWithoutUpdatedByUserInput = {
    user: UserCreateNestedOneWithoutTeamMembersInput
    team: TeamCreateNestedOneWithoutTeamMembersInput
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamMembersInput
    updatedAt?: Date | string | null
  }

  export type TeamMemberUncheckedCreateWithoutUpdatedByUserInput = {
    userId: number
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type TeamMemberCreateOrConnectWithoutUpdatedByUserInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutUpdatedByUserInput, TeamMemberUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type TeamMemberCreateManyUpdatedByUserInputEnvelope = {
    data: Enumerable<TeamMemberCreateManyUpdatedByUserInput>
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutCreatedByUserInput = {
    name: string
    slug: string
    active?: boolean
    teamProjects?: TeamProjectCreateNestedManyWithoutProjectInput
    environments?: EnvironmentCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    updatedByUser?: UserCreateNestedOneWithoutUpdatedProjectsInput
    updatedAt?: Date | string | null
  }

  export type ProjectUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    name: string
    slug: string
    active?: boolean
    teamProjects?: TeamProjectUncheckedCreateNestedManyWithoutProjectInput
    environments?: EnvironmentUncheckedCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ProjectCreateOrConnectWithoutCreatedByUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCreatedByUserInput, ProjectUncheckedCreateWithoutCreatedByUserInput>
  }

  export type ProjectCreateManyCreatedByUserInputEnvelope = {
    data: Enumerable<ProjectCreateManyCreatedByUserInput>
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutUpdatedByUserInput = {
    name: string
    slug: string
    active?: boolean
    teamProjects?: TeamProjectCreateNestedManyWithoutProjectInput
    environments?: EnvironmentCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedProjectsInput
    updatedAt?: Date | string | null
  }

  export type ProjectUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    name: string
    slug: string
    active?: boolean
    teamProjects?: TeamProjectUncheckedCreateNestedManyWithoutProjectInput
    environments?: EnvironmentUncheckedCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type ProjectCreateOrConnectWithoutUpdatedByUserInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUpdatedByUserInput, ProjectUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type ProjectCreateManyUpdatedByUserInputEnvelope = {
    data: Enumerable<ProjectCreateManyUpdatedByUserInput>
    skipDuplicates?: boolean
  }

  export type EnvironmentCreateWithoutCreatedByUserInput = {
    name: string
    project: ProjectCreateNestedOneWithoutEnvironmentsInput
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyCreateNestedManyWithoutEnvironmentInput
    contracts?: ContractCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    updatedByUser?: UserCreateNestedOneWithoutUpdatedEnvironmentsInput
    updatedAt?: Date | string | null
  }

  export type EnvironmentUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    name: string
    projectId: number
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutEnvironmentInput
    contracts?: ContractUncheckedCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type EnvironmentCreateOrConnectWithoutCreatedByUserInput = {
    where: EnvironmentWhereUniqueInput
    create: XOR<EnvironmentCreateWithoutCreatedByUserInput, EnvironmentUncheckedCreateWithoutCreatedByUserInput>
  }

  export type EnvironmentCreateManyCreatedByUserInputEnvelope = {
    data: Enumerable<EnvironmentCreateManyCreatedByUserInput>
    skipDuplicates?: boolean
  }

  export type EnvironmentCreateWithoutUpdatedByUserInput = {
    name: string
    project: ProjectCreateNestedOneWithoutEnvironmentsInput
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyCreateNestedManyWithoutEnvironmentInput
    contracts?: ContractCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedEnvironmentsInput
    updatedAt?: Date | string | null
  }

  export type EnvironmentUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    name: string
    projectId: number
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutEnvironmentInput
    contracts?: ContractUncheckedCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type EnvironmentCreateOrConnectWithoutUpdatedByUserInput = {
    where: EnvironmentWhereUniqueInput
    create: XOR<EnvironmentCreateWithoutUpdatedByUserInput, EnvironmentUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type EnvironmentCreateManyUpdatedByUserInputEnvelope = {
    data: Enumerable<EnvironmentCreateManyUpdatedByUserInput>
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutCreatedByUserInput = {
    environment: EnvironmentCreateNestedOneWithoutContractsInput
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    updatedByUser?: UserCreateNestedOneWithoutUpdatedContractsInput
    updatedAt?: Date | string | null
  }

  export type ContractUncheckedCreateWithoutCreatedByUserInput = {
    id?: number
    environmentId: number
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ContractCreateOrConnectWithoutCreatedByUserInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutCreatedByUserInput, ContractUncheckedCreateWithoutCreatedByUserInput>
  }

  export type ContractCreateManyCreatedByUserInputEnvelope = {
    data: Enumerable<ContractCreateManyCreatedByUserInput>
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutUpdatedByUserInput = {
    environment: EnvironmentCreateNestedOneWithoutContractsInput
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedContractsInput
    updatedAt?: Date | string | null
  }

  export type ContractUncheckedCreateWithoutUpdatedByUserInput = {
    id?: number
    environmentId: number
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type ContractCreateOrConnectWithoutUpdatedByUserInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutUpdatedByUserInput, ContractUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type ContractCreateManyUpdatedByUserInputEnvelope = {
    data: Enumerable<ContractCreateManyUpdatedByUserInput>
    skipDuplicates?: boolean
  }

  export type TeamProjectCreateWithoutCreatedByUserInput = {
    team: TeamCreateNestedOneWithoutTeamProjectsInput
    project: ProjectCreateNestedOneWithoutTeamProjectsInput
    active?: boolean
    createdAt?: Date | string | null
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamProjectInput
    updatedAt?: Date | string | null
  }

  export type TeamProjectUncheckedCreateWithoutCreatedByUserInput = {
    teamId: number
    projectId: number
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamProjectCreateOrConnectWithoutCreatedByUserInput = {
    where: TeamProjectWhereUniqueInput
    create: XOR<TeamProjectCreateWithoutCreatedByUserInput, TeamProjectUncheckedCreateWithoutCreatedByUserInput>
  }

  export type TeamProjectCreateManyCreatedByUserInputEnvelope = {
    data: Enumerable<TeamProjectCreateManyCreatedByUserInput>
    skipDuplicates?: boolean
  }

  export type TeamProjectCreateWithoutUpdatedByUserInput = {
    team: TeamCreateNestedOneWithoutTeamProjectsInput
    project: ProjectCreateNestedOneWithoutTeamProjectsInput
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamProjectInput
    updatedAt?: Date | string | null
  }

  export type TeamProjectUncheckedCreateWithoutUpdatedByUserInput = {
    teamId: number
    projectId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type TeamProjectCreateOrConnectWithoutUpdatedByUserInput = {
    where: TeamProjectWhereUniqueInput
    create: XOR<TeamProjectCreateWithoutUpdatedByUserInput, TeamProjectUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type TeamProjectCreateManyUpdatedByUserInputEnvelope = {
    data: Enumerable<TeamProjectCreateManyUpdatedByUserInput>
    skipDuplicates?: boolean
  }

  export type UserActionCreateWithoutUserInput = {
    action: UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    actionTimestamp?: Date | string
  }

  export type UserActionUncheckedCreateWithoutUserInput = {
    id?: number
    action: UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    actionTimestamp?: Date | string
  }

  export type UserActionCreateOrConnectWithoutUserInput = {
    where: UserActionWhereUniqueInput
    create: XOR<UserActionCreateWithoutUserInput, UserActionUncheckedCreateWithoutUserInput>
  }

  export type UserActionCreateManyUserInputEnvelope = {
    data: Enumerable<UserActionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutUserInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutTeamMembersInput>
  }

  export type TeamMemberScalarWhereInput = {
    AND?: Enumerable<TeamMemberScalarWhereInput>
    OR?: Enumerable<TeamMemberScalarWhereInput>
    NOT?: Enumerable<TeamMemberScalarWhereInput>
    userId?: IntFilter | number
    teamId?: IntFilter | number
    active?: BoolFilter | boolean
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdBy?: IntNullableFilter | number | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type TeamUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutCreatedByUserInput, TeamUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<TeamCreateWithoutCreatedByUserInput, TeamUncheckedCreateWithoutCreatedByUserInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutCreatedByUserInput, TeamUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type TeamUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutCreatedTeamsInput>
  }

  export type TeamScalarWhereInput = {
    AND?: Enumerable<TeamScalarWhereInput>
    OR?: Enumerable<TeamScalarWhereInput>
    NOT?: Enumerable<TeamScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    active?: BoolFilter | boolean
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdBy?: IntNullableFilter | number | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type TeamUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutUpdatedByUserInput, TeamUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<TeamCreateWithoutUpdatedByUserInput, TeamUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutUpdatedByUserInput, TeamUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type TeamUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutUpdatedTeamsInput>
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutCreatedByUserInput, TeamMemberUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<TeamMemberCreateWithoutCreatedByUserInput, TeamMemberUncheckedCreateWithoutCreatedByUserInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutCreatedByUserInput, TeamMemberUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutCreatedTeamMembersInput>
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutUpdatedByUserInput, TeamMemberUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<TeamMemberCreateWithoutUpdatedByUserInput, TeamMemberUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutUpdatedByUserInput, TeamMemberUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutUpdatedTeamMembersInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutCreatedByUserInput, ProjectUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<ProjectCreateWithoutCreatedByUserInput, ProjectUncheckedCreateWithoutCreatedByUserInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutCreatedByUserInput, ProjectUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type ProjectUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutCreatedProjectsInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: Enumerable<ProjectScalarWhereInput>
    OR?: Enumerable<ProjectScalarWhereInput>
    NOT?: Enumerable<ProjectScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    slug?: StringFilter | string
    active?: BoolFilter | boolean
    tutorial?: EnumProjectTutorialNullableFilter | ProjectTutorial | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdBy?: IntNullableFilter | number | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type ProjectUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutUpdatedByUserInput, ProjectUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<ProjectCreateWithoutUpdatedByUserInput, ProjectUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutUpdatedByUserInput, ProjectUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type ProjectUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutUpdatedProjectsInput>
  }

  export type EnvironmentUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: EnvironmentWhereUniqueInput
    update: XOR<EnvironmentUpdateWithoutCreatedByUserInput, EnvironmentUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<EnvironmentCreateWithoutCreatedByUserInput, EnvironmentUncheckedCreateWithoutCreatedByUserInput>
  }

  export type EnvironmentUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: EnvironmentWhereUniqueInput
    data: XOR<EnvironmentUpdateWithoutCreatedByUserInput, EnvironmentUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type EnvironmentUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: EnvironmentScalarWhereInput
    data: XOR<EnvironmentUpdateManyMutationInput, EnvironmentUncheckedUpdateManyWithoutCreatedEnvironmentsInput>
  }

  export type EnvironmentScalarWhereInput = {
    AND?: Enumerable<EnvironmentScalarWhereInput>
    OR?: Enumerable<EnvironmentScalarWhereInput>
    NOT?: Enumerable<EnvironmentScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    projectId?: IntFilter | number
    net?: EnumNetFilter | Net
    subId?: IntFilter | number
    active?: BoolFilter | boolean
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdBy?: IntNullableFilter | number | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type EnvironmentUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: EnvironmentWhereUniqueInput
    update: XOR<EnvironmentUpdateWithoutUpdatedByUserInput, EnvironmentUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<EnvironmentCreateWithoutUpdatedByUserInput, EnvironmentUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type EnvironmentUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: EnvironmentWhereUniqueInput
    data: XOR<EnvironmentUpdateWithoutUpdatedByUserInput, EnvironmentUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type EnvironmentUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: EnvironmentScalarWhereInput
    data: XOR<EnvironmentUpdateManyMutationInput, EnvironmentUncheckedUpdateManyWithoutUpdatedEnvironmentsInput>
  }

  export type ContractUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutCreatedByUserInput, ContractUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<ContractCreateWithoutCreatedByUserInput, ContractUncheckedCreateWithoutCreatedByUserInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutCreatedByUserInput, ContractUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type ContractUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutCreatedContractsInput>
  }

  export type ContractScalarWhereInput = {
    AND?: Enumerable<ContractScalarWhereInput>
    OR?: Enumerable<ContractScalarWhereInput>
    NOT?: Enumerable<ContractScalarWhereInput>
    id?: IntFilter | number
    environmentId?: IntFilter | number
    address?: StringFilter | string
    net?: EnumNetFilter | Net
    active?: BoolFilter | boolean
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdBy?: IntNullableFilter | number | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type ContractUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutUpdatedByUserInput, ContractUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<ContractCreateWithoutUpdatedByUserInput, ContractUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutUpdatedByUserInput, ContractUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type ContractUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutUpdatedContractsInput>
  }

  export type TeamProjectUpsertWithWhereUniqueWithoutCreatedByUserInput = {
    where: TeamProjectWhereUniqueInput
    update: XOR<TeamProjectUpdateWithoutCreatedByUserInput, TeamProjectUncheckedUpdateWithoutCreatedByUserInput>
    create: XOR<TeamProjectCreateWithoutCreatedByUserInput, TeamProjectUncheckedCreateWithoutCreatedByUserInput>
  }

  export type TeamProjectUpdateWithWhereUniqueWithoutCreatedByUserInput = {
    where: TeamProjectWhereUniqueInput
    data: XOR<TeamProjectUpdateWithoutCreatedByUserInput, TeamProjectUncheckedUpdateWithoutCreatedByUserInput>
  }

  export type TeamProjectUpdateManyWithWhereWithoutCreatedByUserInput = {
    where: TeamProjectScalarWhereInput
    data: XOR<TeamProjectUpdateManyMutationInput, TeamProjectUncheckedUpdateManyWithoutCreatedTeamProjectInput>
  }

  export type TeamProjectScalarWhereInput = {
    AND?: Enumerable<TeamProjectScalarWhereInput>
    OR?: Enumerable<TeamProjectScalarWhereInput>
    NOT?: Enumerable<TeamProjectScalarWhereInput>
    teamId?: IntFilter | number
    projectId?: IntFilter | number
    active?: BoolFilter | boolean
    createdAt?: DateTimeNullableFilter | Date | string | null
    createdBy?: IntNullableFilter | number | null
    updatedAt?: DateTimeNullableFilter | Date | string | null
    updatedBy?: IntNullableFilter | number | null
  }

  export type TeamProjectUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
    where: TeamProjectWhereUniqueInput
    update: XOR<TeamProjectUpdateWithoutUpdatedByUserInput, TeamProjectUncheckedUpdateWithoutUpdatedByUserInput>
    create: XOR<TeamProjectCreateWithoutUpdatedByUserInput, TeamProjectUncheckedCreateWithoutUpdatedByUserInput>
  }

  export type TeamProjectUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
    where: TeamProjectWhereUniqueInput
    data: XOR<TeamProjectUpdateWithoutUpdatedByUserInput, TeamProjectUncheckedUpdateWithoutUpdatedByUserInput>
  }

  export type TeamProjectUpdateManyWithWhereWithoutUpdatedByUserInput = {
    where: TeamProjectScalarWhereInput
    data: XOR<TeamProjectUpdateManyMutationInput, TeamProjectUncheckedUpdateManyWithoutUpdatedTeamProjectInput>
  }

  export type UserActionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserActionWhereUniqueInput
    update: XOR<UserActionUpdateWithoutUserInput, UserActionUncheckedUpdateWithoutUserInput>
    create: XOR<UserActionCreateWithoutUserInput, UserActionUncheckedCreateWithoutUserInput>
  }

  export type UserActionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserActionWhereUniqueInput
    data: XOR<UserActionUpdateWithoutUserInput, UserActionUncheckedUpdateWithoutUserInput>
  }

  export type UserActionUpdateManyWithWhereWithoutUserInput = {
    where: UserActionScalarWhereInput
    data: XOR<UserActionUpdateManyMutationInput, UserActionUncheckedUpdateManyWithoutUserActionsInput>
  }

  export type UserActionScalarWhereInput = {
    AND?: Enumerable<UserActionScalarWhereInput>
    OR?: Enumerable<UserActionScalarWhereInput>
    NOT?: Enumerable<UserActionScalarWhereInput>
    id?: IntFilter | number
    action?: EnumUserActionTypeFilter | UserActionType
    data?: JsonNullableFilter
    userId?: IntFilter | number
    actionTimestamp?: DateTimeFilter | Date | string
  }

  export type TeamMemberCreateWithoutTeamInput = {
    user: UserCreateNestedOneWithoutTeamMembersInput
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamMembersInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamMembersInput
    updatedAt?: Date | string | null
  }

  export type TeamMemberUncheckedCreateWithoutTeamInput = {
    userId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamMemberCreateOrConnectWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberCreateManyTeamInputEnvelope = {
    data: Enumerable<TeamMemberCreateManyTeamInput>
    skipDuplicates?: boolean
  }

  export type TeamProjectCreateWithoutTeamInput = {
    project: ProjectCreateNestedOneWithoutTeamProjectsInput
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamProjectInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamProjectInput
    updatedAt?: Date | string | null
  }

  export type TeamProjectUncheckedCreateWithoutTeamInput = {
    projectId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamProjectCreateOrConnectWithoutTeamInput = {
    where: TeamProjectWhereUniqueInput
    create: XOR<TeamProjectCreateWithoutTeamInput, TeamProjectUncheckedCreateWithoutTeamInput>
  }

  export type TeamProjectCreateManyTeamInputEnvelope = {
    data: Enumerable<TeamProjectCreateManyTeamInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedTeamsInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedTeamsInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedTeamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTeamsInput, UserUncheckedCreateWithoutCreatedTeamsInput>
  }

  export type UserCreateWithoutUpdatedTeamsInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedTeamsInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedTeamsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedTeamsInput, UserUncheckedCreateWithoutUpdatedTeamsInput>
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutTeamInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutTeamMembersInput>
  }

  export type TeamProjectUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamProjectWhereUniqueInput
    update: XOR<TeamProjectUpdateWithoutTeamInput, TeamProjectUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamProjectCreateWithoutTeamInput, TeamProjectUncheckedCreateWithoutTeamInput>
  }

  export type TeamProjectUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamProjectWhereUniqueInput
    data: XOR<TeamProjectUpdateWithoutTeamInput, TeamProjectUncheckedUpdateWithoutTeamInput>
  }

  export type TeamProjectUpdateManyWithWhereWithoutTeamInput = {
    where: TeamProjectScalarWhereInput
    data: XOR<TeamProjectUpdateManyMutationInput, TeamProjectUncheckedUpdateManyWithoutTeamProjectsInput>
  }

  export type UserUpsertWithoutCreatedTeamsInput = {
    update: XOR<UserUpdateWithoutCreatedTeamsInput, UserUncheckedUpdateWithoutCreatedTeamsInput>
    create: XOR<UserCreateWithoutCreatedTeamsInput, UserUncheckedCreateWithoutCreatedTeamsInput>
  }

  export type UserUpdateWithoutCreatedTeamsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutUpdatedTeamsInput = {
    update: XOR<UserUpdateWithoutUpdatedTeamsInput, UserUncheckedUpdateWithoutUpdatedTeamsInput>
    create: XOR<UserCreateWithoutUpdatedTeamsInput, UserUncheckedCreateWithoutUpdatedTeamsInput>
  }

  export type UserUpdateWithoutUpdatedTeamsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUpdatedTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutTeamMembersInput = {
    uid: string
    email: string
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamMembersInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
  }

  export type TeamCreateWithoutTeamMembersInput = {
    name: string
    active?: boolean
    teamProjects?: TeamProjectCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamsInput
    updatedAt?: Date | string | null
  }

  export type TeamUncheckedCreateWithoutTeamMembersInput = {
    id?: number
    name: string
    active?: boolean
    teamProjects?: TeamProjectUncheckedCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamCreateOrConnectWithoutTeamMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
  }

  export type UserCreateWithoutCreatedTeamMembersInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedTeamMembersInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedTeamMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTeamMembersInput, UserUncheckedCreateWithoutCreatedTeamMembersInput>
  }

  export type UserCreateWithoutUpdatedTeamMembersInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedTeamMembersInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedTeamMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedTeamMembersInput, UserUncheckedCreateWithoutUpdatedTeamMembersInput>
  }

  export type UserUpsertWithoutTeamMembersInput = {
    update: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
  }

  export type UserUpdateWithoutTeamMembersInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutTeamMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type TeamUpsertWithoutTeamMembersInput = {
    update: XOR<TeamUpdateWithoutTeamMembersInput, TeamUncheckedUpdateWithoutTeamMembersInput>
    create: XOR<TeamCreateWithoutTeamMembersInput, TeamUncheckedCreateWithoutTeamMembersInput>
  }

  export type TeamUpdateWithoutTeamMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamUncheckedUpdateWithoutTeamMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUncheckedUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpsertWithoutCreatedTeamMembersInput = {
    update: XOR<UserUpdateWithoutCreatedTeamMembersInput, UserUncheckedUpdateWithoutCreatedTeamMembersInput>
    create: XOR<UserCreateWithoutCreatedTeamMembersInput, UserUncheckedCreateWithoutCreatedTeamMembersInput>
  }

  export type UserUpdateWithoutCreatedTeamMembersInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedTeamMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutUpdatedTeamMembersInput = {
    update: XOR<UserUpdateWithoutUpdatedTeamMembersInput, UserUncheckedUpdateWithoutUpdatedTeamMembersInput>
    create: XOR<UserCreateWithoutUpdatedTeamMembersInput, UserUncheckedCreateWithoutUpdatedTeamMembersInput>
  }

  export type UserUpdateWithoutUpdatedTeamMembersInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUpdatedTeamMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type TeamProjectCreateWithoutProjectInput = {
    team: TeamCreateNestedOneWithoutTeamProjectsInput
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamProjectInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamProjectInput
    updatedAt?: Date | string | null
  }

  export type TeamProjectUncheckedCreateWithoutProjectInput = {
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamProjectCreateOrConnectWithoutProjectInput = {
    where: TeamProjectWhereUniqueInput
    create: XOR<TeamProjectCreateWithoutProjectInput, TeamProjectUncheckedCreateWithoutProjectInput>
  }

  export type TeamProjectCreateManyProjectInputEnvelope = {
    data: Enumerable<TeamProjectCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type EnvironmentCreateWithoutProjectInput = {
    name: string
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyCreateNestedManyWithoutEnvironmentInput
    contracts?: ContractCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedEnvironmentsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedEnvironmentsInput
    updatedAt?: Date | string | null
  }

  export type EnvironmentUncheckedCreateWithoutProjectInput = {
    id?: number
    name: string
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutEnvironmentInput
    contracts?: ContractUncheckedCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type EnvironmentCreateOrConnectWithoutProjectInput = {
    where: EnvironmentWhereUniqueInput
    create: XOR<EnvironmentCreateWithoutProjectInput, EnvironmentUncheckedCreateWithoutProjectInput>
  }

  export type EnvironmentCreateManyProjectInputEnvelope = {
    data: Enumerable<EnvironmentCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedProjectsInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedProjectsInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
  }

  export type UserCreateWithoutUpdatedProjectsInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedProjectsInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedProjectsInput, UserUncheckedCreateWithoutUpdatedProjectsInput>
  }

  export type TeamProjectUpsertWithWhereUniqueWithoutProjectInput = {
    where: TeamProjectWhereUniqueInput
    update: XOR<TeamProjectUpdateWithoutProjectInput, TeamProjectUncheckedUpdateWithoutProjectInput>
    create: XOR<TeamProjectCreateWithoutProjectInput, TeamProjectUncheckedCreateWithoutProjectInput>
  }

  export type TeamProjectUpdateWithWhereUniqueWithoutProjectInput = {
    where: TeamProjectWhereUniqueInput
    data: XOR<TeamProjectUpdateWithoutProjectInput, TeamProjectUncheckedUpdateWithoutProjectInput>
  }

  export type TeamProjectUpdateManyWithWhereWithoutProjectInput = {
    where: TeamProjectScalarWhereInput
    data: XOR<TeamProjectUpdateManyMutationInput, TeamProjectUncheckedUpdateManyWithoutTeamProjectsInput>
  }

  export type EnvironmentUpsertWithWhereUniqueWithoutProjectInput = {
    where: EnvironmentWhereUniqueInput
    update: XOR<EnvironmentUpdateWithoutProjectInput, EnvironmentUncheckedUpdateWithoutProjectInput>
    create: XOR<EnvironmentCreateWithoutProjectInput, EnvironmentUncheckedCreateWithoutProjectInput>
  }

  export type EnvironmentUpdateWithWhereUniqueWithoutProjectInput = {
    where: EnvironmentWhereUniqueInput
    data: XOR<EnvironmentUpdateWithoutProjectInput, EnvironmentUncheckedUpdateWithoutProjectInput>
  }

  export type EnvironmentUpdateManyWithWhereWithoutProjectInput = {
    where: EnvironmentScalarWhereInput
    data: XOR<EnvironmentUpdateManyMutationInput, EnvironmentUncheckedUpdateManyWithoutEnvironmentsInput>
  }

  export type UserUpsertWithoutCreatedProjectsInput = {
    update: XOR<UserUpdateWithoutCreatedProjectsInput, UserUncheckedUpdateWithoutCreatedProjectsInput>
    create: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
  }

  export type UserUpdateWithoutCreatedProjectsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutUpdatedProjectsInput = {
    update: XOR<UserUpdateWithoutUpdatedProjectsInput, UserUncheckedUpdateWithoutUpdatedProjectsInput>
    create: XOR<UserCreateWithoutUpdatedProjectsInput, UserUncheckedCreateWithoutUpdatedProjectsInput>
  }

  export type UserUpdateWithoutUpdatedProjectsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUpdatedProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type TeamCreateWithoutTeamProjectsInput = {
    name: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedTeamsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedTeamsInput
    updatedAt?: Date | string | null
  }

  export type TeamUncheckedCreateWithoutTeamProjectsInput = {
    id?: number
    name: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamCreateOrConnectWithoutTeamProjectsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTeamProjectsInput, TeamUncheckedCreateWithoutTeamProjectsInput>
  }

  export type ProjectCreateWithoutTeamProjectsInput = {
    name: string
    slug: string
    active?: boolean
    environments?: EnvironmentCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedProjectsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedProjectsInput
    updatedAt?: Date | string | null
  }

  export type ProjectUncheckedCreateWithoutTeamProjectsInput = {
    id?: number
    name: string
    slug: string
    active?: boolean
    environments?: EnvironmentUncheckedCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ProjectCreateOrConnectWithoutTeamProjectsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTeamProjectsInput, ProjectUncheckedCreateWithoutTeamProjectsInput>
  }

  export type UserCreateWithoutCreatedTeamProjectInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedTeamProjectInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedTeamProjectInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTeamProjectInput, UserUncheckedCreateWithoutCreatedTeamProjectInput>
  }

  export type UserCreateWithoutUpdatedTeamProjectInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedTeamProjectInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedTeamProjectInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedTeamProjectInput, UserUncheckedCreateWithoutUpdatedTeamProjectInput>
  }

  export type TeamUpsertWithoutTeamProjectsInput = {
    update: XOR<TeamUpdateWithoutTeamProjectsInput, TeamUncheckedUpdateWithoutTeamProjectsInput>
    create: XOR<TeamCreateWithoutTeamProjectsInput, TeamUncheckedCreateWithoutTeamProjectsInput>
  }

  export type TeamUpdateWithoutTeamProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamUncheckedUpdateWithoutTeamProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectUpsertWithoutTeamProjectsInput = {
    update: XOR<ProjectUpdateWithoutTeamProjectsInput, ProjectUncheckedUpdateWithoutTeamProjectsInput>
    create: XOR<ProjectCreateWithoutTeamProjectsInput, ProjectUncheckedCreateWithoutTeamProjectsInput>
  }

  export type ProjectUpdateWithoutTeamProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    environments?: EnvironmentUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedProjectsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedProjectsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateWithoutTeamProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    environments?: EnvironmentUncheckedUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpsertWithoutCreatedTeamProjectInput = {
    update: XOR<UserUpdateWithoutCreatedTeamProjectInput, UserUncheckedUpdateWithoutCreatedTeamProjectInput>
    create: XOR<UserCreateWithoutCreatedTeamProjectInput, UserUncheckedCreateWithoutCreatedTeamProjectInput>
  }

  export type UserUpdateWithoutCreatedTeamProjectInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedTeamProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutUpdatedTeamProjectInput = {
    update: XOR<UserUpdateWithoutUpdatedTeamProjectInput, UserUncheckedUpdateWithoutUpdatedTeamProjectInput>
    create: XOR<UserCreateWithoutUpdatedTeamProjectInput, UserUncheckedCreateWithoutUpdatedTeamProjectInput>
  }

  export type UserUpdateWithoutUpdatedTeamProjectInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUpdatedTeamProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type EnvironmentCreateWithoutApiKeysInput = {
    name: string
    project: ProjectCreateNestedOneWithoutEnvironmentsInput
    net: Net
    subId: number
    active?: boolean
    contracts?: ContractCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedEnvironmentsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedEnvironmentsInput
    updatedAt?: Date | string | null
  }

  export type EnvironmentUncheckedCreateWithoutApiKeysInput = {
    id?: number
    name: string
    projectId: number
    net: Net
    subId: number
    active?: boolean
    contracts?: ContractUncheckedCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type EnvironmentCreateOrConnectWithoutApiKeysInput = {
    where: EnvironmentWhereUniqueInput
    create: XOR<EnvironmentCreateWithoutApiKeysInput, EnvironmentUncheckedCreateWithoutApiKeysInput>
  }

  export type EnvironmentUpsertWithoutApiKeysInput = {
    update: XOR<EnvironmentUpdateWithoutApiKeysInput, EnvironmentUncheckedUpdateWithoutApiKeysInput>
    create: XOR<EnvironmentCreateWithoutApiKeysInput, EnvironmentUncheckedCreateWithoutApiKeysInput>
  }

  export type EnvironmentUpdateWithoutApiKeysInput = {
    name?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutEnvironmentsInput
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    contracts?: ContractUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedEnvironmentsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedEnvironmentsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnvironmentUncheckedUpdateWithoutApiKeysInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    projectId?: IntFieldUpdateOperationsInput | number
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    contracts?: ContractUncheckedUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectCreateWithoutEnvironmentsInput = {
    name: string
    slug: string
    active?: boolean
    teamProjects?: TeamProjectCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedProjectsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedProjectsInput
    updatedAt?: Date | string | null
  }

  export type ProjectUncheckedCreateWithoutEnvironmentsInput = {
    id?: number
    name: string
    slug: string
    active?: boolean
    teamProjects?: TeamProjectUncheckedCreateNestedManyWithoutProjectInput
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ProjectCreateOrConnectWithoutEnvironmentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutEnvironmentsInput, ProjectUncheckedCreateWithoutEnvironmentsInput>
  }

  export type ApiKeyCreateWithoutEnvironmentInput = {
    reference: string
    net: Net
    active?: boolean
  }

  export type ApiKeyUncheckedCreateWithoutEnvironmentInput = {
    reference: string
    net: Net
    active?: boolean
  }

  export type ApiKeyCreateOrConnectWithoutEnvironmentInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutEnvironmentInput, ApiKeyUncheckedCreateWithoutEnvironmentInput>
  }

  export type ApiKeyCreateManyEnvironmentInputEnvelope = {
    data: Enumerable<ApiKeyCreateManyEnvironmentInput>
    skipDuplicates?: boolean
  }

  export type ContractCreateWithoutEnvironmentInput = {
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedContractsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedContractsInput
    updatedAt?: Date | string | null
  }

  export type ContractUncheckedCreateWithoutEnvironmentInput = {
    id?: number
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ContractCreateOrConnectWithoutEnvironmentInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutEnvironmentInput, ContractUncheckedCreateWithoutEnvironmentInput>
  }

  export type ContractCreateManyEnvironmentInputEnvelope = {
    data: Enumerable<ContractCreateManyEnvironmentInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedEnvironmentsInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedEnvironmentsInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedEnvironmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedEnvironmentsInput, UserUncheckedCreateWithoutCreatedEnvironmentsInput>
  }

  export type UserCreateWithoutUpdatedEnvironmentsInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedEnvironmentsInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedEnvironmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedEnvironmentsInput, UserUncheckedCreateWithoutUpdatedEnvironmentsInput>
  }

  export type ProjectUpsertWithoutEnvironmentsInput = {
    update: XOR<ProjectUpdateWithoutEnvironmentsInput, ProjectUncheckedUpdateWithoutEnvironmentsInput>
    create: XOR<ProjectCreateWithoutEnvironmentsInput, ProjectUncheckedCreateWithoutEnvironmentsInput>
  }

  export type ProjectUpdateWithoutEnvironmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedProjectsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedProjectsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateWithoutEnvironmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUncheckedUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutEnvironmentInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutEnvironmentInput, ApiKeyUncheckedUpdateWithoutEnvironmentInput>
    create: XOR<ApiKeyCreateWithoutEnvironmentInput, ApiKeyUncheckedCreateWithoutEnvironmentInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutEnvironmentInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutEnvironmentInput, ApiKeyUncheckedUpdateWithoutEnvironmentInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutEnvironmentInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutApiKeysInput>
  }

  export type ApiKeyScalarWhereInput = {
    AND?: Enumerable<ApiKeyScalarWhereInput>
    OR?: Enumerable<ApiKeyScalarWhereInput>
    NOT?: Enumerable<ApiKeyScalarWhereInput>
    reference?: StringFilter | string
    net?: EnumNetFilter | Net
    environmentId?: IntFilter | number
    active?: BoolFilter | boolean
  }

  export type ContractUpsertWithWhereUniqueWithoutEnvironmentInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutEnvironmentInput, ContractUncheckedUpdateWithoutEnvironmentInput>
    create: XOR<ContractCreateWithoutEnvironmentInput, ContractUncheckedCreateWithoutEnvironmentInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutEnvironmentInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutEnvironmentInput, ContractUncheckedUpdateWithoutEnvironmentInput>
  }

  export type ContractUpdateManyWithWhereWithoutEnvironmentInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutContractsInput>
  }

  export type UserUpsertWithoutCreatedEnvironmentsInput = {
    update: XOR<UserUpdateWithoutCreatedEnvironmentsInput, UserUncheckedUpdateWithoutCreatedEnvironmentsInput>
    create: XOR<UserCreateWithoutCreatedEnvironmentsInput, UserUncheckedCreateWithoutCreatedEnvironmentsInput>
  }

  export type UserUpdateWithoutCreatedEnvironmentsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedEnvironmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutUpdatedEnvironmentsInput = {
    update: XOR<UserUpdateWithoutUpdatedEnvironmentsInput, UserUncheckedUpdateWithoutUpdatedEnvironmentsInput>
    create: XOR<UserCreateWithoutUpdatedEnvironmentsInput, UserUncheckedCreateWithoutUpdatedEnvironmentsInput>
  }

  export type UserUpdateWithoutUpdatedEnvironmentsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUpdatedEnvironmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type EnvironmentCreateWithoutContractsInput = {
    name: string
    project: ProjectCreateNestedOneWithoutEnvironmentsInput
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdByUser?: UserCreateNestedOneWithoutCreatedEnvironmentsInput
    updatedByUser?: UserCreateNestedOneWithoutUpdatedEnvironmentsInput
    updatedAt?: Date | string | null
  }

  export type EnvironmentUncheckedCreateWithoutContractsInput = {
    id?: number
    name: string
    projectId: number
    net: Net
    subId: number
    active?: boolean
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutEnvironmentInput
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type EnvironmentCreateOrConnectWithoutContractsInput = {
    where: EnvironmentWhereUniqueInput
    create: XOR<EnvironmentCreateWithoutContractsInput, EnvironmentUncheckedCreateWithoutContractsInput>
  }

  export type UserCreateWithoutCreatedContractsInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedContractsInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedContractsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedContractsInput, UserUncheckedCreateWithoutCreatedContractsInput>
  }

  export type UserCreateWithoutUpdatedContractsInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedContractsInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedContractsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedContractsInput, UserUncheckedCreateWithoutUpdatedContractsInput>
  }

  export type EnvironmentUpsertWithoutContractsInput = {
    update: XOR<EnvironmentUpdateWithoutContractsInput, EnvironmentUncheckedUpdateWithoutContractsInput>
    create: XOR<EnvironmentCreateWithoutContractsInput, EnvironmentUncheckedCreateWithoutContractsInput>
  }

  export type EnvironmentUpdateWithoutContractsInput = {
    name?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutEnvironmentsInput
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedEnvironmentsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedEnvironmentsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnvironmentUncheckedUpdateWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    projectId?: IntFieldUpdateOperationsInput | number
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpsertWithoutCreatedContractsInput = {
    update: XOR<UserUpdateWithoutCreatedContractsInput, UserUncheckedUpdateWithoutCreatedContractsInput>
    create: XOR<UserCreateWithoutCreatedContractsInput, UserUncheckedCreateWithoutCreatedContractsInput>
  }

  export type UserUpdateWithoutCreatedContractsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCreatedContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutUpdatedContractsInput = {
    update: XOR<UserUpdateWithoutUpdatedContractsInput, UserUncheckedUpdateWithoutUpdatedContractsInput>
    create: XOR<UserCreateWithoutUpdatedContractsInput, UserUncheckedCreateWithoutUpdatedContractsInput>
  }

  export type UserUpdateWithoutUpdatedContractsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUpdatedContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    userActions?: UserActionUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateWithoutUserActionsInput = {
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectCreateNestedManyWithoutUpdatedByUserInput
  }

  export type UserUncheckedCreateWithoutUserActionsInput = {
    id?: number
    uid: string
    email: string
    active?: boolean
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdTeams?: TeamUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedCreateNestedManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput
  }

  export type UserCreateOrConnectWithoutUserActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserActionsInput, UserUncheckedCreateWithoutUserActionsInput>
  }

  export type UserUpsertWithoutUserActionsInput = {
    update: XOR<UserUpdateWithoutUserActionsInput, UserUncheckedUpdateWithoutUserActionsInput>
    create: XOR<UserCreateWithoutUserActionsInput, UserUncheckedCreateWithoutUserActionsInput>
  }

  export type UserUpdateWithoutUserActionsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUpdateManyWithoutUpdatedByUserInput
  }

  export type UserUncheckedUpdateWithoutUserActionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdTeams?: TeamUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeams?: TeamUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamMembers?: TeamMemberUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamMembers?: TeamMemberUncheckedUpdateManyWithoutUpdatedByUserInput
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedProjects?: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput
    createdEnvironments?: EnvironmentUncheckedUpdateManyWithoutCreatedByUserInput
    updatedEnvironments?: EnvironmentUncheckedUpdateManyWithoutUpdatedByUserInput
    createdContracts?: ContractUncheckedUpdateManyWithoutCreatedByUserInput
    updatedContracts?: ContractUncheckedUpdateManyWithoutUpdatedByUserInput
    createdTeamProject?: TeamProjectUncheckedUpdateManyWithoutCreatedByUserInput
    updatedTeamProject?: TeamProjectUncheckedUpdateManyWithoutUpdatedByUserInput
  }

  export type TeamMemberCreateManyUserInput = {
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamCreateManyCreatedByUserInput = {
    id?: number
    name: string
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamCreateManyUpdatedByUserInput = {
    id?: number
    name: string
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type TeamMemberCreateManyCreatedByUserInput = {
    userId: number
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamMemberCreateManyUpdatedByUserInput = {
    userId: number
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type ProjectCreateManyCreatedByUserInput = {
    id?: number
    name: string
    slug: string
    active?: boolean
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ProjectCreateManyUpdatedByUserInput = {
    id?: number
    name: string
    slug: string
    active?: boolean
    tutorial?: ProjectTutorial | null
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type EnvironmentCreateManyCreatedByUserInput = {
    id?: number
    name: string
    projectId: number
    net: Net
    subId: number
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type EnvironmentCreateManyUpdatedByUserInput = {
    id?: number
    name: string
    projectId: number
    net: Net
    subId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type ContractCreateManyCreatedByUserInput = {
    id?: number
    environmentId: number
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ContractCreateManyUpdatedByUserInput = {
    id?: number
    environmentId: number
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type TeamProjectCreateManyCreatedByUserInput = {
    teamId: number
    projectId: number
    active?: boolean
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamProjectCreateManyUpdatedByUserInput = {
    teamId: number
    projectId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
  }

  export type UserActionCreateManyUserInput = {
    id?: number
    action: UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    actionTimestamp?: Date | string
  }

  export type TeamMemberUpdateWithoutUserInput = {
    team?: TeamUpdateOneRequiredWithoutTeamMembersInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamMembersInput
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamMembersInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamMemberUncheckedUpdateWithoutUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamMembersInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutTeamInput
    teamProjects?: TeamProjectUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutTeamInput
    teamProjects?: TeamProjectUncheckedUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamUncheckedUpdateManyWithoutCreatedTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamUpdateWithoutUpdatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUpdateManyWithoutTeamInput
    teamProjects?: TeamProjectUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutTeamInput
    teamProjects?: TeamProjectUncheckedUpdateManyWithoutTeamInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamUncheckedUpdateManyWithoutUpdatedTeamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamMemberUpdateWithoutCreatedByUserInput = {
    user?: UserUpdateOneRequiredWithoutTeamMembersInput
    team?: TeamUpdateOneRequiredWithoutTeamMembersInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamMembersInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamMemberUncheckedUpdateWithoutCreatedByUserInput = {
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamMemberUncheckedUpdateManyWithoutCreatedTeamMembersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamMemberUpdateWithoutUpdatedByUserInput = {
    user?: UserUpdateOneRequiredWithoutTeamMembersInput
    team?: TeamUpdateOneRequiredWithoutTeamMembersInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamMembersInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamMemberUncheckedUpdateWithoutUpdatedByUserInput = {
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamMemberUncheckedUpdateManyWithoutUpdatedTeamMembersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUpdateManyWithoutProjectInput
    environments?: EnvironmentUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedByUser?: UserUpdateOneWithoutUpdatedProjectsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUncheckedUpdateManyWithoutProjectInput
    environments?: EnvironmentUncheckedUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectUncheckedUpdateManyWithoutCreatedProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectUpdateWithoutUpdatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUpdateManyWithoutProjectInput
    environments?: EnvironmentUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedProjectsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    teamProjects?: TeamProjectUncheckedUpdateManyWithoutProjectInput
    environments?: EnvironmentUncheckedUpdateManyWithoutProjectInput
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateManyWithoutUpdatedProjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    tutorial?: NullableEnumProjectTutorialFieldUpdateOperationsInput | ProjectTutorial | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnvironmentUpdateWithoutCreatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutEnvironmentsInput
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUpdateManyWithoutEnvironmentInput
    contracts?: ContractUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedByUser?: UserUpdateOneWithoutUpdatedEnvironmentsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnvironmentUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    projectId?: IntFieldUpdateOperationsInput | number
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutEnvironmentInput
    contracts?: ContractUncheckedUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnvironmentUncheckedUpdateManyWithoutCreatedEnvironmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    projectId?: IntFieldUpdateOperationsInput | number
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnvironmentUpdateWithoutUpdatedByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutEnvironmentsInput
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUpdateManyWithoutEnvironmentInput
    contracts?: ContractUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedEnvironmentsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnvironmentUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    projectId?: IntFieldUpdateOperationsInput | number
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutEnvironmentInput
    contracts?: ContractUncheckedUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnvironmentUncheckedUpdateManyWithoutUpdatedEnvironmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    projectId?: IntFieldUpdateOperationsInput | number
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractUpdateWithoutCreatedByUserInput = {
    environment?: EnvironmentUpdateOneRequiredWithoutContractsInput
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedByUser?: UserUpdateOneWithoutUpdatedContractsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractUncheckedUpdateWithoutCreatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContractUncheckedUpdateManyWithoutCreatedContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContractUpdateWithoutUpdatedByUserInput = {
    environment?: EnvironmentUpdateOneRequiredWithoutContractsInput
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedContractsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractUncheckedUpdateWithoutUpdatedByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractUncheckedUpdateManyWithoutUpdatedContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    environmentId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamProjectUpdateWithoutCreatedByUserInput = {
    team?: TeamUpdateOneRequiredWithoutTeamProjectsInput
    project?: ProjectUpdateOneRequiredWithoutTeamProjectsInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamProjectInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamProjectUncheckedUpdateWithoutCreatedByUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamProjectUncheckedUpdateManyWithoutCreatedTeamProjectInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamProjectUpdateWithoutUpdatedByUserInput = {
    team?: TeamUpdateOneRequiredWithoutTeamProjectsInput
    project?: ProjectUpdateOneRequiredWithoutTeamProjectsInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamProjectInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamProjectUncheckedUpdateWithoutUpdatedByUserInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamProjectUncheckedUpdateManyWithoutUpdatedTeamProjectInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserActionUpdateWithoutUserInput = {
    action?: EnumUserActionTypeFieldUpdateOperationsInput | UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    actionTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: EnumUserActionTypeFieldUpdateOperationsInput | UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    actionTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActionUncheckedUpdateManyWithoutUserActionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: EnumUserActionTypeFieldUpdateOperationsInput | UserActionType
    data?: NullableJsonNullValueInput | InputJsonValue
    actionTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberCreateManyTeamInput = {
    userId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamProjectCreateManyTeamInput = {
    projectId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamMemberUpdateWithoutTeamInput = {
    user?: UserUpdateOneRequiredWithoutTeamMembersInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamMembersInput
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamMembersInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamMemberUncheckedUpdateWithoutTeamInput = {
    userId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamProjectUpdateWithoutTeamInput = {
    project?: ProjectUpdateOneRequiredWithoutTeamProjectsInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamProjectInput
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamProjectInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamProjectUncheckedUpdateWithoutTeamInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamProjectUncheckedUpdateManyWithoutTeamProjectsInput = {
    projectId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TeamProjectCreateManyProjectInput = {
    teamId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type EnvironmentCreateManyProjectInput = {
    id?: number
    name: string
    net: Net
    subId: number
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type TeamProjectUpdateWithoutProjectInput = {
    team?: TeamUpdateOneRequiredWithoutTeamProjectsInput
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedTeamProjectInput
    updatedByUser?: UserUpdateOneWithoutUpdatedTeamProjectInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeamProjectUncheckedUpdateWithoutProjectInput = {
    teamId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnvironmentUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUpdateManyWithoutEnvironmentInput
    contracts?: ContractUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedEnvironmentsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedEnvironmentsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnvironmentUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutEnvironmentInput
    contracts?: ContractUncheckedUpdateManyWithoutEnvironmentInput
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnvironmentUncheckedUpdateManyWithoutEnvironmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    subId?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ApiKeyCreateManyEnvironmentInput = {
    reference: string
    net: Net
    active?: boolean
  }

  export type ContractCreateManyEnvironmentInput = {
    id?: number
    address: string
    net: Net
    active?: boolean
    createdAt?: Date | string | null
    createdBy?: number | null
    updatedAt?: Date | string | null
    updatedBy?: number | null
  }

  export type ApiKeyUpdateWithoutEnvironmentInput = {
    reference?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApiKeyUncheckedUpdateWithoutEnvironmentInput = {
    reference?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApiKeyUncheckedUpdateManyWithoutApiKeysInput = {
    reference?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContractUpdateWithoutEnvironmentInput = {
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdByUser?: UserUpdateOneWithoutCreatedContractsInput
    updatedByUser?: UserUpdateOneWithoutUpdatedContractsInput
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContractUncheckedUpdateWithoutEnvironmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContractUncheckedUpdateManyWithoutContractsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    net?: EnumNetFieldUpdateOperationsInput | Net
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}