// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("ALERTS_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../../../generated/prisma/alerts"
}

/// Stores info about an alert and has a 1-1 relationship with one of the various Rule tables.
model Alert {
  id               Int           @id @default(autoincrement())
  alertRuleKind    AlertRuleKind @map("alert_rule_kind")
  name             String
  matchingRule     Json          @map("matching_rule")
  /// A user can pause the alert from triggering by setting to 'true', in case they need to pause for some time.
  isPaused         Boolean       @default(false) @map("is_paused")
  /// Represents the project that this alert belongs to. Can be used to determine if the alert should trigger off of mainnet or testnet and which project this alert belongs to.
  projectSlug      String        @map("project_slug")
  /// Represents the environment that this alert belongs to. Can be used to determine if the alert should trigger off of mainnet or testnet and which project this alert belongs to.
  environmentSubId Int           @map("environment_sub_id")
  /// Which network the rule applies to.
  chainId          ChainId       @map("chain_id")
  /// If 'false', the record was soft-deleted by a user.
  active           Boolean       @default(true)
  createdAt        DateTime      @default(now()) @map("created_at")
  /// Reference to the user id who created the record.
  createdBy        Int           @map("created_by")
  updatedAt        DateTime?     @updatedAt @map("updated_at")
  /// Reference to the user id who last updated the record.
  updatedBy        Int?          @map("updated_by")

  webhookDeliveries WebhookDelivery[]

  @@map("alert_rules")
}

enum ChainId {
  MAINNET
  TESTNET

  @@map("chain_id")
}

/// Represents the various alert rule types.
enum AlertRuleKind {
  ACTIONS
  EVENTS
  STATE_CHANGES

  @@map("alert_rule_kind")
}

model WebhookDelivery {
  id                   Int                @id @default(autoincrement())
  alert                Alert              @relation(fields: [alertId], references: [id])
  alertId              Int
  webhookDestination   WebhookDestination @relation(fields: [webhookDestinationId], references: [id])
  webhookDestinationId Int
  active               Boolean            @default(true)
  createdAt            DateTime?          @default(now())
  /// Reference to the user id who created the record.
  createdBy            Int?
  updatedAt            DateTime?          @updatedAt
  /// Reference to the user id who last updated the record.
  updatedBy            Int?
}

model WebhookDestination {
  id              Int               @id @default(autoincrement())
  /// The project that owns this destination.
  projectSlug     String
  name            String?
  url             String
  /// A webhook API token for verifiying the sender.
  secret          String
  webhookDelivery WebhookDelivery[]
  active          Boolean           @default(true)
  createdAt       DateTime?         @default(now())
  /// Reference to the user id who created the record.
  createdBy       Int?
  updatedAt       DateTime?         @updatedAt
  /// Reference to the user id who last updated the record.
  updatedBy       Int?
}
