// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("ALERTS_DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../../../generated/prisma/alerts"
  binaryTargets = ["linux-musl", "native"]
}

/// Stores info about an alert and has a 1-1 relationship with one of the various Rule tables.
model Alert {
  id               Int           @id @default(autoincrement())
  alertRuleKind    AlertRuleKind @map("alert_rule_kind")
  name             String
  matchingRule     Json          @map("matching_rule")
  /// A user can pause the alert from triggering by setting to 'true', in case they need to pause for some time.
  isPaused         Boolean       @default(false) @map("is_paused")
  /// Represents the project that this alert belongs to. Can be used to determine if the alert should trigger off of mainnet or testnet and which project this alert belongs to.
  projectSlug      String        @map("project_slug")
  /// Represents the environment that this alert belongs to. Can be used to determine if the alert should trigger off of mainnet or testnet and which project this alert belongs to.
  environmentSubId Int           @map("environment_sub_id")
  /// Which network the rule applies to.
  chainId          ChainId       @map("chain_id")
  /// If 'false', the record was soft-deleted by a user.
  active           Boolean       @default(true)
  createdAt        DateTime      @default(now()) @map("created_at")
  /// Reference to the user id who created the record.
  createdBy        Int           @map("created_by")
  updatedAt        DateTime?     @updatedAt @map("updated_at")
  /// Reference to the user id who last updated the record.
  updatedBy        Int?          @map("updated_by")

  enabledDestinations        EnabledDestination[]
  triggeredAlerts            TriggeredAlert[]
  triggeredAlertDestination TriggeredAlertDestination[]

  @@map("alert_rules")
}

enum ChainId {
  MAINNET
  TESTNET

  @@map("chain_id")
}

/// Represents the various alert rule types.
enum AlertRuleKind {
  ACTIONS
  EVENTS
  STATE_CHANGES

  @@map("alert_rule_kind")
}

model EnabledDestination {
  id            Int         @id @default(autoincrement())
  alert         Alert       @relation(fields: [alertId], references: [id])
  alertId       Int         @map("alert_id")
  destination   Destination @relation(fields: [destinationId], references: [id])
  destinationId Int         @map("destination_id")
  createdAt     DateTime?   @default(now()) @map("created_at")
  /// Reference to the user id who created the record.
  createdBy     Int?        @map("created_by")
  updatedAt     DateTime?   @updatedAt @map("updated_at")
  /// Reference to the user id who last updated the record.
  updatedBy     Int?        @map("updated_by")

  @@unique([destinationId, alertId])
  @@map("enabled_destinations")
}

model Destination {
  id                  Int                  @id @default(autoincrement())
  name                String?
  projectSlug         String               @map("project_slug")
  type                DestinationType
  active              Boolean              @default(true)
  isValid             Boolean              @default(false) @map("is_valid")
  createdAt           DateTime?            @default(now()) @map("created_at")
  /// Reference to the user id who created the record.
  createdBy           Int?                 @map("created_by")
  updatedAt           DateTime?            @updatedAt @map("updated_at")
  /// Reference to the user id who last updated the record.
  updatedBy           Int?                 @map("updated_by")
  EnabledDestination  EnabledDestination[]
  webhookDestination  WebhookDestination?
  emailDestination    EmailDestination?
  telegramDestination TelegramDestination?

  TriggeredAlertDestination TriggeredAlertDestination[]
  @@map("destinations")
}

model WebhookDestination {
  id            Int         @id @default(autoincrement())
  destination   Destination @relation(fields: [destinationId], references: [id])
  destinationId Int         @unique @map("destination_id")
  url           String
  /// A webhook API token for verifiying the sender.
  secret        String
  createdAt     DateTime?   @default(now()) @map("created_at")
  /// Reference to the user id who created the record.
  createdBy     Int?        @map("created_by")
  updatedAt     DateTime?   @updatedAt @map("updated_at")
  /// Reference to the user id who last updated the record.
  updatedBy     Int?        @map("updated_by")

  @@map("webhook_destinations")
}

model EmailDestination {
  id             Int         @id @default(autoincrement())
  destination    Destination @relation(fields: [destinationId], references: [id])
  destinationId  Int         @unique @map("destination_id")
  email          String
  /// Verification token sent to the user's email address
  token          String?      @unique
  isVerified     Boolean     @default(false) @map("is_verified")
  // Token's expiry date
  tokenExpiresAt DateTime?    @map("token_expires_at")
  createdAt      DateTime?   @default(now()) @map("created_at")
  /// Reference to the user id who created the record.
  createdBy      Int?        @map("created_by")
  updatedAt      DateTime?   @updatedAt @map("updated_at")
  /// Reference to the user id who last updated the record.
  updatedBy      Int?        @map("updated_by")

  @@map("email_destinations")
}

model TelegramDestination {
  id             Int         @id @default(autoincrement())
  destination    Destination @relation(fields: [destinationId], references: [id])
  destinationId  Int         @unique @map("destination_id")
  /// Store chat ID as a double per Telegram's recommendation: https://core.telegram.org/bots/api#chat
  chatId         Float?      @map("chat_id")
  /// The title of the Telegram chat for display in the DevConsole UI
  chatTitle      String?     @map("chat_title")
  isGroupChat    Boolean?    @map("is_group_chat")
  /// Token passed to bot—usually via /start command—to set up destination
  startToken     String?     @unique @map("start_token")
  /// Token's expiry date
  tokenExpiresAt DateTime?   @map("token_expires_at")
  createdAt      DateTime    @default(now()) @map("created_at")
  /// Reference to the user id who created the record.
  createdBy      Int?        @map("created_by")
  updatedAt      DateTime?   @updatedAt @map("updated_at")
  /// Reference to the user id who last updated the record.
  updatedBy      Int?        @map("updated_by")

  @@map("telegram_destinations")
}

enum DestinationType {
  WEBHOOK
  EMAIL
  TELEGRAM

  @@map("destination_type")
}

model TriggeredAlert {
  id                         Int      @id @default(autoincrement())
  triggeredAlertSlug         String   @default(uuid()) @map("triggered_alert_slug")
  alert                      Alert    @relation(fields: [alertId], references: [id])
  alertId                    Int      @map("alert_id")
  triggeredInBlockHash       String   @map("triggered_in_block_hash")
  triggeredInTransactionHash String?  @map("triggered_in_transaction_hash")
  triggeredInReceiptId       Int?     @map("triggered_in_receipt_id")
  triggeredAt                DateTime @map("triggered_at")
  extraData                  Json?    @map("extra_data")

  triggeredAlertDestinations TriggeredAlertDestination[]
  @@map("triggered_alerts")
}

model TriggeredAlertDestination {
  triggeredAlert   TriggeredAlert                @relation(fields: [triggeredAlertId], references: [id])
  triggeredAlertId Int
  alert            Alert                         @relation(fields: [alertId], references: [id])
  alertId          Int                           @map("alert_id")
  destination      Destination                   @relation(fields: [destinationId], references: [id])
  destinationId    Int                           @map("destination_id")
  status           Int
  response         String
  createdAt        DateTime                      @map("created_at")

  @@id([triggeredAlertId, alertId, destinationId])
  @@map("triggered_alerts_destinations")
}
