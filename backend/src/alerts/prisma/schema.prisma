// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("ALERTS_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "generated"
}

/// Stores info about an alert and has a 1-1 relationship with one of the various Rule tables.
model Alert {
  id               Int       @id @default(autoincrement())
  type             RuleType
  name             String
  /// A user can pause the alert from triggering by setting to 'true', in case they need to pause for some time.
  isPaused         Boolean   @default(false)
  /// Represents the project that this alert belongs to. Can be used to determine if the alert should trigger off of mainnet or testnet and which project this alert belongs to.
  projectSlug      String
  /// Represents the environment that this alert belongs to. Can be used to determine if the alert should trigger off of mainnet or testnet and which project this alert belongs to.
  environmentSubId Int
  /// Which network the rule applies to.
  net              Net
  /// If 'false', the record was soft-deleted by a user.
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  /// Reference to the user id who created the record.
  createdBy        Int
  updatedAt        DateTime? @updatedAt
  /// Reference to the user id who last updated the record.
  updatedBy        Int?

  fnCallRule        FnCallRule?
  txRule            TxRule?
  eventRule         EventRule?
  acctBalRule       AcctBalRule?
  webhookDeliveries WebhookDelivery[]
}

enum Net {
  MAINNET
  TESTNET
}

/// Represents the various alert rule types.
enum RuleType {
  /// Successful Transaction
  TX_SUCCESS
  /// Failed Transaction
  TX_FAILURE
  /// Function Call
  FN_CALL
  /// Event Logged
  EVENT
  /// Account Balance Changed by some Percentage
  ACCT_BAL_PCT
  /// Account Balance Changed by some Amount
  ACCT_BAL_NUM
}

/// Stores details for alerts of type FN_CALL.
model FnCallRule {
  id        Int       @id @default(autoincrement())
  /// The rule's target contract address.
  contract  String
  /// Stores the function name to trigger off of.
  function  String
  /// Future: Stores details on which params to trigger off of within the function. Will most likely be represented by mongodb style filters.
  params    Json
  alert     Alert     @relation(fields: [alertId], references: [id])
  alertId   Int       @unique
  /// If 'false', the record was soft-deleted by a user.
  active    Boolean   @default(true)
  createdAt DateTime? @default(now())
  /// Reference to the user id who created the record.
  createdBy Int?
  updatedAt DateTime? @updatedAt
  /// Reference to the user id who last updated the record.
  updatedBy Int?
}

/// Stores details for alerts of type TX_SUCCESS and TX_FAILURE.
model TxRule {
  id        Int       @id @default(autoincrement())
  /// The rule's target contract address.
  contract  String
  /// Stores which, if any, transaction action to trigger off of.
  action    TxAction?
  alert     Alert     @relation(fields: [alertId], references: [id])
  alertId   Int       @unique
  /// If 'false', the record was soft-deleted by a user.
  active    Boolean   @default(true)
  createdAt DateTime? @default(now())
  /// Reference to the user id who created the record.
  createdBy Int?
  updatedAt DateTime? @updatedAt
  /// Reference to the user id who last updated the record.
  updatedBy Int?
}

/// Represents the available actions on transactions: https://docs.near.org/docs/concepts/transaction#action
enum TxAction {
  CREATE_ACCOUNT
  DEPLOY_CONTRACT
  FUNCTION_CALL
  TRANSFER
  STAKE
  ADD_KEY
  DELETE_KEY
  DELETE_ACCOUNT
}

/// Stores details for alerts of type EVENT.
model EventRule {
  id        Int       @id @default(autoincrement())
  /// The rule's target contract address.
  contract  String
  /// The event standard to trigger off of.
  standard  String
  /// The event version to trigger off of.
  version   String
  /// The event name to trigger off of.
  event     String
  /// Future: Stores details on which data within the 'data' field to trigger off of on the logged event. Will most likely be represented by mongodb style filters.
  data      Json
  alert     Alert     @relation(fields: [alertId], references: [id])
  alertId   Int       @unique
  /// If 'false', the record was soft-deleted by a user.
  active    Boolean   @default(true)
  createdAt DateTime? @default(now())
  /// Reference to the user id who created the record.
  createdBy Int?
  updatedAt DateTime? @updatedAt
  /// Reference to the user id who last updated the record.
  updatedBy Int?
}

/// Stores details for alerts of type ACCT_BAL_PCT and ACCT_BAL_NUM.
model AcctBalRule {
  id         Int              @id @default(autoincrement())
  /// The rule's target contract address.
  contract   String
  /// Represents a numeric comparator. Used in combination with the `amount` field.
  comparator NumberComparator
  /// Represents a percentage or a specified amount of tokens depending on the alert type.
  amount     Int
  alert      Alert            @relation(fields: [alertId], references: [id])
  alertId    Int              @unique
  /// If 'false', the record was soft-deleted by a user.
  active     Boolean          @default(true)
  createdAt  DateTime?        @default(now())
  /// Reference to the user id who created the record.
  createdBy  Int?
  updatedAt  DateTime?        @updatedAt
  /// Reference to the user id who last updated the record.
  updatedBy  Int?
}

/// Represents common comparators used with numbers.
enum NumberComparator {
  /// Equal
  EQ
  /// Not Equal
  NEQ
  /// Less Than
  LT
  /// Less Than or Equal
  LTE
  /// Greater Than
  GT
  /// Greater Than or Equal
  GTE
}

model WebhookDelivery {
  id                   Int                @id @default(autoincrement())
  alert                Alert              @relation(fields: [alertId], references: [id])
  alertId              Int
  webhookDestination   WebhookDestination @relation(fields: [webhookDestinationId], references: [id])
  webhookDestinationId Int
  active               Boolean            @default(true)
  createdAt            DateTime?          @default(now())
  /// Reference to the user id who created the record.
  createdBy            Int?
  updatedAt            DateTime?          @updatedAt
  /// Reference to the user id who last updated the record.
  updatedBy            Int?
}

model WebhookDestination {
  id              Int               @id @default(autoincrement())
  /// The project that owns this destination.
  projectSlug     String
  name            String?
  url             String
  /// A webhook API token for verifiying the sender.
  secret          String
  webhookDelivery WebhookDelivery[]
  active          Boolean           @default(true)
  createdAt       DateTime?         @default(now())
  /// Reference to the user id who created the record.
  createdBy       Int?
  updatedAt       DateTime?         @updatedAt
  /// Reference to the user id who last updated the record.
  updatedBy       Int?
}
